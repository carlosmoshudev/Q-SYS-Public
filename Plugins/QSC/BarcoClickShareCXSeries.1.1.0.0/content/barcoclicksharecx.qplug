--[[ BEGIN DIGITAL SIGNATURE
EgyKcKG+qGgu1IVVxBPeqi0j526F3jMUGukWJgO3jNXgfKmqVGBupjjtUeXeAdoYfK528b41EzCVgRmPWzSordQ7Tw8KkhDbBLIbe4+jrymBTlXxkGf1WJ1GlfzEY1i3GNg+D7z9zYhRRlY/mJLqMFHe8V5k+f2JIuwfXg3iAZu0LS+z7fZa2/UOWI/4eQVcpFwL+YXkX/vC3+5qmU9gUJrIO0Sh9Mt3jJkw7YybQjpGdSkIq47RvwX5GXtv3F0Z3kQDt12lWnpbpNpyzDDPNnjDptNykOteWnZdrwPSV3DNAjK0zqkC5cBc+j1ACaZo4mBq0gJa6+bBB6NDMWPVig==
END DIGITAL SIGNATURE ]]
-- Barco ClickShare CX Series
-- by QSC
-- August 2020

PluginInfo = {
    Name = "Enterprise Manager~Barco~ClickShare CX Series v1.1",
    Version = "1.1",
    BuildVersion = "1.1.0.0",
    Id = "bb4217ac-401f-4698-aad9-9e4b2496ff46",
    Author = "QSC",
    Description = "A Plugin for Barco's ClickShare CX Series",
    IsManaged = true,
    Manufacturer = "Barco",
    Model = "ClickShare CX Series",
    Type = Reflect and Reflect.Types.Presentation or 0,
}

local Colors = {
  Barco = {255,0,0},
  MainGP = {255,255,255},
  InnerGP = {230,230,230},
  HeaderFill = {0,0,0,0},
  HeaderColor = {51,51,51}
}

function GetColor(props)
  return Colors.Barco
end

function GetPrettyName(props)
  return "Barco\r\nClickShare CX Series v" .. PluginInfo.Version
end

local pagenames = {"Setup","Buttons","Video"}

function GetPages(props)
  pages = {}
  for ix,name in ipairs(pagenames) do
    table.insert(pages,{name = pagenames[ix]})
  end
  return pages
end

function GetProperties()
  props = {}
  table.insert(props,{Name = "Debug Print",Type = "enum",Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},Value = "None"})
  table.insert(props,{Name = "Paired Buttons",Type = "integer",Min = 1,Max = 32,Value = 1})
  return props
end

function RectifyProperties(props)
  if props.plugin_show_debug.Value==false then props["Debug Print"].IsHidden=true end
  return props
end

function GetControls(props)
  ctrls = {}
  local Btns = props["Paired Buttons"].Value
  
  -- Setup Page
  -- Connection Setup
  table.insert(ctrls,{Name = "IPAddress",ControlType = "Text",DefaultValue = "Enter IP Address",UserPin = true,PinStyle = "Both",Count = 1})
  table.insert(ctrls,{Name = "Username",ControlType = "Text",DefaultValue = "Enter username",UserPin = true,PinStyle = "Both",Count = 1})
  table.insert(ctrls,{Name = "Password",ControlType = "Text",DefaultValue = "Enter password",UserPin = true,PinStyle = "Both",Count = 1})
  -- Status
  table.insert(ctrls,{Name = "Status",ControlType = "Indicator",IndicatorType = Reflect and "StatusGP" or "Status",PinStyle = "Output",UserPin = true,Count = 1})
  table.insert(ctrls,{Name = "IsSharing",ControlType = "Indicator",IndicatorType = "Led",UserPin = true,PinStyle = "Output",Count = 1})
  table.insert(ctrls,{Name = "RebootSystem",ControlType = "Button",ButtonType = "Trigger",UserPin = true,PinStyle = "Both",Count = 1})
  table.insert(ctrls,{Name = "BaseModel",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = 1})
  table.insert(ctrls,{Name = "SerialNumber",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = 1})
  -- Buttons Page
  table.insert(ctrls,{Name = "ButtonConnected",ControlType = "Indicator",IndicatorType = "Led",UserPin = true,PinStyle = "Output",Count = Btns})
  table.insert(ctrls,{Name = "ButtonSerialNumber",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = Btns})
  table.insert(ctrls,{Name = "ButtonMACAddress",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = Btns})
  table.insert(ctrls,{Name = "ButtonFirmware",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = Btns})
  table.insert(ctrls,{Name = "ButtonStatus",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = Btns})
  -- Video Page
  -- Video Output
  table.insert(ctrls,{Name = "VideoOutputConnected",ControlType = "Indicator",IndicatorType = "Led",UserPin = true,PinStyle = "Output",Count = 1})
  table.insert(ctrls,{Name = "VideoPreferredResolution",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = 1})
  -- Video Input
  table.insert(ctrls,{Name = "VideoInputSignal",ControlType = "Indicator",IndicatorType = "Led",UserPin = true,PinStyle = "Output",Count = 1})
  table.insert(ctrls,{Name = "VideoSourceName",ControlType = "Indicator",IndicatorType = "Text",UserPin = true,PinStyle = "Output",Count = 1})
  return ctrls
end

function GetControlLayout(props)
  layout   = {}
  graphics = {}
  local Btns = props["Paired Buttons"].Value
  local CurrentPage = pagenames[props["page_index"].Value]
  -- Logos and Label on all pages
  table.insert(graphics,{Type = "Image",Image = "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",Position = {0,0},Size = {311,94},ZOrder = 10000})
  
  if CurrentPage == "Setup" then
    -- Non control graphics
    -- GroupBoxes
    table.insert(graphics,{Type = "GroupBox",Fill = Colors.MainGP,CornerRadius = 0,StrokeWidth = 0,Position = {0,0},Size = {309,410}})
    table.insert(graphics,{Type = "GroupBox",Fill = Colors.InnerGP,CornerRadius = 0,StrokeWidth = 0,Position = {6,117},Size = {296,112}})
    table.insert(graphics,{Type = "GroupBox",Fill = Colors.InnerGP,CornerRadius = 0,StrokeWidth = 0,Position = {6,251},Size = {296,151}})
    -- Headers
    table.insert(graphics,{Type = "Header",Text = "Connect to Device",Fill = Colors.HeaderFill,Color = Colors.HeaderColor,Font = "Roboto",FontSize = 16,HTextAlign = "Center",Position = {15,126},Size = {275,11}})
    table.insert(graphics,{Type = "Header",Text = "Connection Status",Fill = Colors.HeaderFill,Color = Colors.HeaderColor,Font = "Roboto",FontSize = 16,HTextAlign = "Center",Position = {15,261},Size = {275,11}})
    -- Labels
    table.insert(graphics,{Type = "Label",Text = "Connection Setup",Fill = Colors.HeaderFill,Color = Colors.HeaderColor,Font = "Roboto",FontStyle = "Bold",FontSize = 18,HTextAlign = "Left",Position = {6,94},Size = {150,22}})
    table.insert(graphics,{Type = "Label",Text = "Status",Fill = Colors.HeaderFill,Color = Colors.HeaderColor,Font = "Roboto",FontStyle = "Bold",FontSize = 18,HTextAlign = "Left",Position = {6,229},Size = {160,22}})
    table.insert(graphics,{Type = "Label",Text = "IP Address",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 14,Color = Colors.HeaderColor,HTextAlign = "Right",Position = {15,151},Size = {103,18}})
    table.insert(graphics,{Type = "Label",Text = "Username",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 14,Color = Colors.HeaderColor,HTextAlign = "Right",Position = {15,172},Size = {103,18}})
    table.insert(graphics,{Type = "Label",Text = "Password",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 14,Color = Colors.HeaderColor,HTextAlign = "Right",Position = {15,194},Size = {103,18}})
    table.insert(graphics,{Type = "Label",Text = "Sharing",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 14,Color = Colors.HeaderColor,HTextAlign = "Right",Position = {15,323},Size = {103,18}})
    table.insert(graphics,{Type = "Label",Text = "Reboot System",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 14,Color = Colors.HeaderColor,HTextAlign = "Right",Position = {149,323},Size = {103,18}})
    table.insert(graphics,{Type = "Label",Text = "Base Model",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 14,Color = Colors.HeaderColor,HTextAlign = "Right",Position = {15,344},Size = {103,18}})
    table.insert(graphics,{Type = "Label",Text = "Serial Number",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 14,Color = Colors.HeaderColor,HTextAlign = "Right",Position = {15,365},Size = {103,18}})
    table.insert(graphics,{Type = "Label",Text = "Version "..PluginInfo.Version,Fill = Colors.HeaderFill,HTextAlign = "Right",Position = {200,390},Size = {99,12}})
    table.insert(graphics,{Type = "Label",Text = "CX Series with v2 API",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 10,Color = Colors.HeaderColor,HTextAlign = "Left",VTextAlign = "Top",Position = {6,389},Size = {207,13}})
    -- Control graphics
    -- Connection Setup
    layout["IPAddress"] = {PrettyName = "Connection Setup~IP Address",Style = "Text",Position = {126,151},Size = {164,18}}
    layout["Username"] = {PrettyName = "Connection Setup~Username",Style = "Text",Position = {126,172},Size = {164,18}}
    layout["Password"] = {PrettyName = "Connection Setup~Password",Style = "Text",Position = {126,194},Size = {164,18}}
    -- Status
    layout["Status"] = {PrettyName = "Status~Status",Style = "Text",Position = {15,283},Size = {275,32}}
    layout["IsSharing"] = {PrettyName = "Status~Sharing",Style = "Led",Position = {126,323},Size = {18,18}}
    layout["RebootSystem"] = {PrettyName = "Status~Reboot System",Style = "Button",ButtonStyle = "Trigger",Position = {254,323},Size = {36,18}}
    layout["BaseModel"] = {PrettyName = "Status~Base Model",Style = "Text",Position = {126,344},Size = {164,18}}
    layout["SerialNumber"] = {PrettyName = "Status~Serial Number",Style = "Text",Position = {126,365},Size = {164,18}}
  elseif CurrentPage == "Buttons" then
    -- Non control Graphics
    -- GroupBoxes
    table.insert(graphics,{Type = "GroupBox",Fill = Colors.MainGP,CornerRadius = 0,StrokeWidth = 0,Position = {0,0},Size = {471,190+(Btns-1)*22}})
    table.insert(graphics,{Type = "GropuBox",Fill = Colors.InnerGP,CornerRadius = 0,StrokeWidth = 0,Position = {8,116},Size = {459,66+(Btns-1)*22}})
    -- Labels
    table.insert(graphics,{Type = "Label",Text = "Buttons",Fill = Colors.HeaderFill,Font = "Roboto",FontStyle = "Bold",FontSize = 18,HTextAlign = "Left",Position = {8,94},Size = {139,22}})
    table.insert(graphics,{Type = "Label",Text = "Connected",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {7,127},Size = {66,19}})
    table.insert(graphics,{Type = "Label",Text = "Serial Number",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {70,127},Size = {90,19}})
    table.insert(graphics,{Type = "Label",Text = "MAC Address",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {169,127},Size = {90,19}})
    table.insert(graphics,{Type = "Label",Text = "Firmware",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {268,127},Size = {90,19}})
    table.insert(graphics,{Type = "Label",Text = "Status",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {368,127},Size = {90,19}})
    table.insert(graphics,{Type = "Label",Text = "Version "..PluginInfo.Version,Fill = Colors.HeaderFill,HTextAlign = "Right",Position = {367,170+(Btns-1)*22},Size = {99,12}})
    table.insert(graphics,{Type = "Label",Text = "CX Series with v2 API",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 10,Color = Colors.HeaderColor,HTextAlign = "Left",VTextAlign = "Top",Position = {6,169+(Btns-1)*22},Size = {207,13}})
    -- Control graphics
    for i=1,Btns do
      local ctrl_string = tostring(Btns==1 and "" or " "..i)
      layout["ButtonConnected"..ctrl_string] = {PrettyName = string.format("Buttons~Button %i~Connected",i),Style = "Led",Position = {30,146+(i-1)*22},Size = {20,20}}
      layout["ButtonSerialNumber"..ctrl_string] = {PrettyName = string.format("Buttons~Button %i~Serial Number",i),Style = "Text",Position = {70,146+(i-1)*22},Size = {90,16}}
      layout["ButtonMACAddress"..ctrl_string] = {PrettyName = string.format("Buttons~Button %i~MAC Address",i),Style = "Text",Position = {169,146+(i-1)*22},Size = {90,16}}
      layout["ButtonFirmware"..ctrl_string] = {PrettyName = string.format("Buttons~Button %i~Firmware",i),Style = "Text",Position = {268,146+(i-1)*22},Size = {90,16}}
      layout["ButtonStatus"..ctrl_string] = {PrettyName = string.format("Buttons~Button %i~Status",i),Style = "Text",Position = {368,146+(i-1)*22},Size = {90,16}}
    end
  elseif CurrentPage == "Video" then
    -- Non control Graphics
    -- GroupBoxes
    table.insert(graphics,{Type = "GroupBox",Fill = Colors.MainGP,CornerRadius = 0,StrokeWidth = 0,Position = {0,0},Size = {309,281}})
    table.insert(graphics,{Type = "GroupBox",Fill = Colors.InnerGP,CornerRadius = 0,StrokeWidth = 0,Position = {7,116},Size = {295,68}})
    table.insert(graphics,{Type = "GroupBox",Fill = Colors.InnerGP,CornerRadius = 0,StrokeWidth = 0,Position = {7,206},Size = {295,68}})
    -- Labels
    table.insert(graphics,{Type = "Label",Text = "Video Output",Fill = Colors.HeaderFill,Font = "Roboto",FontStyle = "Bold",FontSize = 18,HTextAlign = "Left",Position = {9,94},Size = {139,22}})
    table.insert(graphics,{Type = "Label",Text = "Video Input",Fill = Colors.HeaderFill,Font = "Roboto",FontStyle = "Bold",FontSize = 18,HTextAlign = "Left",Position = {9,184},Size = {139,22}})
    table.insert(graphics,{Type = "Label",Text = "Connected",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {16,128},Size = {66,19}})
    table.insert(graphics,{Type = "Label",Text = "Preferred Resolution",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {80,128},Size = {180,19}})
    table.insert(graphics,{Type = "Label",Text = "Signal",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {20,218},Size = {60,19}})
    table.insert(graphics,{Type = "Label",Text = "Source Name",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 12,Color = Colors.HeaderColor,Position = {80,218},Size = {180,19}})
    table.insert(graphics,{Type = "Label",Text = "Version "..PluginInfo.Version,Fill = Colors.HeaderFill,HTextAlign = "Right",Position = {201,262},Size = {99,12}})
    table.insert(graphics,{Type = "Label",Text = "CX Series with v2 API",Fill = Colors.HeaderFill,Font = "Roboto",FontSize = 10,Color = Colors.HeaderColor,HTextAlign = "Left",VTextAlign = "Top",Position = {6,261},Size = {207,13}})
    -- Control graphics
    layout["VideoOutputConnected"] = {PrettyName = "Video~Output~Connected",Style = "Led",Position = {40,147},Size = {20,20}}
    layout["VideoPreferredResolution"] = {PrettyName = "Video~Output~Preferred Resolution",Style = "Text",Position = {80,148},Size = {180,16}}
    layout["VideoInputSignal"] = {PrettyName = "Video~Input~Signal",Style = "Led",Position = {40,237},Size = {20,20}}
    layout["VideoSourceName"] = {PrettyName = "Video~Input~Source Name",Style = "Text",Position = {80,237},Size = {180,16}}
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  -- Control aliases
  Status = Controls.Status
  IP = Controls.IPAddress
  User = Controls.Username
  Pass = Controls.Password
  Sharing = Controls.IsSharing
  Reboot = Controls.RebootSystem
  Model = Controls.BaseModel
  Serial = Controls.SerialNumber
  BtnConnected = Controls.ButtonConnected
  BtnSerial = Controls.ButtonSerialNumber
  BtnMAC = Controls.ButtonMACAddress
  BtnFirmware = Controls.ButtonFirmware
  BtnStat = Controls.ButtonStatus
  VidConnected = Controls.VideoOutputConnected
  PrefResolution = Controls.VideoPreferredResolution
  VidIn = Controls.VideoInputSignal
  VidSource = Controls.VideoSourceName
  
  -- Variables and flags
  VideoInput = false
  DebugTx=false
  DebugRx=false
  DebugFunction=false
  DebugPrint=Properties["Debug Print"].Value
  Buttons = Properties["Paired Buttons"].Value
  
  -- Timers, tables, and constants
  StatusState = { OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5 }
  PollTimer = Timer.New()
  PollTime = 3
  ReconnectTimer = Timer.New()
  ReconnectTime = 3
  json = require('rapidjson')
  
  -- Helper functions
  -- A function to determine common print statement scenarios for troubleshooting
  function SetupDebugPrint()
    if DebugPrint=="Tx/Rx" then
      DebugTx,DebugRx=true,true
    elseif DebugPrint=="Tx" then
      DebugTx=true
    elseif DebugPrint=="Rx" then
      DebugRx=true
    elseif DebugPrint=="Function Calls" then
      DebugFunction=true
    elseif DebugPrint=="All" then
      DebugTx,DebugRx,DebugFunction=true,true,true
    end
  end
  
  -- Update the Status control
  function ReportStatus(state,msg)
    if DebugFunction then print("ReportStatus() Called") end
    local msg=msg or ""
    Status.Value=StatusState[state]
    Status.String=msg
  end
  
  -- Check the IP on script start
  function CheckIP()
    if DebugFunction then print("CheckIP() Called") end
    if IP.String == "" then
      IP.String = "Enter IP Address"
      Disconnected("No IP Address")
    else
      if IP.String == "Enter IP Address" then
        Disconnected("No IP Address")
      else
        if HasConncectionDetails() then
          GetDeviceInfo()
        else
          Disconnected("Credentials required")
        end
      end
    end
  end
  
  -- Check the credentials
  function CheckCredentials()
    if DebugFunction then print("CheckCredentials() Called") end
    Disconnected()
    if User.String == "" or Pass.String == "" then
      if User.String == "" then
        User.String = "Enter username"
      end
      if Pass.String == "" then
        Pass.String = "Enter password"
      end
      ReportStatus("MISSING","Credentials required")
    else
      CheckIP()  -- Only check IP if credentials are provided
    end
  end
  
  function HasConncectionDetails()
    if IP.String == "Enter IP Address" or IP.String == "" then
      return false
    elseif User.String == "Enter username" or User.String == "" then
      return false
    elseif Pass.String == "Enter password" or Pass.String == "" then
      return false
    else
      return true
    end
  end
  
  -- Get data from device
  function Get(cmd, EH)
    if DebugFunction then print("Get() Called") end
    if DebugTx then print("Tx: "..cmd) end
    local ipAddress = IP.String
    local userName = User.String
    local password = Pass.String
    HttpClient.Download{
      Url = string.format("https://%s:4003/v2/%s",ipAddress,cmd),
      Headers = { ['Content-Type'] = 'application/json', ['accept'] = '*/*' },
      User = userName,
      Password = password,
      Auth = "basic",
      Timeout = 10,
      EventHandler = EH
    }
  end
  
  -- Post data to device
  function Post(cmd, data, EH)
    if DebugFunction then print("Post() Called") end
    if DebugTx then print("Tx: "..cmd) end
    local ipAddress = IP.String
    local userName = User.String
    local password = Pass.String
    HttpClient.Upload{
      Url = string.format("https://%s:4003/v2/%s",ipAddress,cmd),
      Headers = { ['Content-Type'] = 'application/json', ['accept'] = '*/*' },
      User = userName,
      Password = password,
      Auth = "basic",
      Data = data,
      Method = "POST",
      Timeout = 10,
      EventHandler = EH
    }
  end
  
  -- A function to clear controls/flags/variables and clears tables
  function ClearVariables()
    if DebugFunction then print("ClearVariables() Called") end
    connected = false
    Sharing.Boolean = false
    VidConnected.Boolean = false
    VidIn.Boolean = false
    VideoInput = false
    Model.String = ""
    Serial.String = ""
    PrefResolution.String = ""
    VidSource.String = ""
    if Buttons > 1 then
      ClearButtons()
    else
      BtnConnected.Boolean = false
      BtnStat.String = ""
      BtnSerial.String = ""
      BtnMAC.String = ""
      BtnFirmware.String = ""
    end
  end
  
  function ClearButtons()
    for i=1,Buttons do
      BtnConnected[i].Boolean = false
      BtnStat[i].String = ""
      BtnSerial[i].String = ""
      BtnMAC[i].String = ""
      BtnFirmware[i].String = ""
    end
  end
  
  -- A function to trigger other functions or set flags if disconnected
  function Disconnected(err)
    if DebugFunction then print("Disconnected() Called") end
    if HasConncectionDetails() then
      ReconnectTimer:Start(ReconnectTime)
    else
      ReconnectTimer:Stop()
    end
    ReportStatus("MISSING",err)
    PollTimer:Stop()
    ClearVariables()
  end
  
  -- A function to trigger other functions once connected
  function Connected()
    if DebugFunction then print("Connected() Called") end
    ReportStatus("OK")
    PollDevice()
    PollTimer:Start(PollTime)
    ReconnectTimer:Stop()
  end
  
  -- Tx functions
  -- Initial data grab from device
  function GetDeviceInfo()
    if DebugFunction then print("GetDeviceInfo() Called") end
    Get("configuration/system/device-identity",BaseUnit)
  end
  
  -- Poll function for updates and state changes
  function PollDevice()
    if DebugFunction then print("PollDevice() Called") end
    Get("configuration/system/status",SystemStatus)
    Get("configuration/buttons",ButtonStatus)
    Get("configuration/video-outputs",VideoOutputStatus)
    if VideoInput then
      Get("configuration/input-cards",VideoInputStatus)
    end
  end
  
  function RebootUnit()
    if DebugFunction then print("RebootUnit() Called") end
    Post("operations/reboot","",RebootStatus)
  end
  
  -- Parsing Functions
  function RebootStatus(tbl,code,data,err,headers)
    if DebugFunction then print("RebootStatus() Called") end
    if DebugRx then print("Rx: "..data) end
    if code==0.0 then
      Disconnected(err)
    elseif code ~= 200.0 then
      print(code,err)
    end
  end
  
  function Base(data)
    if DebugFunction then print("Base() Called") end
    Model.String = string.match(data, '"productName":"(.-)"')
    Serial.String = string.match(data, '"serialNumber":"([^"]+)"')
    if Model.String == "CX-50" then
      VideoInput = true
    else
      VidSource.String = "Not supported by this model"
      VideoInput = false
    end
  end
  
  function BaseUnit(tbl,code,data,err,headers)
    if DebugFunction then print("BaseUnit() Called") end
    if DebugRx then print("Rx: "..data) end
    if code==200.0 and data ~= nil then
      Connected()
      Base(data)
    elseif code==0.0 then
      Disconnected(err)
      -- ReconnectTimer:Start(ReconnectTime)
    elseif code==401.0 then
      PollTimer:Stop()
      ReportStatus("FAULT", "Invalid credentials")
    else
      print(code,err)
    end
  end
  
  function SharingStatus(data)
    if DebugFunction then print("SharingStatus() Called") end
    local bool = string.match(data,'"sharing":(.+)}')
    if bool == "true" then
      Sharing.Boolean = true
    else
      Sharing.Boolean = false  
    end
  end
  
  function SystemStatus(tbl,code,data,err,headers)
    if DebugFunction then print("SystemStatus() Called") end
    if DebugRx then print("Rx: "..data) end
    if code==200.0 and data ~= nil then
      SharingStatus(data)
    elseif code==0.0 then
      Disconnected(err)
    elseif code==401.0 then
      PollTimer:Stop()
      ReportStatus("FAULT", "Invalid credentials")
    else
      print("System Status err:",code,err)
    end
  end
  
  function VideoOutputSettings(data)
    if DebugFunction then print("VideoOutputSettings() Called") end
    PrefResolution.String = string.match(data,'"preferredResolution":"(.-)",')
    local bool = string.match(data,'"connected":(.-),')
    if bool == "true" then
      VidConnected.Boolean = true
    else
      VidConnected.Boolean = false
    end
  end
  
  function VideoOutputStatus(tbl,code,data,err,headers)
    if DebugFunction then print("VideoOutputStatus() Called") end
    if DebugRx then print("Rx: "..data) end
    if code==200.0 and data ~= nil then
      VideoOutputSettings(data)
    elseif code==0.0 then
      Disconnected(err)
    elseif code==401.0 then
      PollTimer:Stop()
      ReportStatus("FAULT", "Invalid credentials")
    else
      print("Video Output err:",code,err)
    end
  end
  
  function VideoInputSettings(data)
    if DebugFunction then print("VideoInputSettings() Called") end
    VidSource.String = string.match(data,'"sourceName":"(.-)"')
    local bool = string.match(data,'"hasSignal":(.-),')
    if bool == "true" then
      VidIn.Boolean = true
    else
      VidIn.Boolean = false
    end
  end
  
  function VideoInputStatus(tbl,code,data,err,headers)
    if DebugFunction then print("VideoInputStatus() Called") end
    if DebugRx then print("Rx: "..data) end
    if code==200.0 and data ~= nil then
      VideoInputSettings(data)
    elseif code==0.0 then
      Disconnected(err)
    elseif code==401.0 then
      PollTimer:Stop()
      ReportStatus("FAULT", "Invalid credentials")
    else
      print("Video Input err:",code,err)
      VidSource.String = data:match('"message":"(.+)."')
    end
  end
  
  function MultipleButtons(table)
    for i=1,Buttons do
      if i > #table then
        BtnStat[i].String = "No Button Paired"
        BtnSerial[i].String = "FAULT"
        BtnMAC[i].String = "FAULT"
        BtnFirmware[i].String = "FAULT"
        BtnConnected[i].Boolean = false
      else
        BtnConnected[i].Boolean = table[i].connected
        BtnSerial[i].String = table[i].serialNumber
        BtnMAC[i].String = table[i].macAddress
        BtnFirmware[i].String = table[i].firmwareVersion
        BtnStat[i].String = table[i].status
      end
    end
  end
  
  function ButtonSettings(data)
    if DebugFunction then print("ButtonSettings() Called") end
    local table = data
    if Buttons > 1 then
      MultipleButtons(table)
    else
      if #table == 0 then
        BtnStat.String = "No Button Paired"
        BtnSerial.String = "FAULT"
        BtnMAC.String = "FAULT"
        BtnFirmware.String = "FAULT"
        BtnConnected.Boolean = false
      else
        BtnConnected.Boolean = table[1].connected
        BtnSerial.String = table[1].serialNumber
        BtnMAC.String = table[1].macAddress
        BtnFirmware.String = table[1].firmwareVersion
        BtnStat.String = table[1].status
      end
    end
  end
  
  function ButtonStatus(tbl,code,data,err,headers)
    if DebugFunction then print("ButtonStatus() Called") end
    if DebugRx then print("Rx: "..data) end
    if code==200.0 and data ~= nil then
      if data:sub(1,5):lower() == "data:" then
        data = data:sub(6)
      end
      ButtonSettings(json.decode(data))
    elseif code==0.0 then
      Disconnected(err)
    elseif code==401.0 then
      PollTimer:Stop()
      ReportStatus("FAULT", "Invalid credentials")
    else
      print("Button Status err:",code,err)
    end
  end
  
  -- Initialization Function
  function Initialization()
    if DebugFunction then print("Initialization() Called") end
    PollTimer.EventHandler = PollDevice
    ReconnectTimer.EventHandler = GetDeviceInfo
    IP.EventHandler = CheckIP
    User.EventHandler = CheckCredentials
    Pass.EventHandler = CheckCredentials
    Reboot.EventHandler = RebootUnit
    CheckCredentials()
    SetupDebugPrint()
  end
  
  Initialization()
end