-- Visual Productions DaliCore plugin
-- by Bootsy van der Zande, Visual Productions B.V.
PluginInfo = {
    Name = "Visual Productions~DaliCore",
    Version = "1.01",
    Id = "9de0dc8a-6fd9-4fb3-99fc-4e573e953593",
    Description = "A plugin to control the DaliCore using the TCP API.",
    Author = "Visual Productions",
    Manufacturer = "Visual Productions",
    Model = "dalicore",
}
-------------------------------------
--Change plugin block color & name
-------------------------------------
function GetColor(props)
    return { 138, 0, 133 }
end
function GetPrettyName(props)
    return string.format("Visual Productions DaliCore \rv%s", PluginInfo.Version)
end
-------------------------------------
-- Properties plugin mode
-------------------------------------
function GetProperties()
    local props = {}
    table.insert(props,
            {
                Name = "Control mode",
                Type = "enum",
                Choices = { "Simple", "Advanced" },
                Value = "Simple",
            }
    )
    return props
end
-------------------------------------
-- Define pages
-------------------------------------
function getPageNames(props)
    local pagenames
    local controlMode = props["Control mode"].Value
    if controlMode == "Simple" then
        pagenames = {
            "Scenes",
            "Network",
        }
    elseif controlMode == "Advanced" then
        pagenames = {
            "Scenes",
            "Actionlist",
            "DMX control",
            "Timer",
            "Variable",
            "Network",
        }
    end
    return pagenames
end
function GetPages(props)
    local pagenames = getPageNames(props)
    local pages = {}
    for i in ipairs(pagenames) do
        table.insert(pages, { name = pagenames[i] })
    end
    return pages
end
-------------------------------------
-- Define controls
-------------------------------------
function GetControls(props)
    local controlMode = props["Control mode"].Value
    local ctls = {
        --Scenes page
 
        { Name = "goScenes",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 16,
          PinStyle = "Both",
          UserPin = true,
        },
        --Network page
        { Name = "prefix",
          ControlType = "Text",
          ButtonType = "Custom",
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "ipAddress",
          ControlType = "Text",
          ButtonType = "Custom",
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "port",
          ControlType = "Text",
          ButtonType = "Custom",
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "blink",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "status",
          ControlType = "Indicator",
          IndicatorType = "Status",
          Count = 1,
          PinStyle = "Output",
          UserPin = true,
        },
    }
    local ctlsAdvanced = {
        --Actionlist page
        { Name = "actionlistEnable",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 8,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "actionlistDisable",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 8,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "actionlistAction",
          ControlType = "Text",
          ButtonType = "Custom",
          Count = 8,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "actionlistActionTrigger",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 8,
          PinStyle = "Both",
          UserPin = true,
        },
        --Variable page
        { Name = "variableSet",
          ControlType = "Text",
          ButtonType = "Custom",
          Count = 10,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "variableSetTrigger",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 10,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "variableRefresh",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 10,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "variableRefreshAll",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        --DMX control page
        { Name = "dmxChannel",
          ControlType = "Text",
          ButtonType = "Custom",
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "dmxValue",
          ControlType = "Knob",
          ControlUnit = "Integer",
          Min = 0,
          Max = 255,
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "dmxTrigger",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 1,
          PinStyle = "Both",
          UserPin = true,
        },
        --Timer page
        { Name = "timerStart",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 4,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "timerStop",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 4,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "timerPause",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 4,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "timerRestart",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 4,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "timerSet",
          ControlType = "Text",
          ButtonType = "Custom",
          Count = 4,
          PinStyle = "Both",
          UserPin = true,
        },
        { Name = "timerSetTrigger",
          ControlType = "Button",
          ButtonType = "Trigger",
          Count = 4,
          PinStyle = "Both",
          UserPin = true,
        },
    }
    if controlMode == "Advanced" then
        for _, v in ipairs(ctlsAdvanced) do
            table.insert(ctls, v)
        end
    end
    return ctls
end
-------------------------------------
-- Define layout
-------------------------------------
function GetControlLayout(props)
    local layout, graphics = {}, {}
    local pagenames = getPageNames(props)
    local currentPage = pagenames[props["page_index"].Value]
    local controlMode = props["Control mode"].Value
    local font = "Lato"
    local fontstyle = "Bold"
    local function Led(prettyname, legend, x, y, size_x, size_y)
        size_x = size_x or 30
        size_y = size_y or 30
        return
        {
            PrettyName = prettyname,
            Legend = legend,
            Size = { size_x, size_y },
            Position = { x, y },
            Style = "Led",
            Color = { 0, 255, 0 },
            OffColor = { 102, 102, 102 },
            UnlinkOffColor = true,
        }
    end
    local function Button(prettyname, legend, x, y, size_x, size_y)
        size_x = size_x or 60
        size_y = size_y or 60
        return
        {
            PrettyName = prettyname,
            Legend = legend,
            Size = { size_x, size_y },
            Position = { x, y },
            Style = "Button",
            ButtonStyle = "Trigger",
            Font = font,
            FontSize = 12,
            FontStyle = fontstyle,
            Margin = 0,
            Radius = 8,
            Padding = 2,
            StrokeWidth = 2,
            StrokeColor = { 0, 0, 0 },
            OffColor = { 102, 102, 102 },
            UnlinkOffColor = true
        }
    end
    local function Fader(prettyname, legend, x, y)
        return
        {
            PrettyName = prettyname,
            Legend = legend,
            Style = "Fader",
            FontSize = 12,
            Font = font,
            FontStyle = fontstyle,
            Color = { 102, 102, 102 },
            Margin = 0,
            Radius = 8,
            Padding = 2,
            StrokeColor = { 0, 0, 0 },
            StrokeWidth = 2,
            Position = { x, y },
            Size = { 60, 120 },
            UnlinkOffColor = true,
            OffColor = { 0, 0, 0 }
        }
    end
    local function Box (prettyname, legend, pos_x, pos_y, size_x, size_y, fontsize, textalign)
        fontsize = fontsize or 14
        textalign = textalign or "Center"
        return
        {
            PrettyName = prettyname,
            Legend = legend,
            FontSize = fontsize,
            Font = font,
            FontStyle = fontstyle,
            Color = { 51, 51, 51 },
            Margin = 0,
            Radius = 8,
            Padding = 2,
            StrokeColor = { 0, 0, 0 },
            StrokeWidth = 2,
            Position = { pos_x, pos_y },
            Size = { size_x, size_y },
            UnlinkOffColor = true,
            OffColor = { 102, 102, 102 },
            HTextAlign = textalign
        }
    end
    local function Background (size_x, size_y)
        return {
            Type = "GroupBox",
            Fill = { 26, 26, 26 },
            StrokeColor = { 138, 0, 133 },
            StrokeWidth = 2,
            Color = { 255, 0, 0 },
            CornerRadius = 8,
            Position = { 0, 0 },
            Size = { size_x, size_y }
        }
    end
    local function Background2(pos_x, pos_y, size_x, size_y)
        return
        { Type = "GroupBox",
          Fill = { 51, 51, 51 },
          CornerRadius = 8,
          Position = { pos_x, pos_y },
          Size = { size_x, size_y }
        }
    end
    local function Text(text, fontsize, pos_x, pos_y, size_x, size_y, textalign)
        textalign = textalign or "Center"
        return
        { Text = text,
          Type = "Label",
          FontSize = fontsize,
          Font = font,
          FontStyle = fontstyle,
          Color = { 255, 255, 255 },
          HTextAlign = textalign,
          VTextAlign = "Center",
          Radius = 8,
          Position = { pos_x, pos_y },
          Size = { size_x, size_y },
        }
    end
    if currentPage == "Scenes" then
        table.insert(graphics, Background(490, 500))
        table.insert(graphics, Background2(50, 90, 400, 350))
        for i = 1, 4 do
            --layout["playbackStatus "..i] = Led("Playback~"..i.."~Status", "Status+", 125+(60*(i-1)), 100)
            layout["goScenes " .. i] = Button("scene" .. i .. "~Go", "Scene"..tostring(i), 70 + (100 * (i - 1)), 100)

            
        end
        for i = 5, 8 do
            --layout["playbackStatus "..i] = Led("Playback~"..i.."~Status", "Status+", 125+(60*(i-1)), 100)
            layout["goScenes " .. i] = Button("scene" .. i .. "~Go", "Scene"..tostring(i), 70 + (100 * (i - 5)), 180)

 
        end
        for i = 9, 12 do
            --layout["playbackStatus "..i] = Led("Playback~"..i.."~Status", "Status+", 125+(60*(i-1)), 100)
            layout["goScenes " .. i] = Button("scene" .. i .. "~Go", "Scene"..tostring(i), 70 + (100 * (i - 9)), 260)


        end
        for i = 13, 16 do
            --layout["playbackStatus "..i] = Led("Playback~"..i.."~Status", "Status+", 125+(60*(i-1)), 100)
            layout["goScenes " .. i] = Button("scene" .. i .. "~Go", "Scene"..tostring(i), 70 + (100 * (i - 13)), 340)

   
        end
    end
    if controlMode == "Advanced" then
        if currentPage == "Actionlist" then
            table.insert(graphics, Background(490, 650))
            table.insert(graphics, Background2(115, 90, 260, 270))
            for i = 1, 4 do
                layout["actionlistEnable " .. i] = Button("Showcontrol~Actionlist~Enable " .. i, "Enable", 125 + (60 * (i - 1)), 100)
                layout["actionlistDisable " .. i] = Button("Showcontrol~Actionlist~Disable " .. i, "Disable", 125 + (60 * (i - 1)), 160)
                layout["actionlistAction " .. i] = Box("Showcontrol~Actionlist~ " .. i .. " Action", "Action", 125 + (60 * (i - 1)), 250, 60, 30)
                layout["actionlistActionTrigger " .. i] = Box("Showcontrol~Actionlist~ " .. i .. " Action trigger", "Action", 125 + (60 * (i - 1)), 280, 60, 30)
                table.insert(graphics, Text(tostring(i), 24, 125 + (60 * (i - 1)), 320, 60, 30))
            end
            table.insert(graphics, Background2(115, 370, 260, 270))
            for i = 5, 8 do
                layout["actionlistEnable " .. i] = Button("Showcontrol~Actionlist~Enable " .. i, "Enable", 125 + (60 * (i - 5)), 380)
                layout["actionlistDisable " .. i] = Button("Showcontrol~Actionlist~Disable " .. i, "Disable", 125 + (60 * (i - 5)), 440)
                layout["actionlistAction " .. i] = Box("Showcontrol~Actionlist~ " .. i .. " Action", "Action", 125 + (60 * (i - 5)), 530, 60, 30)
                layout["actionlistActionTrigger " .. i] = Box("Showcontrol~Actionlist~ " .. i .. " Action trigger", "Action", 125 + (60 * (i - 5)), 560, 60, 30)
                table.insert(graphics, Text(tostring(i), 24, 125 + (60 * (i - 5)), 600, 60, 30))
            end
        end
        if currentPage == "Variable" then
            table.insert(graphics, Background(490, 620))
            table.insert(graphics, Background2(85, 90, 320, 210))
            for i = 1, 5 do
                layout["variableSet " .. i] = Box("Showcontrol~Variable~Set " .. i, "Set", 95 + (60 * (i - 1)), 100, 60, 30)
                layout["variableSetTrigger " .. i] = Button("Showcontrol~Variable~Set trigger " .. i, "Set", 95 + (60 * (i - 1)), 130, 60, 30)
                layout["variableRefresh " .. i] = Button("Showcontrol~Variable~Refresh " .. i, "Refresh", 95 + (60 * (i - 1)), 190)
                table.insert(graphics, Text(tostring(i), 24, 95 + (60 * (i - 1)), 260, 60, 30))
            end
            table.insert(graphics, Background2(85, 310, 320, 210))
            for i = 6, 10 do
                layout["variableSet " .. i] = Box("Showcontrol~Variable~Set " .. i, "Set", 95 + (60 * (i - 6)), 320, 60, 30)
                layout["variableSetTrigger " .. i] = Button("Showcontrol~Variable~Set trigger " .. i, "Set", 95 + (60 * (i - 6)), 350, 60, 30)
                layout["variableRefresh " .. i] = Button("Showcontrol~Variable~Refresh " .. i, "Refresh", 95 + (60 * (i - 6)), 410)
                table.insert(graphics, Text(tostring(i), 24, 95 + (60 * (i - 6)), 480, 60, 30))
            end
            table.insert(graphics, Background2(205, 530, 80, 80))
            layout["variableRefreshAll"] = Button("Showcontrol~Variable~Refresh All", "Refresh\nAll", 215, 540)
        end
        if currentPage == "DMX control" then
            table.insert(graphics, Background(490, 360))
            table.insert(graphics, Background2(205, 90, 80, 260))
            table.insert(graphics, Text("Channel", 14, 215, 100, 60, 30))
            layout["dmxChannel"] = Box("Showcontrol~Direct DMX control~Set DMX Channel", "Channel", 215, 140, 60, 30)
            layout["dmxValue"] = Fader("Showcontrol~Direct DMX control~Set DMX Value", "Value", 215, 180)
            layout["dmxTrigger"] = Button("Showcontrol~Direct DMX control~Execute", "Execute", 215, 310, 60, 30)
        end
        if currentPage == "Timer" then
            table.insert(graphics, Background(490, 460))
            table.insert(graphics, Background2(115, 90, 260, 360))
            for i = 1, 4 do
                layout["timerStart " .. i] = Button("Showcontrol~Timer~Start " .. i, "Start", 125 + (60 * (i - 1)), 100)
                layout["timerStop " .. i] = Button("Showcontrol~Timer~Stop " .. i, "Stop", 125 + (60 * (i - 1)), 160)
                layout["timerPause " .. i] = Button("Showcontrol~Timer~Pause " .. i, "Pause", 125 + (60 * (i - 1)), 220)
                layout["timerRestart " .. i] = Button("Showcontrol~Timer~Restart " .. i, "Restart", 125 + (60 * (i - 1)), 280)
                layout["timerSet " .. i] = Box("Showcontrol~Timer~Set " .. i, "Set " .. i, 125 + (60 * (i - 1)), 340, 60, 30)
                layout["timerSetTrigger " .. i] = Button("Showcontrol~Timer~Set trigger" .. i, "Set", 125 + (60 * (i - 1)), 370, 60, 30)
                table.insert(graphics, Text(tostring(i), 24, 125 + (60 * (i - 1)), 410, 60, 30))
            end
        end
    end
    if currentPage == "Network" then
        table.insert(graphics, Background(490, 420))
        layout.prefix = Box("Network~API Prefix", "Prefix", 145, 100, 325, 60, 40, "Left")
        layout.ipAddress = Box("Network~IP Address", "IP", 145, 160, 325, 60, 40, "Left")
        layout.port = Box("Network~Communications Port", "Port", 145, 220, 325, 60, 40, "Left")
        layout.status = Box("Network~Status", "Status", 145, 280, 325, 60, 40, "Left")
        layout.status.Color = { 102, 102, 102 }
        layout.status.IsReadOnly = true
        layout.blink = Button("Network~Blink", "Blink", 145, 340)
        table.insert(graphics, Background2(10, 90, 470, 320))
        table.insert(graphics, Text("Prefix", 24, 20, 100, 120, 60, "Left"))
        table.insert(graphics, Text("IP Address", 24, 20, 160, 120, 60, "Left"))
        table.insert(graphics, Text("TCP Port", 24, 20, 220, 120, 60, "Left"))
        table.insert(graphics, Text("Status", 24, 20, 280, 120, 60, "Left"))
        table.insert(graphics, Text("Identify", 24, 20, 340, 120, 60, "Left"))
    end
    --Header
    table.insert(graphics, Background2(10, 10, 470, 70))
    table.insert(graphics, {  --Logo
        Type = "Image",
        Image = "",
        Position = { 20, 20 },
        Size = { 250, 46 }
    })
    return layout, graphics
end
-------------------------------------
-- Runtime code
-------------------------------------
if Controls then
    -- Start of runtime Lua code
    local defaultPrefix = "core"
    local defaultIpAddress = "192.168.1.10"
    local defaultPort = 7000
    local networkInputBuffer = 255
    local prefixMaxlength = 9
    local lastDmxChannel = 512
    local maxActions = 48
    local tokenize = function(input, sep)
        local t = {}
        for str in string.gmatch(input, "([^" .. sep .. "]+)") do
            table.insert(t, str)
        end
        return t
    end
    local getPrefix = function()
        local prefix = Controls.prefix.String
        print("Prefix is set to: ", prefix)
        if string.len(prefix) > prefixMaxlength then
            prefix = string.sub(prefix, 1, 9)
            print("Prefix too long, prefix is set to: ", prefix)
            Controls.prefix.String = prefix
        end
        if prefix == "" then
            print("Prefix can not be empty, setting to default: ", defaultPrefix)
            prefix = defaultPrefix
            Controls.prefix.String = prefix
        end
        return prefix
    end
    local getIpAddress = function()
        local ipAddress = Controls.ipAddress.String
        print("IP address is set to: ", ipAddress)
        if ipAddress == "" then
            print("IP address can not be empty, setting to default: ", defaultIpAddress)
            ipAddress = defaultIpAddress
            Controls.ipAddress.String = defaultIpAddress
        end
        local ipTable = tokenize(ipAddress, ".")
        if #ipTable ~= 4 then
            ipAddress = "INVALID"
        else
            for _, v in ipairs(ipTable) do
                if tonumber(v) == nil or tonumber(v) < 0 or tonumber(v) > 255 then
                    ipAddress = "INVALID"
                    break
                end
            end
        end
        if ipAddress == "INVALID" then
            print("Invalid IP address, setting to default: ", defaultIpAddress)
            ipAddress = defaultIpAddress
            Controls.ipAddress.String = defaultIpAddress
        end
        return ipAddress
    end
    local getPort = function()
        local port = Controls.port.String
        print("Port is set to: ", port)
        if string.match(port, "%D") then
            print("Invalid port, setting to default: ", defaultPort)
            port = defaultPort
            Controls.port.String = defaultPort
        end
        port = tonumber(port)
        if port == nil then
            print("Port can not be empty, setting to default: ", defaultPort)
            port = defaultPort
            Controls.port.String = defaultPort
        end
        return port
    end
    local parseMessage = function(message)
        --print(message)
        message = tokenize(message, '=')
        local apiValue = tokenize(message[1], '-')
        local controlValue = message[2]
    end
    local roundDown = function(value)
        if value ~= nil then
            return math.floor(value)
        else
            return nil
        end
    end
    local toFloat = function(value)
        if value ~= nil then
            return math.floor(value + 0.5) / 100
        else
            return nil
        end
    end
    local controlMode = Properties["Control mode"].Value
    local prefix = getPrefix()
    local ipAddress = getIpAddress()
    local port = getPort()
    local sock = TcpSocket.New()
    sock.ReadTimeout = 0
    sock.WriteTimeout = 0
    sock.ReconnectTimeout = 5
    local connect = function()
        Controls.status.Value = 5
        print("Connecting to:\nAddress:", ipAddress, "\nPort:", port)
        sock:Connect(ipAddress, port)
    end
    local sendBuffer = {}
    local sendTimer = Timer.New()
    sendTimer.EventHandler = function(self)
        if #sendBuffer == 0 then
            self:Stop()
        else
            sock:Write(table.remove(sendBuffer, 1))
        end
    end
    local send = function(message)
        if Controls.status.Value == 0 then
            table.insert(sendBuffer, message)
            sendTimer:Start(0.1)
        else
            print("Error: not connected, ignoring message: " .. message)
        end
    end
    sock.EventHandler = function(sock, evt, err)
        if evt == TcpSocket.Events.Connected then
            Controls.status.Value = 0
            print("Socket has succesfully connected")
        elseif evt == TcpSocket.Events.Reconnect then
            Controls.status.Value = 5
            print("Socket is reconnecting...")
        elseif evt == TcpSocket.Events.Data then
            --print( "Socket has data: " .. sock.BufferLength .. " bytes" )
            local message = sock:Read(networkInputBuffer)
            parseMessage(message)
        elseif evt == TcpSocket.Events.Closed then
            Controls.status.Value = 2
            print("Socket is closed by remote ")
        elseif evt == TcpSocket.Events.Error then
            Controls.status.Value = 2
            print("Socket is closed due to error ", err)
        elseif evt == TcpSocket.Events.Timeout then
            Controls.status.Value = 2
            print("Socket is closed due to timeout")
        else
            Controls.status.Value = 2
            print("Unknown socket event: ", evt, "\nThis should probably not happen.\nIf you run into network issues,\nplease contact ",
                    PluginInfo.Author, "\nand include this debug log.")
        end
    end
    local smartBuffer = {}
    local smartBufferTimer = Timer.New()
    local smartBufferTimerRunning = false
    local smartBufferInsert = function(command, handle)
        for _, k in ipairs(smartBuffer) do
            if k.command == command then
                k.value = handle.Value
                handle = nil
                break
            end
        end
        if handle then
            table.insert(smartBuffer, { command = command, value = handle.Value })
        end
        if smartBufferTimerRunning == false then
            smartBufferTimerRunning = true
            smartBufferTimer:Start(0.1)
        end
    end
    smartBufferTimer.EventHandler = function()
        local bundle = table.remove(smartBuffer, 1)
        send(bundle.command .. bundle.value / 100)
        sendTimer:Start(0.1)
        if #smartBuffer == 0 then
            smartBufferTimer:Stop()
            smartBufferTimerRunning = false
        end
    end
    for i = 1, 16 do
        Controls.goScenes[i].EventHandler = function()
            send(prefix .. "-scene=" .. i )
        end
    end



    Controls.prefix.EventHandler = function()
        prefix = getPrefix()
    end
    Controls.ipAddress.EventHandler = function()
        ipAddress = getIpAddress()
        connect()
    end
    Controls.port.EventHandler = function()
        port = getPort()
        connect()
    end
    Controls.blink.EventHandler = function()
        send(prefix .. "-blink")
    end
    if controlMode == "Advanced" then
        local actionlistAction = {}
        local getActionlistAction = function(i)
            actionlistAction[i] = roundDown(tonumber(Controls.actionlistAction[i].String))
            Controls.actionlistAction[i].String = tostring(actionlistAction[i])
            if actionlistAction[i] == nil or actionlistAction[i] < 1 then
                Controls.actionlistAction[i].String = "1"
                actionlistAction[i] = "1"
            elseif actionlistAction[i] > maxActions then
                Controls.actionlistAction[i].String = tostring(maxActions)
                actionlistAction[i] = maxActions
            end
        end
        for i = 1, 8 do
            getActionlistAction(i)
            Controls.actionlistAction[i].EventHandler = function()
                getActionlistAction(i)
            end
            Controls.actionlistActionTrigger[i].EventHandler = function()
                send(prefix .. "-al-" .. i .. "-" .. actionlistAction[i] .. "-execute=true")
            end
            Controls.actionlistEnable[i].EventHandler = function()
                send(prefix .. "-al-" .. i .. "-enable=true")
            end
            Controls.actionlistDisable[i].EventHandler = function()
                send(prefix .. "-al-" .. i .. "-enable=false")
            end
        end
        local variableSet = {}
        local getVariableSet = function(i)
            variableSet[i] = roundDown(tonumber(Controls.variableSet[i].String))
            Controls.variableSet[i].String = tostring(variableSet[i])
            if variableSet[i] == nil or variableSet[i] < 0 then
                Controls.variableSet[i].String = "0"
                variableSet[i] = "0"
            elseif variableSet[i] > 255 then
                Controls.variableSet[i].String = "255"
                variableSet[i] = "255"
            end
        end
        for i = 1, 10 do
            getVariableSet(i)
            Controls.variableSet[i].EventHandler = function()
                getVariableSet(i)
            end
            Controls.variableSetTrigger[i].EventHandler = function()
                send(prefix .. "-va-" .. i .. "-set=" .. variableSet[i])
            end
            Controls.variableRefresh[i].EventHandler = function()
                send(prefix .. "-va-" .. i .. "-refresh")
            end
        end
        Controls.variableRefreshAll.EventHandler = function()
            send(prefix .. "-va-refresh")
        end
        local dmxChannel
        local dmxValue = Controls.dmxValue.Value
        local getDmxChannel = function()
            dmxChannel = roundDown(tonumber(Controls.dmxChannel.String))
            Controls.dmxChannel.String = tostring(dmxChannel)
            if dmxChannel == nil or dmxChannel < 1 then
                Controls.dmxChannel.String = "1"
                dmxChannel = 1
            elseif dmxChannel > lastDmxChannel then
                Controls.dmxChannel.String = tostring(lastDmxChannel)
                dmxChannel = lastDmxChannel
            end
        end
        getDmxChannel()
        Controls.dmxChannel.EventHandler = function()
            getDmxChannel()
        end
        Controls.dmxValue.EventHandler = function()
            dmxValue = Controls.dmxValue.Value
        end
        Controls.dmxTrigger.EventHandler = function()
            send(prefix .. "-dmx-" .. dmxChannel .. "=" .. dmxValue)
        end
        local timerSet = {}
        local getTimerSet = function(i)
            timerSet[i] = Controls.timerSet[i].String
            if timerSet[i] == "" then
                Controls.timerSet[i].String = "0:00:00"
                timerSet[i] = "0:00:00"
            end
        end
        for i = 1, 4 do
            getTimerSet(i)
            Controls.timerStart[i].EventHandler = function()
                send(prefix .. "-tm-" .. i .. "-start")
            end
            Controls.timerStop[i].EventHandler = function()
                send(prefix .. "-tm-" .. i .. "-stop")
            end
            Controls.timerPause[i].EventHandler = function()
                send(prefix .. "-tm-" .. i .. "-pause")
            end
            Controls.timerRestart[i].EventHandler = function()
                send(prefix .. "-tm-" .. i .. "-restart")
            end
            Controls.timerSet[i].EventHandler = function()
                getTimerSet(i)
            end
            Controls.timerSetTrigger[i].EventHandler = function()
                send(prefix .. "-tm-" .. i .. "-set=" .. timerSet[i])
            end
        end
    end
    connect()
end -- end of runtime Lua code