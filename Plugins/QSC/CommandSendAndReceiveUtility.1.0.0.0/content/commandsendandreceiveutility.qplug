--[[ BEGIN DIGITAL SIGNATURE
QMn/kdxFq3Jkhtd0jlEiMAM7Vkicw/YVLC6uNaz9uo0JB8oblH9pYMqJec+dZXlbd52a8VHGqoN+vn6CqLK4E3WgTVAc1QRIZGF+OwuVNgpadfIHwohY/TqAjY9OrRRy21l/EKieVsY3StYS+tn6Qcz/W0kjrvijIFvYCKvKXd4fykvT2pMTr7PsSUoTIoJX2PI6kwypQZU9QwPwCruQrJQbYH6Ip6sveK9AYCu+a18CFJQRDIXCMAYgfpZwKCuSMWokfC7gYghwnp0Fsz2n0m3QfqSodfCk9sng52eSK9Londmh+y2f5BQNxuzYn4PI5puQGUsonvwUB6WC6BemyA==
END DIGITAL SIGNATURE ]]
-- Base Plugin
-- by QSC
-- Month 20YY

PluginInfo = {
    Name = "Utility~Command Send And Receive Utility",
    Version = "1.0",
    BuildVersion = "1.0.0.0",
    Id = "0ba3f34a-dde9-4c64-8039-d2045f6683b2",
    Author = "QSC",
    Description = "A plugin to send API commands and parse data over a socket."
}
-- GUI Colors
Black = {0, 0, 0}
Clear = {0, 0, 0, 0}
White = {255, 255, 255}
Red = {255, 0, 0}
LEDOff = {124, 0, 0}
Gray = {124, 124, 124}
GBGray = {230, 230, 230}
DarkGray = {51, 51, 51}
StatusGray = {194, 194, 194}
StrokeGray = {105, 105, 105}
Meter = {110, 198, 241}

-- LOGO
local Logo = ""

function GetColor(props)
  return { 102, 102, 102 }
end

function GetPrettyName(props)
  return "Command Send And Receive Utility\rv" .. PluginInfo.Version
end

pagenames = {"Connection Setup", "Send", "Receive", "Buffer"}
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(pagenames) do
    table.insert(pages,{name = pagenames[ix]})
  end
  return pages
end

function GetProperties()
  local props = {}
  table.insert(
    props,
    {
      Name = "Control Type",
      Type = "enum",
      Choices = {"TCP", "HTTP", "UDP", "SSH", "Serial"},
      Value = "TCP"
    }
  )
  table.insert(
    props,
    {
      Name = "Authentication Required",
      Type = "enum",
      Choices = {"No", "Yes"},
      Value = "No"
    }
  )
  table.insert(
    props,
    {
      Name = "Send String Count",
      Type = "integer",
      Min = 1,
      Max = 64,
      Value = 8
    }
  )
  table.insert(
    props,
    {
      Name = "Receive String Count",
      Type = "integer",
      Min = 1,
      Max = 64,
      Value = 8
    }
  )
  table.insert(
    props,
    {
      Name = "Buffer Caching",
      Type = "enum",
      Choices = {"Time", "Count"},
      Value = "Time"
    }
  )
  table.insert(
    props,
    {
      Name = "Message Cache Amount",
      Type = "integer",
      Min = 1,
      Max = 100,
      Value = 20 -- changed to 20 to fill window
    }
  )
  table.insert(
    props,
    {
      Name = "Debug Print",
      Type = "enum",
      Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
      Value = "None"
    }
  )
  return props
end

function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then
    props["Debug Print"].IsHidden = true
  end
  if props["Control Type"].Value ~= "HTTP" then
    props["Authentication Required"].IsHidden = true
  end
  if props["Buffer Caching"].Value ~= "Count" then
    props["Message Cache Amount"].IsHidden = true
  end
  return props
end

function GetControls(props)
  local controls = {}
  local controlsType = props["Control Type"].Value
  local bufferCachingControl = props["Buffer Caching"].Value
  table.insert(
    controls,
    {
      Name = "Status",
      ControlType = "Indicator",
      IndicatorType = Reflect and "StatusGP" or "Status",
      PinStyle = "Output",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "IPAddress",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "URL",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "Port",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 65535,
      DefaultValue = controlsType == "SSH" and 22 or 80,
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "HeartBeatTime",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 3,
      Max = 300,
      DefaultValue = 3,
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "Username",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "Password",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "EOL",
      ControlType = "Text",
      DefaultValue = "None",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "EOLCustom",
      ControlType = "Text",
      DefaultValue = "\\x0D",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "Auth",
      ControlType = "Text",
      DefaultValue = "any",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "Headers",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "BaudRate",
      ControlType = "Text",
      DefaultValue = "9600",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "DataBits",
      ControlType = "Text",
      DefaultValue = "8",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "Parity",
      ControlType = "Text",
      DefaultValue = "None",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "StopBits",
      ControlType = "Text",
      DefaultValue = "1",
      PinStyle = "Both",
      UserPin = true,
      Count = 1
    }
  )
  for i = 1, props["Send String Count"].Value do
    table.insert(
      controls,
      {
        Name = "SendData" .. i,
        ControlType = "Text",
        PinStyle = "Both",
        UserPin = true,
        Count = 1
      }
    )
    table.insert(
      controls,
      {
        Name = "Data" .. i,
        ControlType = "Text",
        PinStyle = "Both",
        UserPin = true,
        Count = 1
      }
    )
    table.insert(
      controls,
      {
        Name = "TriggerButton" .. i,
        ControlType = "Button",
        ButtonType = "Trigger",
        PinStyle = "Both",
        UserPin = true,
        Count = 1
      }
    )
    table.insert(
      controls,
      {
        Name = "Method" .. i,
        ControlType = "Text",
        DefaultValue = "GET",
        PinStyle = "Both",
        UserPin = true,
        Count = 1
      }
    )
  end
  for i = 1, props["Receive String Count"].Value do
    table.insert(
      controls,
      {
        Name = "Receive" .. i,
        ControlType = "Text",
        PinStyle = "Both",
        UserPin = true,
        Count = 1
      }
    )
    table.insert(
      controls,
      {
        Name = "IsDataReceived" .. i,
        ControlType = "Indicator",
        IndicatorType = "Led",
        IsReadOnly = true,
        PinStyle = "Output",
        UserPin = true,
        Count = 1
      }
    )
    table.insert(
      controls,
      {
        Name = "EoL" .. i,
        ControlType = "Text",
        PinStyle = "Both",
        UserPin = true,
        Count = 1
      }
    )
  end
  if bufferCachingControl == "Time" then
    table.insert(
      controls,
      {
        Name = "BufferRefresh",
        ControlType = "Knob",
        ControlUnit = "Integer",
        DefaultValue = 6,
        Min = 1,
        Max = 1800, -- limmiting to 30 minutes
        PinStyle = "Both",
        UserPin = true,
        Count = 1
      }
    )
  end
  table.insert(
    controls,
    {
      Name = "BufferReceivedData",
      ControlType = "Text",
      PinStyle = "Output",
      UserPin = true,
      Count = 1
    }
  )
  table.insert(
    controls,
    {
      Name = "LastReceivedMessage",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "Output",
      UserPin = true,
      Count = 1
    }
  )
  return controls
end

function GetControlLayout(props)
  local layout   = {}
  local graphics = {}
  local currentPage = pagenames[props["page_index"].Value]
  
  -- Width and Height
  local groupBoxWidth = 400
  local groupBoxHeight = 370
  local logoGroupBoxHeight = 80
  local textBlockWidth = 180
  local textBlockHeight = 20
  local headerWidth = 370
  local headerHeight = 12
  local labelWidth = 80
  local height = 16
  
  local controlType = props["Control Type"].Value
  local sendStringCount =  props["Send String Count"].Value
  local receiveStringCount = props["Receive String Count"].Value
  local bufferCachingLayout = props["Buffer Caching"].Value
  
  -- Global GroupBox
  table.insert(
    graphics,
    {
      Type = "GroupBox",
      Position = {0, 0},
      Size = (controlType == "Serial" and currentPage == "Connection Setup") and {groupBoxWidth, groupBoxWidth + 26}
          or (controlType == "HTTP" and currentPage == "Connection Setup") and {groupBoxWidth, groupBoxWidth + 25}
          or (controlType ~= "HTTP" and currentPage == "Send") and {groupBoxWidth, (math.ceil(sendStringCount) - 1) * 21 + 210}
          or (controlType == "HTTP" and currentPage == "Send") and {groupBoxWidth + 100, (math.ceil(sendStringCount) - 1) * 21 + 226}
          or currentPage == "Receive" and {groupBoxWidth, (math.ceil(receiveStringCount) - 1) * 21 + 233}
          or currentPage == "Buffer" and {groupBoxWidth, groupBoxHeight + 70} or {groupBoxWidth, groupBoxHeight + 15},
      Fill = White,
      CornerRadius = 0,
      StrokeWidth = 0
    }
  )
  
  -- Logo GroupBox
  table.insert(
    graphics,
    {
      Type = "GroupBox",
      Position = {0, 0},
      Size = (controlType == "HTTP" and currentPage == "Send") and {groupBoxWidth + 100, logoGroupBoxHeight} or {groupBoxWidth, logoGroupBoxHeight},
      Fill = GBGray,
      CornerRadius = 0,
      StrokeWidth = 0
    }
  )
  
  -- Logo
  table.insert(
    graphics,
    {
      Type = "Image",
      Image = Logo,
      Position = (controlType == "HTTP" and currentPage == "Send") and {70, 0} or {25, 0},
      Size = {350, 80}
    }
  )
  
  if currentPage == "Connection Setup" then
    -- Connection Setup
    y = 85
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Connection Setup",
        Position = {5, y},
        Size = {textBlockWidth, textBlockHeight},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 16,
        FontStyle = "Bold",
        HTextAlign = "Left"
      }
    )
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {5, y + 25},
        Size = (controlType ~= "Serial" and controlType ~= "HTTP") and {groupBoxWidth - 10, logoGroupBoxHeight + 50}
            or (controlType == "HTTP" and {groupBoxWidth - 10, logoGroupBoxHeight + 90})
            or (controlType == "Serial" and {groupBoxWidth - 10, logoGroupBoxHeight + 91}),
        Fill = GBGray,
        CornerRadius = 0,
        StrokeWidth = 0
      }
    )
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Setup",
        Position = {15, y + 31},
        Size = {headerWidth, headerHeight},
        Fill = DarkGray,
        Font = "Roboto",
        FontSize = 14,
        FontStyle = "Bold",
        HTextAlign = "Center"
      }
    )
    y = 146
    if controlType ~= "Serial" and controlType ~= "HTTP"then
      if controlType == "TCP" or controlType == "UDP" or controlType == "SSH" then
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = "IPAddress:",
            Position = {15, y},
            Size = {labelWidth, height},
            Fill = Clear,
            CornerRadius = 0,
            Margin = 0,
            Padding = 0,
            StrokeWidth = 0,
            Font = "Roboto",
            FontSize = 11,
            FontStyle = "Bold",
            HTextAlign = "Right"
          }
        )
        layout["IPAddress"] = {
          PrettyName = "Connection Setup~IPAddress",
          Style = "Text",
          TextBoxStyle = "Normal",
          Position = {107, y},
          Size = {textBlockWidth, height},
          Color = White,
          OffColor = Gray,
          CornerRadius = 0,
          Margin = 0,
          Padding = 1,
          StrokeWidth = 1,
          FontSize = 9,
          HTextAlign = "Center"
        }
        layout["Port"] = {
          PrettyName = "Connection Setup~Port",
          Style = "Text",
          TextBoxStyle = "MeterBackground",
          Position = {300, y},
          Size = {labelWidth - 20, height},
          Fill = Meter,
          CornerRadius = 0,
          Margin = 0,
          Padding = 1,
          StrokeWidth = 1,
          Font = "Roboto",
          FontSize = 9,
          HTextAlign = "Center"
        }
        if controlType == "UDP" then
          table.insert(
            graphics,
            {
              Type = "Label",
              Text = "Heart Beat Time:",
              Position = {15, 177},
              Size = {labelWidth, height * 2},
              Fill = Clear,
              CornerRadius = 0,
              Margin = 0,
              Padding = 0,
              StrokeWidth = 0,
              Font = "Roboto",
              FontSize = 11,
              FontStyle = "Bold",
              HTextAlign = "Right"
            }
          )
          layout["HeartBeatTime"] = {
            PrettyName = "Connection Setup~Heart Beat Time",
            Style = "Text",
            TextBoxStyle = "MeterBackground",
            Position = {107, 177},
            Size = {labelWidth - 20, height},
            Fill = Meter,
            CornerRadius = 0,
            Margin = 0,
            Padding = 1,
            StrokeWidth = 1,
            Font = "Roboto",
            FontSize = 9,
            HTextAlign = "Center"
          }
        end
        if controlType == "SSH" then
          y = y + 21
          table.insert(
            graphics,
            {
              Type = "Label",
              Text = "Username:",
              Position = {15, y},
              Size = {labelWidth, height},
              Fill = Clear,
              CornerRadius = 0,
              Margin = 0,
              Padding = 0,
              StrokeWidth = 0,
              Font = "Roboto",
              FontSize = 11,
              FontStyle = "Bold",
              HTextAlign = "Right"
            }
          )
          layout["Username"] = {
            PrettyName = "Connection Setup~Username",
            Style = "Text",
            TextBoxStyle = "Normal",
            Position = {107, y},
            Size = {textBlockWidth, height},
            Color = White,
            OffColor = Gray,
            CornerRadius = 0,
            Margin = 0,
            Padding = 1,
            StrokeWidth = 1,
            FontSize = 9,
            HTextAlign = "Center"
          }
          y = y + 21
          table.insert(
            graphics,
            {
              Type = "Label",
              Text = "Password:",
              Position = {15, y},
              Size = {labelWidth, height},
              Fill = Clear,
              CornerRadius = 0,
              Margin = 0,
              Padding = 0,
              StrokeWidth = 0,
              Font = "Roboto",
              FontSize = 11,
              FontStyle = "Bold",
              HTextAlign = "Right"
            }
          )
          layout["Password"] = {
            PrettyName = "Connection Setup~Password",
            Style = "Text",
            TextBoxStyle = "Password",
            Position = {107, y},
            Size = {textBlockWidth, height},
            Color = White,
            OffColor = Gray,
            CornerRadius = 0,
            Margin = 0,
            Padding = 1,
            StrokeWidth = 1,
            FontSize = 9,
            HTextAlign = "Center"
          }
        end
        if controlType == "TCP" or controlType == "SSH" then
          table.insert(
            graphics,
            {
              Type = "Label",
              Text = "EOL:",
              Position = controlType == "TCP" and {15, 188} or {15, 209},
              Size = {labelWidth, height},
              Fill = Clear,
              CornerRadius = 0,
              Margin = 0,
              Padding = 0,
              StrokeWidth = 0,
              Font = "Roboto",
              FontSize = 11,
              FontStyle = "Bold",
              HTextAlign = "Right"
            }
          )
          layout["EOL"] = {
            PrettyName = "Connection Setup~EOL",
            Style = "ComboBox",
            Position = controlType == "TCP" and {107, 188} or {107, 209},
            Size = {height * 4, height},
            Color = White,
            OffColor = Gray,
            CornerRadius = 0,
            Margin = 0,
            Padding = 1,
            StrokeWidth = 1,
            FontSize = 9,
            HTextAlign = "Center"
          }
          layout["EOLCustom"] = {
            PrettyName = "Connection Setup~EOLCustom",
            Style = "Text",
            TextBoxStyle = "Normal",
            Position = controlType == "TCP" and {181, 188} or {181, 209},
            Size = {179, height},
            Color = White,
            OffColor = Gray,
            CornerRadius = 0,
            Margin = 0,
            Padding = 1,
            StrokeWidth = 1,
            FontSize = 9,
            HTextAlign = "Center"
          }
        end
      end
    elseif controlType == "Serial" then
      for k, v in ipairs({"BaudRate", "DataBits", "Parity", "StopBits", "EOL", "Heart Beat Time"}) do
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = v .. ":",
            Position = v ~= "Heart Beat Time" and {85, y} or {65, y},
            Size = v ~= "Heart Beat Time" and {labelWidth, height} or {labelWidth + 20, height},
            Fill = Clear,
            CornerRadius = 0,
            Margin = 0,
            Padding = 0,
            StrokeWidth = 0,
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right"
          }
        )
        layout[v:gsub("%s+", "")] = {
          PrettyName = "Connection Setup~" .. v,
          Style = v ~= "Heart Beat Time" and "ComboBox" or "Text",
          TextBoxStyle = v ~= "Heart Beat Time" and "None" or "MeterBackground",
          Position = {177, y},
          Size = (v ~= "EOL" and v ~= "Heart Beat Time") and {textBlockWidth - 60, height} or (v == "EOL" or v == "Heart Beat Time") and {height * 4, height},
          Color = v ~= "Heart Beat Time" and White or Meter,
          OffColor = Gray,
          CornerRadius = 0,
          Margin = 0,
          Padding = 1,
          StrokeWidth = 1,
          FontSize = 9,
          HTextAlign = "Center"
        }
        y = y + 21
      end
      layout["EOLCustom"] = {
        PrettyName = "Connection Setup~EOLCustom",
        Style = "Text",
        TextBoxStyle = "Normal",
        Position = {246, 230},
        Size = {height * 8, height},
        Color = White,
        OffColor = Gray,
        CornerRadius = 0,
        Margin = 0,
        Padding = 1,
        StrokeWidth = 1,
        FontSize = 9,
        HTextAlign = "Center"
      }
    elseif controlType == "HTTP" then
      local controlTable = props["Authentication Required"].Value == "No" and {"URL", "Headers"} or {"URL", "Username", "Password", "Auth", "Headers"}
      for k, v in ipairs(controlTable) do
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = v .. ":",
            Position = {15, y},
            Size = {labelWidth, height},
            Fill = Clear,
            CornerRadius = 0,
            Margin = 0,
            Padding = 0,
            StrokeWidth = 0,
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right"
          }
        )
        layout[v] = {
          PrettyName = "Connection Setup~" .. v,
          Style = (v == "Auth") and "ComboBox" or "Text",
          TextBoxStyle = v ~= "Auth" and "Normal",
          Position = {107, y},
          Size = (v ~= "URL" and v ~= "Headers") and {textBlockWidth, height} or {253, height},
          Color = White,
          OffColor = Gray,
          CornerRadius = 0,
          Margin = 0,
          Padding = 1,
          StrokeWidth = 1,
          FontSize = 9,
          HTextAlign = "Center"
        }
        y = y + 21
      end
    end
    -- Connection Status
    y = 245
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Connection Status",
        Position = (controlType ~= "Serial" and controlType ~= "HTTP") and {5, y}
                or (controlType == "HTTP") and {5, y + 40}
                or (controlType == "Serial") and {5, y + 41},
        Size = {textBlockWidth, textBlockHeight},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 16,
        FontStyle = "Bold",
        HTextAlign = "Left"
      }
    )
    y = 270
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = (controlType ~= "Serial" and controlType ~= "HTTP") and {5, y}
                or (controlType == "HTTP") and {5, y + 40}
                or (controlType == "Serial") and {5, y + 41},
        Size = {groupBoxWidth - 10, logoGroupBoxHeight + 10},
        Fill = GBGray,
        CornerRadius = 0,
        StrokeWidth = 0
      }
    )
    y = 280
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Status",
        Position = (controlType ~= "Serial" and controlType ~= "HTTP") and {15, y}
                or (controlType == "HTTP") and {15, y + 40}
                or (controlType == "Serial") and {15, y + 41},
        Size = {headerWidth, headerHeight},
        Fill = DarkGray,
        Font = "Roboto",
        FontSize = 14,
        FontStyle = "Bold",
        HTextAlign = "Center"
      }
    )
    y = 306
    layout["Status"] = {
      PrettyName = "Connection Status~Status",
      Style = "Text",
      TextBoxStyle = "Normal",
      Position = (controlType ~= "Serial" and controlType ~= "HTTP") and {65, y}
              or (controlType == "HTTP") and {65, y + 40}
              or (controlType == "Serial") and {65, y + 41},
      Size = {groupBoxHeight - 95, height * 2},
      Color = StatusGray,
      OffColor = Gray,
      CornerRadius = 0,
      Margin = 0,
      Padding = 1,
      StrokeWidth = 1,
      FontSize = 12,
      HTextAlign = "Center"
    }
    y = 365
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Version " .. PluginInfo.Version,
        Position = (controlType ~= "Serial" and controlType ~= "HTTP") and {305, y}
                or (controlType == "HTTP") and {305, y + 40}
                or (controlType == "Serial") and {305, y + 41},
        Size = {labelWidth, height - 4},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 9,
        FontStyle = "Bold",
        HTextAlign = "Right"
      }
    )
  -- Send Page
  elseif currentPage == "Send" then
    y = 85
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Send Strings",
        Position = {5, y},
        Size = {textBlockWidth, textBlockHeight},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 16,
        FontStyle = "Bold",
        HTextAlign = "Left"
      }
    )
    y = 110
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {5, y},
        Size = (controlType == "HTTP") and {groupBoxWidth + 90, 73 + math.ceil(sendStringCount) * 21} or {groupBoxWidth - 10, 54 + math.ceil(sendStringCount) * 21},
        Fill = GBGray,
        CornerRadius = 0,
        StrokeWidth = 0
      }
    )
    y = 120
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Send",
        Position = {15, y},
        Size = (controlType == "HTTP") and {headerWidth + 100, headerHeight} or {headerWidth, headerHeight},
        Fill = DarkGray,
        Font = "Roboto",
        FontSize = 14,
        FontStyle = "Bold",
        HTextAlign = "Center"
      }
    )
    if controlType == "HTTP" then
      for k, v in ipairs({"Command", "Data", "Method", "Trigger"}) do
        table.insert(
          graphics,
          {
            Type = "Label",
            Text = v,
            Position = v == "Command" and {120, 142} or v == "Data" and {290, 142} or v == "Method" and {389, 142} or v == "Trigger" and {438, 142},
            Size = {60, height},
            Fill = Clear,
            CornerRadius = 0,
            Margin = 0,
            Padding = 0,
            StrokeWidth = 0,
            Font = "Roboto",
            FontSize = 12,
            HTextAlign = "Center"
          }
        )
      end
    end
    if controlType ~= "HTTP" then
      y = 146
    else
      y = 168
    end
    for i = 1, sendStringCount do
      table.insert(
        graphics,
        {
          Type = "Label",
          Text = tostring(i),
          Position = controlType ~= "HTTP" and {30, y} or {15, y},
          Size = {height * 2, height},
          Fill = Clear,
          CornerRadius = 0,
          Margin = 0,
          Padding = 0,
          StrokeWidth = 0,
          Font = "Roboto",
          FontSize = 12,
          HTextAlign = "Center"
        }
      )
      layout["SendData" .. i] = {
        PrettyName = "Send~SendCommand " .. i,
        Style = "Text",
        TextBoxStyle = "Normal",
        Position = controlType ~= "HTTP" and {95, y} or {55, y},
        Size = controlType ~= "HTTP" and {textBlockWidth, height} or {textBlockWidth + 10, height},
        Color = White,
        OffColor = Gray,
        CornerRadius = 0,
        Margin = 0,
        Padding = 1,
        StrokeWidth = 1,
        FontSize = 9,
        HTextAlign = "Left"
      }
      layout["TriggerButton" .. i] = {
        PrettyName = "Send~TriggerButton " .. i,
        Position = controlType ~= "HTTP" and {321, y} or {453, y},
        Size = {height * 2, height},
        Color = White,
        OffColor = Gray,
        UnlinkOffColor = true,
        CornerRadius = 2,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 1
      }
      if controlType == "HTTP" then
        layout["Data" .. i] = {
          PrettyName = "Send~Data " .. i,
          Style = "Text",
          TextBoxStyle = "Normal",
          Position = {255, y},
          Size = {130, height},
          Color = White,
          OffColor = Gray,
          CornerRadius = 0,
          Margin = 0,
          Padding = 1,
          StrokeWidth = 1,
          FontSize = 9,
          HTextAlign = "Left"
        }
        layout["Method" .. i] = {
          PrettyName = "Send~Method " .. i,
          Style = "ComboBox",
          Position = {395, y},
          Size = {48, height},
          Color = White,
          OffColor = Gray,
          CornerRadius = 0,
          Margin = 0,
          Padding = 1,
          StrokeWidth = 1,
          FontSize = 9,
          HTextAlign = "Center"
        }
      end
      y = y + 21
    end
    if controlType ~= "HTTP" then
      y = 54 + math.ceil(sendStringCount) * 21 + 115
    else
      y = 73 + math.ceil(sendStringCount) * 21 + 115
    end
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Version " .. PluginInfo.Version,
        Position = controlType ~= "HTTP" and {305, y} or {405, y},
        Size = {labelWidth, height - 4},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 9,
        FontStyle = "Bold",
        HTextAlign = "Right"
      }
    )
  -- Receive Page
  elseif currentPage == "Receive" then
    y = 85
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Receive Strings",
        Position = {5, y},
        Size = {textBlockWidth, textBlockHeight},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 16,
        FontStyle = "Bold",
        HTextAlign = "Left"
      }
    )
    y = 110
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {5, y},
        Size = {groupBoxWidth - 10, 77 + math.ceil(receiveStringCount) * 21},
        Fill = GBGray,
        CornerRadius = 0,
        StrokeWidth = 0
      }
    )
    y = 120
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Receive",
        Position = {15, y},
        Size = {headerWidth, headerHeight},
        Fill = DarkGray,
        Font = "Roboto",
        FontSize = 14,
        FontStyle = "Bold",
        HTextAlign = "Center"
      }
    )
    y = 146
    for k, v in ipairs({"Parse Data", "Data Received"}) do
      table.insert(
        graphics,
        {
          Type = "Label",
          Text = v,
          Position = v == "Parse Data" and {140, y} or v == "Data Received" and {285, y},
          Size = {labelWidth, height},
          Fill = Clear,
          CornerRadius = 0,
          Margin = 0,
          Padding = 0,
          StrokeWidth = 0,
          Font = "Roboto",
          FontSize = 11,
          HTextAlign = "Center"
        }
      )
    end
    y = 167
    for i = 1, receiveStringCount do
      table.insert(
        graphics,
        {
          Type = "Label",
          Text = tostring(i),
          Position = {30, y},
          Size = {height * 2, height},
          Fill = Clear,
          CornerRadius = 0,
          Margin = 0,
          Padding = 0,
          StrokeWidth = 0,
          Font = "Roboto",
          FontSize = 12,
          HTextAlign = "Center"
        }
      )
      layout["Receive" .. i] = {
        PrettyName = "Receive~ParseData " .. i,
        Style = "Text",
        TextBoxStyle = "Normal",
        Position = {95, y},
        Size = {textBlockWidth, height},
        Color = White,
        OffColor = Gray,
        CornerRadius = 0,
        Margin = 0,
        Padding = 1,
        StrokeWidth = 1,
        FontSize = 9,
        HTextAlign = "Center"
      }
      layout["IsDataReceived" .. i] = {
        PrettyName = "Receive~Is Data Received " .. i,
        Style = "LED",
        Position = {321, y},
        Size = {height, height},
        Color = Red,
        OffColor = LEDOff,
        UnlinkOffColor = true
      }
      y = y + 21
    end
    y = 77 + math.ceil(receiveStringCount) * 21 + 115
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Version " .. PluginInfo.Version,
        Position = {310, y},
        Size = {labelWidth, height - 4},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 9,
        FontStyle = "Bold",
        HTextAlign = "Right"
      }
    )
  -- Buffer Page
  elseif currentPage == "Buffer" then
    y = 85
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Received Data",
        Position = {5, y},
        Size = {textBlockWidth, textBlockHeight},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 16,
        FontStyle = "Bold",
        HTextAlign = "Left"
      }
    )
    y = 110
    -- Buffer GroupBox
    table.insert(
      graphics,
      {
        Type = "GroupBox",
        Position = {5, y},
        Size = {groupBoxWidth - 10, groupBoxHeight - 65},
        Fill = GBGray,
        CornerRadius = 0,
        StrokeWidth = 0
      }
    )
    y = 120
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Buffer",
        Position = {15, y},
        Size = {headerWidth, headerHeight},
        Fill = DarkGray,
        Font = "Roboto",
        FontSize = 14,
        FontStyle = "Bold",
        HTextAlign = "Center"
      }
    )
    y = 146
    if bufferCachingLayout == "Time" then
      table.insert(
        graphics,
        {
          Type = "Label",
          Text = "Buffer Refresh",
          Position = {260, y},
          Size = {labelWidth, height},
          Fill = Clear,
          CornerRadius = 0,
          Margin = 0,
          Padding = 0,
          StrokeWidth = 0,
          Font = "Roboto",
          FontSize = 11,
          FontStyle = "Bold",
          HTextAlign = "Center"
        }
      )
      layout["BufferRefresh"] = {
        PrettyName = "Buffer~Refresh",
        Style = "Text",
        TextBoxStyle = "MeterBackground",
        Position = {352, y},
        Size = {height * 2, height},
        Fill = Meter,
        CornerRadius = 0,
        Margin = 0,
        Padding = 1,
        StrokeWidth = 1,
        Font = "Roboto",
        FontSize = 9,
        HTextAlign = "Center"
      }
    end
    y = 167
    layout["BufferReceivedData"] = {
      PrettyName = "Buffer~ReceivedData",
      Style = "Text",
      TextBoxStyle = "Normal",
      IsReadOnly = true,
      Position = {15, y},
      Size = {groupBoxHeight, groupBoxHeight - 145},
      Color = White,
      OffColor = Gray,
      CornerRadius = 0,
      Margin = 0,
      Padding = 1,
      StrokeWidth = 1,
      FontSize = 9,
      HTextAlign = "Left", -- Changed from Center to Left as comparing data is hard when not aligned
      VTextAlign = "Bottom"
    }
    layout["LastReceivedMessage"] = {
      Style = "None",
      PrettyName = "Buffer~Last Received Message",
    }
    y = 420
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Version " .. PluginInfo.Version,
        Position = {305, y},
        Size = {labelWidth, height - 4},
        Fill = Clear,
        CornerRadius = 0,
        Margin = 0,
        Padding = 0,
        StrokeWidth = 0,
        Font = "Roboto",
        FontSize = 9,
        FontStyle = "Bold",
        HTextAlign = "Right"
      }
    )
  end
  return layout, graphics
end

function GetPins(props)
  local pins = {}
  if props["Control Type"].Value == "Serial" then
    table.insert(
      pins,
      {
        Name = "Serial Input",
        Direction = "input",
        Domain = "serial"
      }
    )
  end
  return pins
end

--Start event based logic
if Controls then
  -- Include library
  JSON = require("rapidjson")
  
  -- Control aliases
  IPAddress = Controls.IPAddress
  Port = Controls.Port
  HeartBeatTime = Controls.HeartBeatTime
  Username = Controls.Username
  Password = Controls.Password
  URL = Controls.URL
  Auth = Controls.Auth
  Headers = Controls.Headers
  EOL = Controls.EOL
  EOLCustom = Controls.EOLCustom
  BaudRate = Controls.BaudRate
  DataBits = Controls.DataBits
  Parity = Controls.Parity
  StopBits = Controls.StopBits
  Status = Controls.Status
  BufferRefresh = Controls.BufferRefresh
  BufferReceivedData = Controls.BufferReceivedData
  
  -- Debug Settings
  DebugTx = false
  DebugRx = false
  DebugFunction = false
  DebugPrint = Properties["Debug Print"].Value
  
  -- Constants
  StatusState = {
    OK = 0,
    COMPROMISED = 1,
    FAULT = 2,
    NOTPRESENT = 3,
    MISSING = 4,
    INITIALIZING = 5
  }
  
  SerialConstant = {
    BaudRateChoices = {
      "50",
      "110",
      "134",
      "150",
      "200",
      "300",
      "600",
      "1200",
      "1800",
      "2400",
      "4800",
      "9600",
      "19200",
      "38400",
      "57600",
      "115200",
      "230400"
    },
    DataBitsChoices = {"7", "8"},
    ParityChoices = {"None", "Odd", "Even"}, -- N = None, E = Even, O = Odd
    StopBitsChoices = {"1", "2"}
  }
  
  EOL_Choices = {"Any", "CrLf", "CrLfStrict", "Lf", "Null", "Custom", "None"}
  Controls["EOL"].Choices = EOL_Choices
  
  Auth_Choices = {"any", "basic", "digest", "digest_ie"}
  Auth.Choices = Auth_Choices
  
  HttpMethods = {"GET", "POST", "PUT", "PATCH", "DELETE"}
  for i = 1, Properties["Send String Count"].Value do
    Controls["Method" .. i].Choices = HttpMethods
  end
  
  -- Timers
  HeartBeatTimer = Timer.New()
  BufferTimer = Timer.New() -- used if Buffer Caching is set to Time
  
  -- Variables
  HeartBeatGood = false -- Set the connection flag to false
  ReceivedData = "" -- to store received data
  BufferData = {}
  
  -- Helper functions
  -- A function to determine common print statement scenarios for troubleshooting
  function SetupDebugPrint()
    if DebugPrint == "Tx/Rx" then
      DebugTx, DebugRx = true, true
    elseif DebugPrint == "Tx" then
      DebugTx = true
    elseif DebugPrint == "Rx" then
      DebugRx = true
    elseif DebugPrint == "Function Calls" then
      DebugFunction = true
    elseif DebugPrint == "All" then
      DebugTx, DebugRx, DebugFunction = true, true, true
    end
  end
  
  -- Update the Status control
  function ReportStatus(state, message)
    if DebugFunction then
      print("ReportStatus() Called")
    end
    local message = message or ""
    Status.Value = StatusState[state]
    Status.String = message
  end
  
    -- Create a new Queue Class instance to do many things at the same time
    Queue = {}
    
    -- Returns a new Queue object
    function Queue:New()
      list = {first = 1, last = 0}
      self.__index = self
      setmetatable(list, self)
      return list
    end
    
    -- Add a value to the end of the Queue
    function Queue:Push(value)
      self.last = self.last + 1
      self[self.last] = value
    end
    
    -- Add a value at the head of the Queue
    function Queue:PushFirst(value)
      self.first = self.first - 1
      self[self.first] = value
    end
    
    -- Return a value removed from the front of the queue
    function Queue:Pop()
      if self.first > self.last then
        error("Queue is empty!")
      end
      local value = self[self.first]
      self[self.first] = nil
      self.first = self.first + 1
      return value
    end
    
    -- Return the index within the Queue of the value, or nil
    function Queue:IndexOf(value)
      for i = self.first, self.last do
        if self[i] == value then
          return i
        end
      end
      return nil
    end
    
    -- Remove all data from the Queue
    function Queue:Clear()
      for i = self.first, self.last do
        self[i] = nil
      end
      self.first = 1
      self.last = 0
    end
    
    -- Returns false if the Queue contains data, true otherwise
    function Queue:IsEmpty()
      return self.first > self.last
    end
    
    MyQueue = Queue:New()
    QueuePopTimer = Timer.New()
    QueuePopTimer:Start(0.001)
    QueuePopTimer.EventHandler = function()
      if not MyQueue:IsEmpty() then
        local item = MyQueue:Pop()
        if item ~= "" then
          if Properties["Control Type"].Value == "HTTP" then
            WriteData(item.buttonIndex)
          else
            WriteData(item.sendData)
          end
        end
      end
    end
    -- Returns true if the IP address is not empty
    function IsIPAddressEntered()
      local ipAddress = IPAddress.String
      return ipAddress ~= ""
    end
    
    -- Returns true if all the serial data are not empty
    function IsSerialDataEntered()
      local baudRate = BaudRate.String
      local dataBits = DataBits.String
      local parity = Parity.String
      local stopBits = StopBits.String
      return baudRate ~= "" and dataBits ~= "" and parity ~= "" and stopBits ~= ""
    end
    
    -- Returns true if the credentials are not empty
    function IsCredentialsEntered()
      local username = Username.String
      local password = Password.String
      return username ~= "" and password ~= ""
    end
    
    -- Enables or disables the Username and Password controls based on the authentication required from the properties panel
    function EnableLogin()
      if Properties["Control Type"].Value == "HTTP" then
        if Properties["Authentication Required"].Value == "No" then
          print("User credentials aren't required")
          Username.IsDisabled = true
          Password.IsDisabled = true
          Auth.IsDisabled = true
        elseif Properties["Authentication Required"].Value == "Yes" then
          print("User credentials required")
          Username.IsDisabled = false
          Password.IsDisabled = false
          Auth.IsDisabled = false
        end
      end
    end
    
    -- Enables or disables the EOL controls based on the EOL
    function EnableEolCustom()
      if Properties["Control Type"].Value == "TCP" or Properties["Control Type"].Value == "SSH" or Properties["Control Type"].Value == "Serial" then
        EOLCustom.IsDisabled = (EOL.String ~= "Custom")
        -- If EOL.String is "Custom", check EOLCustom.String
        if EOL.String == "Custom" then
          if EOLCustom.String == "" then
            EOLCustom.String = "\\x0D"
          end
        end
      end
    end
    
    -- Escapes the special characters in the user input string
    function Escape(cmd)
      local escapedLine = ""
      local hexBuffer = ""
      local inHex = false
      local inEscapeSequence = false
      local function addChar(charByte, position)
        escapedLine = escapedLine .. string.char(charByte)
      end
      for i = 1, #cmd do
        local char = string.byte(cmd:sub(i, i))
        if inEscapeSequence then
          inEscapeSequence = false
          if char == 120 then
            inHex = true -- hex indicator
            hexBuffer = ""
          else
            local replacements = {
              [97] = 7, -- bell
              [98] = 8, -- backspace
              [102] = 12, -- formfeed
              [110] = 10, -- newline
              [114] = 13, -- carriage return
              [116] = 9, -- tab
              [118] = 11, -- vertical tab
              [92] = 92, -- backslash
              [34] = 34, -- double quotes
              [39] = 39 -- single quotes
            }
            local replacement = replacements[char]
            if replacement then
              addChar(replacement, i)
            else
              -- Handle unrecognized escape character
              addChar(92, i) -- Add backslash
              addChar(char, i) -- Add the unrecognized escape character itself
            end
          end
        elseif inHex then
          hexBuffer = hexBuffer .. string.char(char)
          if #hexBuffer >= 2 then
            local hexToDec = tonumber(hexBuffer, 16)
            hexBuffer = ""
            inHex = false
            addChar(hexToDec, i)
          end
        else
          if char == 92 then
            inEscapeSequence = true
          else
            addChar(char, i)
          end
        end
      end
      if inHex then
        error("Unfinished Hex")
      end
      return escapedLine
    end
    
    -- De-escapes the special characters in the user input string
    function DeEscape(cmd)
      local data = ""
      for i = 1, #cmd do
        local char = string.byte(cmd:sub(i, i))
        if char > 32 then
          data = data .. string.char(char)
        else
          data = data .. string.format("\\x%02x", char)
        end
      end
      return data
    end
    
    BufferTimer.EventHandler = function()
      local itemRemoved = false
      for x= #BufferData, 1, -1 do -- iterate backwards to avoid skipping elements
        BufferData[x].Time = BufferData[x].Time - 1
        if BufferData[x].Time <= 0 then
          table.remove(BufferData, x)
          itemRemoved = true
        end
      end
      if itemRemoved then -- only update if an item was removed
        UpdateBufferReceivedData()
      end
    end
    if Properties["Buffer Caching"].Value == "Time" then
      BufferTimer:Start(1)
      BufferRefresh.EventHandler = function()
        BufferTimer:Stop()
        for x = 1, #BufferData do
          if BufferData[x].Time > BufferRefresh.Value then -- if time is greater than the new refresh rate, update the time
            BufferData[x].Time = BufferRefresh.Value
          end
        end
        BufferTimer:Start(1)
      end
    end
    
    -- Function to add messages to the buffer with appropriate prefixes
    function AddToBuffer(prefix, message)
      local toAdd = {}
      toAdd["message"] = prefix .. ": " .. message
      if Properties["Buffer Caching"].Value == "Time" then
        toAdd["Time"] = BufferRefresh and BufferRefresh.Value or 0
      end
      table.insert(BufferData, toAdd)
    
      -- limit max buffer depending on Caching type
      if Properties["Buffer Caching"].Value == "Time" then
        while #BufferData > 1000 do -- Limit the buffer to 1000 messages to preserve lua compute
          table.remove(BufferData, 1)
        end
      elseif Properties["Buffer Caching"].Value == "Count" then
        while #BufferData > Properties["Message Cache Amount"].Value do
          table.remove(BufferData, 1)
        end
      end
      UpdateBufferReceivedData()
    end
    
    -- Function to update BufferReceivedData based on Buffer Caching properties
    function UpdateBufferReceivedData()
      local messages = {}
      for _,item in ipairs(BufferData) do
        table.insert(messages, item.message)
      end
      BufferReceivedData.String = table.concat(messages, "\n")
    end
    
    OutputTimers = {}
    for i = 1, Properties["Receive String Count"].Value do
      OutputTimers[i] = Timer.New()
      OutputTimers[i].EventHandler = function()
        OutputTimers[i]:Stop()
        Controls["IsDataReceived" .. i].Boolean = false
      end
    end
    
    function PulseOutput(index)
      Controls["IsDataReceived" .. index].Boolean = false
      OutputTimers[index]:Stop()
      Controls["IsDataReceived" .. index].Boolean = true
      OutputTimers[index]:Start(3)
    end
  -- Socket Management
  function ConnectionSetup()
    if DebugFunction then
      print("ConnectionSetup() Called")
    end
  
    -- Socket Management
    Tcp = nil
    Udp = nil
    SSH = nil
    Serial = nil
  
    ClearVariables()  -- Clear the data and buffer
    -- memory managment of garbage collection
    collectgarbage("collect")
  
    if Properties["Control Type"].Value == "TCP" then
      if DebugFunction then
        print("TCP Connection Initialized...")
      end
        ReportStatus("MISSING")
        
        -- Socket Management
        Tcp = TcpSocket.New()
        -- Tcp.ReadTimeout = 10
        -- Tcp.WriteTimeout = 10
        Tcp.ReconnectTimeout = 5
        
        -- Event Handler
        Tcp.EventHandler = function(sock, evt, err)
          if IsIPAddressEntered() then
            if evt == TcpSocket.Events.Connected then
              print("TcpSocket connected")
              ReportStatus("OK", "Connected")
            elseif evt == TcpSocket.Events.Reconnect then
              print("TcpSocket reconnecting...")
            elseif evt == TcpSocket.Events.Data then
              local line
              if EOL.String == "Custom" then
                if EOLCustom.String ~= "" then
                  line = sock:ReadLine(TcpSocket.EOL.Custom, Escape(EOLCustom.String))
                  while (line ~= nil) do
                    ParseResponse(line)
                    line = sock:ReadLine(TcpSocket.EOL.Custom, Escape(EOLCustom.String))
                  end
                else
                  print("EOLCustom.String is needed to parse data with Custom EOL")
                end
              elseif EOL.String == "None" then
                line = sock:Read(sock.BufferLength)
                ParseResponse(line)
              else
                line = sock:ReadLine(TcpSocket.EOL[EOL.String])
                while (line ~= nil) do
                  ParseResponse(line)
                  line = sock:ReadLine(TcpSocket.EOL[EOL.String])
                end
              end
            elseif evt == TcpSocket.Events.Closed then
              print("TcpSocket closed")
              ReportStatus("MISSING", "Socket Closed")
            elseif evt == TcpSocket.Events.Error then
              print("TcpSocket closed due to error: ", err)
              ReportStatus("MISSING", "Unable to connect")
            elseif evt == TcpSocket.Events.Timeout then
              print("TcpSocket closed due to timeout")
              ReportStatus("MISSING", "Socket Timeout")
            else
              print("Unknown TcpSocket event: ", evt)
            end
          else
            ReportStatus("MISSING", "No valid IP Address")
          end
        end
        
        if IsIPAddressEntered() then
          local success, err =
            pcall(
            function()
              if Tcp.IsConnected then
                Tcp:Disconnect()
              end
              Tcp:Connect(IPAddress.String, Port.Value)
            end
          )
          if not success then
            ReportStatus("FAULT", "Socket Error")
          end
        else
          ReportStatus("MISSING", "No valid IP Address")
        end
        
        -- Send the data to the device
        function WriteData(cmd)
          if DebugFunction then
            print("TCP WriteData() Called")
          end
          if Tcp.IsConnected then
            print("TX: ", cmd)
            Tcp:Write(Escape(cmd))
          else
            print("Error - TcpSocket Disconnected; unable to send ", cmd)
          end
        end
    elseif Properties["Control Type"].Value == "HTTP" then
      if DebugFunction then
        print("HTTP Connection Initialized...")
      end
      if URL.String == "" then
        ReportStatus("MISSING", "No URL")
      else
        ReportStatus("OK")
      end
        local headersTable = {}
        
        -- Define the lookup table for HTTP status codes
        local status_codes = {
          [100] = "Continue",
          [101] = "Switching Protocols",
          [102] = "Processing (WebDAV; RFC 2518)",
          [103] = "Early Hints (RFC 8297)",
          [200] = "OK",
          [201] = "Created",
          [202] = "Accepted",
          [203] = "Non-Authoritative Information",
          [204] = "No Content",
          [205] = "Reset Content",
          [206] = "Partial Content",
          [207] = "Multi-Status (WebDAV; RFC 4918)",
          [208] = "Already Reported (WebDAV; RFC 5842)",
          [209] = "IM Used (RFC 3229)",
          [300] = "Multiple Choices",
          [301] = "Moved Permanently",
          [302] = "Found",
          [303] = "See Other (since HTTP/1.1)",
          [304] = "Not Modified",
          [305] = "Use Proxy",
          [306] = "Switch Proxy",
          [307] = "Temporary Redirect",
          [308] = "Permanent Redirect",
          [400] = "Bad Request",
          [401] = "Unauthorized",
          [402] = "Payment Required",
          [403] = "Forbidden",
          [404] = "Not Found",
          [405] = "Method Not Allowed",
          [406] = "Not Acceptable",
          [407] = "Proxy Authentication Required",
          [408] = "Request Timeout",
          [409] = "Conflict",
          [410] = "Gone",
          [411] = "Length Required",
          [412] = "Precondition Failed",
          [413] = "Payload Too Large",
          [414] = "URI Too Long",
          [415] = "Unsupported Media Type",
          [416] = "Range Not Satisfiable",
          [417] = "Expectation Failed",
          [418] = "I'm a Teapot",
          [421] = "Misdirected Request",
          [422] = "Unprocessable Entity",
          [423] = "Locked",
          [424] = "Failed Dependency",
          [425] = "Too Early",
          [426] = "Upgrade Required",
          [428] = "Precondition Required",
          [429] = "Too Many Requests",
          [431] = "Request Header Fields Too Large",
          [451] = "Unavailable For Legal Reasons",
          [500] = "Internal Server Error",
          [501] = "Not Implemented",
          [502] = "Bad Gateway",
          [503] = "Service Unavailable",
          [504] = "Gateway Timeout",
          [505] = "HTTP Version Not Supported",
          [506] = "Variant Also Negotiates",
          [507] = "Insufficient Storage",
          [508] = "Loop Detected",
          [510] = "Not Extended",
          [511] = "Network Authentication Required",
          -- Unofficial codes
          [218] = "This is fine (Apache HTTP Server)",
          [419] = "Page Expired (Laravel Framework)",
          [420] = "Method Failure (Spring Framework) or  Enhance Your Calm (Twitter)",
          [430] = "Request Header Fields Too Large / Shopify Security Rejection (Shopify)",
          [450] = "Blocked by Windows Parental Controls (Microsoft)",
          [498] = "Invalid Token (Esri)",
          [499] = "Token Required (Esri)",
          [509] = "Bandwidth Limit Exceeded (Apache Web Server/cPanel)",
          [529] = "Site is overloaded(Qualys)",
          [530] = "Site is frozen (Pantheon Systems) or Origin DNS Error (Shopify)",
          [540] = "Temporarily Disabled (Shopify)",
          [598] = "(Informal convention) Network read timeout error",
          [599] = "Network Connect Timeout Erro",
          [783] = "Unexpected Token (Shopify)",
          -- Internet Information Services
          [440] = "Login Time-out",
          [449] = "Retry With",
          [451] = "Redirect",
          -- nginx
          [444] = "No Response",
          [494] = "Request header too large",
          [465] = "SSL Certificate Error",
          [496] = "SSL Certificate Required",
          [497] = "HTTP Request Sent to HTTPS Port",
          [499] = "Client Closed Request",
          -- Cloudflare
          [520] = "Web Server Returned an Unknown Error",
          [521] = "Web Server Is Down",
          [522] = "Connection Timed Out",
          [523] = "Origin Is Unreachable",
          [524] = "A Timeout Occurred",
          [525] = "SSL Handshake Failed",
          [526] = "Invalid SSL Certificate",
          [527] = "Railgun Error",
          -- AWS Elastic Load Balancing
          [460] = "Client closed the connection with the load balancer before the idle timeout period elapsed",
          [463] = "The load balancer received an X-Forwarded-For request header with more than 30 IP addresses",
          [464] = "Incompatible protocol versions between Client and Origin server",
          [561] = "Unauthorized",
          -- Caching warning codes (obsoleted)
          [110] = "Response is Stale",
          [111] = "Revalidation Failed",
          [112] = "Disconnected Operation",
          [113] = "Heuristic Expiration",
          [199] = "Miscellaneous Warning",
          [214] = "Transformation Applied",
          [299] = "Miscellaneous Persistent Warning",
        }
        
        -- A function to parse headers
        function ParseHeaders(headersString)
          local headers = {}
          for key, value in headersString:gmatch('%[%"(.-)%"]%s?=%s?%"(.-)%"') do
            print("KEY: " .. key .. ", VALUE: " .. value)
            headers[key] = value
          end
          headersTable = headers -- Update global headersTable with parsed headers
          return headers
        end
        
        -- A function reads response code, sets status and prints received data.
        function HttpResponseHandler(tbl, code, data, err, headers)
          print(string.format("HTTP response from '%s': Return Code=%i; Error=%s", tbl.Url, code, err or "None"))
          if data then
            ParseResponse(data)
          end
          local status_description = status_codes[code] or "Unknown Status Code"
          local state = (code >= 100 and code < 300) and "OK" or "FAULT"
          ReportStatus(state, string.format("%s - %d", status_description, math.floor(code)))
          if not status_description then
            print("Unhandled status code: ", code)
          end
        end
        
        -- Consolidates HTTP request logic for GET and POST requests.
        function SendRequest(url, data, method)
          local headers = ParseHeaders(Headers.String)
          local username = Username and Username.String or nil
          local password = Password and Password.String or nil
          local auth = Auth and Auth.String or nil
        
          local request = {
            Url = url,
            Headers = headers,
            User = username,
            Password = password,
            Auth = auth,
            Timeout = 15,
            EventHandler = HttpResponseHandler
          }
        
          if method == "GET" then
            HttpClient.Download(request)
          elseif method == "DELETE" then
            HttpClient.Delete(request)
          else
            request.Data = data
            request.Method = method
            HttpClient.Upload(request)
          end
        end
        
        -- A function to sends an HTTP request based on the specified method and data.
        function SendHTTPCommand(index)
          if DebugFunction then
            print("SendHTTPCommand() Called")
          end
          local cmd = Controls["SendData" .. index].String
          local data = Controls["Data" .. index].String
          local method = Controls["Method" .. index].String
        
          local url = string.format("%s/%s", URL.String, cmd)
          SendRequest(url, data, method)
        end
        
        -- Send the data to the endpoint
        function WriteData(buttonIndex)
          if DebugFunction then
            print("HTTP WriteData() Called")
          end
          SendHTTPCommand(buttonIndex)
        end
    elseif Properties["Control Type"].Value == "UDP" then
      if DebugFunction then
        print("UDP Connection Initialized...")
      end
        HeartBeatTimer:Stop()
        
        -- Socket Management
        Udp = UdpSocket.New()
        
        -- Event Handler
        Udp.EventHandler = function(udp, packet)
          if packet.Data ~= nil and packet.Address == IPAddress.String then
            BeatHeart()
            ParseResponse(packet.Data)
          end
        end
        
        if IsIPAddressEntered() then
          local success, err =
            pcall(
            function()
              Udp:Open(_, Port.Value)
              HeartBeatTimer:Start(HeartBeatTime.Value)
              ReportStatus("MISSING")
            end
          )
          if not success then
            ReportStatus("FAULT", "Socket Error unable to open Udp socket")
          end
        else
          ReportStatus("MISSING", "Invalid IP Address")
        end
        
        function WriteData(data)
          if DebugFunction then
            print("UDP WriteData() Called")
          end
          print("TX: ", data)
          Udp:Send(IPAddress.String, Port.Value, Escape(data))
        end
    elseif Properties["Control Type"].Value == "SSH" then
      if DebugFunction then
        print("SSH Connection Initialized...")
      end
        -- Socket Management
        SSH = Ssh.New()
        -- SSH.ReadTimeout = 10
        -- SSH.WriteTimeout = 10
        SSH.ReconnectTimeout = 5
        
        local loginFailed = false
        
        StrikeoutThreshold = 5
        Strikes = 0
        ResponseTimeout = 30
        WaitingForResponse = false
        UseStrikeout, UseTimeout = true, true
        
        ResponseTimer = Timer.New()
        ResponseTimer.EventHandler = function()
          ClearTimeout()
          ReportStatus("MISSING", "No response from device")
          Connect()
        end
        
        function CheckStrikeout()
          if Strikes >= StrikeoutThreshold then
            ClearTimeout()
            ReportStatus("MISSING", "Strikeout Threshold Reached")
            Connect()
          end
        end
        
        function ClearTimeout() -- Call on recieved Data, even if data is empty as that proves the socket is still alive on the other end
          ResponseTimer:Stop()
          WaitingForResponse = false
          Strikes = 0
        end
        
        function IncrementStrikeout() -- Call on sent Data
          if not WaitingForResponse and UseTimeout then
            WaitingForResponse = true
            ResponseTimer:Start(ResponseTimeout)
          end
          if UseStrikeout then
            Strikes = Strikes + 1
            CheckStrikeout()
          end
        end
        
        -- Event Handler
        -- SSH socket callbacks
        -- function called when SSH login fails
        SSH.LoginFailed = function()
          print("SSH login failed")
          loginFailed = true
        end
        
        -- function called when the SSH socket is connected
        SSH.Connected = function()
          print("Socket connected")
          ReportStatus("OK", "Connected")
        end
        
        -- function called when the SSH socket is reconnected
        SSH.Reconnect = function()
          print("Socket reconnecting...")
        end
        
        -- function called when the SSH socket is closed
        SSH.Closed = function()
          print("Socket closed")
          if not SSH.IsConnected and loginFailed then
            ReportStatus("FAULT","Access denied - check credentials")
          else
            ReportStatus("MISSING", "Socket Closed")
          end
        end
        
        -- function called when the SSH socket has an error
        SSH.Error = function()
          print("Socket error")
          ReportStatus("MISSING", "Unable to connect")
        end
        
        -- function called when the SSH socket times out
        SSH.Timeout = function()
          print("Socket timeout")
          ReportStatus("MISSING", "Socket Timeout")
        end
        
        -- ParseResponse is called when the SSH object has data
        SSH.Data = function()
          local line
          ClearTimeout()
          if EOL.String == "Custom" then
            if EOLCustom.String ~= "" then
              line = SSH:ReadLine(TcpSocket.EOL.Custom, Escape(EOLCustom.String))
              while (line ~= nil) do
                ParseResponse(line)
                line = SSH:ReadLine(TcpSocket.EOL.Custom, Escape(EOLCustom.String))
              end
            else
              print("EOLCustom.String is needed to parse data with Custom EOL")
            end
          elseif EOL.String == "None" then
            line = SSH:Read(SSH.BufferLength)
            ParseResponse(line)
          else
            line = SSH:ReadLine(TcpSocket.EOL[EOL.String])
            while (line ~= nil) do
              ParseResponse(line)
              line = SSH:ReadLine(TcpSocket.EOL[EOL.String])
            end
          end
        end
        
        
        -- Connect to the device
        function Connect()
          -- Connect to the device
          if not IsIPAddressEntered() then
            ReportStatus("MISSING", "Invalid IP Address")
          else
            if not IsCredentialsEntered() then
              ReportStatus("MISSING", "Credentials are missing")
            else
              -- Reset loginFailed flag
              loginFailed = false
              local success, err =
                pcall(
                function()
                  if SSH.IsConnected then
                    SSH:Disconnect()
                  end
                  SSH:Connect(IPAddress.String, Port.Value, Username.String, Password.String)
                end
              )
              if not success then
                -- Handle error during connection attempt
                ReportStatus("FAULT", "Socket Error: " .. tostring(err))
              end
            end
          end
        end
        Connect()
        
        function WriteData(cmd)
          if DebugFunction then
            print("SSH WriteData() Called")
          end
          if SSH.IsConnected then
            print("TX: ", cmd)
            SSH:Write(Escape(cmd))
            IncrementStrikeout()
          else
            print("Error - SSH Socket Disconnected; unable to send ", cmd)
          end
        end
    elseif Properties["Control Type"].Value == "Serial" then
      if DebugFunction then
        print("Serial Connection Initialized...")
      end
        -- Socket Management
        SerialPort = SerialPorts[1]
        
        -- Choices
        BaudRate.Choices = SerialConstant.BaudRateChoices
        DataBits.Choices = SerialConstant.DataBitsChoices
        Parity.Choices = SerialConstant.ParityChoices
        StopBits.Choices = SerialConstant.StopBitsChoices
        local parity = {None = "N", Odd = "O", Even = "E"}
        
        -- EventHandler
        SerialPort.EventHandler = function(port, evt, err)
          if IsSerialDataEntered() then
            if evt == SerialPorts.Events.Connected then
              BeatHeart()
              print("Serial port connected")
              ReportStatus("OK")
            elseif evt == SerialPorts.Events.Reconnect then
              print("Serial port reconnecting...")
            elseif evt == SerialPorts.Events.Data then
              BeatHeart()
              local line
              if EOL.String == "Custom" then
                if EOLCustom.String ~= "" then
                  line = port:ReadLine(SerialPorts.EOL.Custom, Escape(EOLCustom.String))
                  while (line ~= nil) do
                    ParseResponse(line)
                    line = port:ReadLine(SerialPorts.EOL.Custom, Escape(EOLCustom.String))
                  end
                else
                  print("EOLCustom.String is needed to parse data with Custom EOL")
                end
              elseif EOL.String == "None" then
                line = port:Read(port.BufferLength)
                ParseResponse(line)
              else
                line = port:ReadLine(SerialPorts.EOL[EOL.String])
                while (line ~= nil) do
                  ParseResponse(line)
                  line = port:ReadLine(SerialPorts.EOL[EOL.String])
                end
              end
            elseif evt == SerialPorts.Events.Closed then
              print("Serial port closed by remote")
              ReportStatus("MISSING", "Serial port closed")
              HeartBeatTimer:Stop()
              HeartBeatGood = false  -- Set HeartBeatGood to false
            elseif evt == SerialPorts.Events.Error then
              print("Serial port closed due to error: ", err)
              ReportStatus("MISSING", "Unable to connect")
              HeartBeatTimer:Stop()
              HeartBeatGood = false  -- Set HeartBeatGood to false
            elseif evt == SerialPorts.Events.Timeout then
              print("Serial port closed due to timeout")
              ReportStatus("MISSING", "Serial port timeout")
              HeartBeatTimer:Stop()
              HeartBeatGood = false  -- Set HeartBeatGood to false
            end
          end
        end
        
        if IsSerialDataEntered() then
          local success, err =
            pcall(
              function()
                if SerialPort.IsOpen then
                  SerialPort:Close()
                end
                SerialPort:Open(tonumber(BaudRate.String), tonumber(DataBits.String), parity[Controls["Parity"].String])
              end
          )
          if not success then
            ReportStatus("FAULT", "Socket Error")
          end
        else
          ReportStatus("MISSING", "No valid serial data")
        end
        
        function WriteData(cmd)
          if DebugFunction then
            print("Serial WriteData() Called")
          end
          if SerialPort.IsOpen then
            print("TX: ", cmd)
            SerialPort:Write(Escape(cmd))
          else
            print("Error - Serialport Disconnected; unable to send ", cmd)
          end
        end
    end
  end
  
  -- Buffer Management
  function ParseResponse(data)
    if DebugFunction then
      print("ParseResponse() Called")
    end
    if data ~= nil then
      if DebugRx then
        print("Received Data: ", data)
      end
      ReceivedData = data -- update the received data to the global variable
      local timestamp = os.date("%Y-%m-%d %H:%M:%S")
      AddToBuffer("RX", "[" .. timestamp .. "] " .. ReceivedData) -- Add received data to buffer
      -- UpdateBufferReceivedData()  -- Update BufferReceivedData after adding new data
  
      Controls["LastReceivedMessage"].String = ReceivedData
  
      for i = 1, Properties["Receive String Count"].Value do
        local receivedString = Controls["Receive" .. i].String
        if receivedString ~= "" then
          -- Attempt to compile the string as a regex
          local isRegEx, err =
            pcall(
            function()
              return data:find(receivedString)
            end
          )
          -- If no error occurred, it's likely a plain text search
          if isRegEx then
            if data:find(receivedString) then
              PulseOutput(i)
            end
          else
            -- If error occurred during regex compilation, it's a regex search
            isRegEx, err = pcall(function()
              return data:match(receivedString)
            end)
            if isRegEx then
              PulseOutput(i)
            else
              -- Handle error in regex pattern
              if DebugRx then
                print("Error in regex pattern: ", err) -- Print the error message for debugging
              end
            end
          end
        end
      end
    end
  end
  
  -- A function to clear controls/flags/variables and clears tables
  function ClearVariables()
    if DebugFunction then
      print("ClearVariables() Called")
    end
    BufferReceivedData.String = ""
    Controls["LastReceivedMessage"].String = ""
    BufferData = {}
    HeartBeatGood = false
  end
  
  -- Poll function for updates and state changes
  function PollDevice()
    if DebugFunction then
      print("PollDevice() Called")
    end
    -- WriteData("PING")
  end
  
  -- EventHandlers
  function SetEventHandlers()
    IPAddress.EventHandler = ConnectionSetup
    Username.EventHandler = ConnectionSetup
    Password.EventHandler = ConnectionSetup
    URL.EventHandler = ConnectionSetup
    Port.EventHandler = ConnectionSetup
    HeartBeatTime.EventHandler = BeatHeart -- should not need to restart communication
    Auth.EventHandler = ConnectionSetup
    Headers.EventHandler = ConnectionSetup
    BaudRate.EventHandler = ConnectionSetup
    DataBits.EventHandler = ConnectionSetup
    Parity.EventHandler = ConnectionSetup
    StopBits.EventHandler = ConnectionSetup
    EOL.EventHandler = EnableEolCustom
    EOLCustom.EventHandler = EnableEolCustom
  
    if Properties["Control Type"].Value == "UDP" or Properties["Control Type"].Value == "Serial" then
      HeartBeatTimer.EventHandler = function() -- Should only be called if the heartbeat is missed
        if HeartBeatGood then -- only report status missing if the last heartbeat was good
          ReportStatus("MISSING")
        end
        HeartBeatGood = false -- set false so the next heartbeat will report the status as OK
      end
      HeartBeatTimer:Start(HeartBeatTime.Value)
    end
  
    for i = 1, Properties["Send String Count"].Value do
      Controls["TriggerButton" .. i].EventHandler = function()
        local buttonIndex = i -- Capture the current value of i locally
        print("TriggerButton " .. buttonIndex .. " Pressed")
        local sendData = Controls["SendData" .. buttonIndex].String
        local data = Controls["Data" .. buttonIndex] and Controls["Data" .. buttonIndex].String or ""
        MyQueue:Push({sendData = sendData, buttonIndex = buttonIndex})
        -- Add sent data to buffer
        if sendData ~= "" then
          local timestamp = os.date("%Y-%m-%d %H:%M:%S")
          AddToBuffer("TX", "[" .. timestamp .. "] " .. sendData .. " " .. data)
        end
      end
    end
  end
  
  -- function to reset heartbeat timeout and set the flag to true
  function BeatHeart()
    if not HeartBeatGood then -- only report status OK if the last heartbeat was missed
      ReportStatus("OK")
    end
    HeartBeatGood = true
    HeartBeatTimer:Stop()
    HeartBeatTimer:Start(HeartBeatTime.Value)
  end
  
  -- Initialization Function
  function Initialization()
    if DebugFunction then
      print("Initialization() Called")
    end
    SetupDebugPrint()
    if IPAddress.String == "" then
      ReportStatus("MISSING", "No IP Address")
    end
    SetEventHandlers()
    EnableLogin()
    EnableEolCustom()
    ConnectionSetup()
  end
  
  Initialization()
end