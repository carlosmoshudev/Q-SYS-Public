--[[ BEGIN DIGITAL SIGNATURE
UC8xiCBjgNVnSt+VrYAUwHZFerRHpg6k8rbfvOMXlUNUjSiMdN3TbsuZgQud63yprMhCw5X7S40cR+PIfnwOenRsMr35/Gj77ugr9brc1i+kJd8uuU/3Pwv3xUj8NqRfjssE3lt1jdG7l3IQKxEz72qB3QlVSljm0LoiMv4JAoKfd3VeB9J3ykEs4Eg7XvMRjaG7MjMhxGPtDG39fNhLIwrCYxTYDdbV9EWEQajVuIUEy0cFfOvXDZnCFqDVBiT3cU1CAAe8+qLwCqK5Kve7NtyTEY5/J6K/7eByuyF3u4AJxEk0QFndcqOMUTOuIbjYfB2N6rAaLdtSUBlArV8CeA==
END DIGITAL SIGNATURE ]]
-- Extron SMP 351 Plug-in
-- by Eric Urbaniak / QSC Boulder
-- July 2019
-- Version 1.1.0.0
-- Version Notes: Added IsRecording and IsPaused LED


PluginInfo = {
    Name = "Enterprise Manager~Extron~Extron SMP 351 v1.1",
    Version = "1.1",
    BuildVersion = "1.1.0.0",
    Id = "408446a1-dffb-4055-9bf6-295367109bb6",
    Description = "Extron SMP 351",
    Author = "QSC",
    IsManaged = true,
    Model = "SMP 351",
    Manufacturer = "Extron",
    Type = Reflect and Reflect.Types.CaptureDevice or 0
}

PageNames = {"Setup","Device Control","Video Configuration"}

function GetColor(props)
  return { 0, 73, 150 }
end

function GetPrettyName(props)
  return "Extron\rSMP 351\rv".. PluginInfo.Version
end

function GetPages(props) --optional function if plugin has multiple pages
  pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages,{name=PageNames[ix]})
  end
  return pages
end
--[=[
function GetModel(props) --optional function to define model if plugin supports more than one model
  model = {}
  --[[ Model File Contents ]]
  return model
end
--]=]

function GetProperties()
  props = {
  }
  return props
end

function GetControls(props)
  ctrls = {
  {Name="IPAddress",ControlType="Text",Count=1},
  {Name="Port",ControlType="Knob",ControlUnit="Integer",DefaultValue=23,Min=1,Max=65535,Count=1},
  {Name="Password",ControlType="Text",Count=1},
  {Name="DevInfo",ControlType="Indicator",IndicatorType="Text",Count=4},
  {Name="StoInfo",ControlType="Indicator",IndicatorType="Text",Count=12},
  {Name="Status",ControlType="Indicator",IndicatorType=Reflect and "StatusGP" or "Status",Count=1,UserPin=true,PinStyle="Output"},
  {Name="InChanA",ControlType="Button",ButtonType="Trigger",Count=2,UserPin=true,PinStyle="Both"},
  {Name="InChanB",ControlType="Button",ButtonType="Trigger",Count=3,UserPin=true,PinStyle="Both"},
  {Name="VideoMute",ControlType="Button",ButtonType="Toggle",Count=2,UserPin=true,PinStyle="Both"},
  {Name="AudioMute",ControlType="Button",ButtonType="Toggle",Count=10,UserPin=true,PinStyle="Both"},
  {Name="Mark",ControlType="Button",ButtonType="Trigger",Count=1,UserPin=true,PinStyle="Both"},
  {Name="Record",ControlType="Button",ButtonType="Trigger",IconType="Icon",Icon="Record",IconColor={0,0,0},Count=1,UserPin=true,PinStyle="Both"},
  {Name="IsRecording",ControlType="Indicator",IndicatorType="LED",Count=1,UserPin=true,PinStyle="Output"},
  {Name="Pause",ControlType="Button",ButtonType="Trigger",IconType="Icon",Icon="Pause",Count=1,UserPin=true,PinStyle="Both"},
  {Name="IsPaused",ControlType="Indicator",IndicatorType="LED",Count=1,UserPin=true,PinStyle="Output"},
  {Name="Stop",ControlType="Button",ButtonType="Trigger",IconType="Icon",Icon="Stop",Count=1,UserPin=true,PinStyle="Both"},
  {Name="RecInfo",ControlType="Indicator",IndicatorType="Text",Count=3},
  {Name="TestPatImg",ControlType="Button",ButtonType="Trigger",Count=1},
  {Name="TestPat",ControlType="Text",TextBoxType="ComboBox",Count=1},
  {Name="VidLayout",ControlType="Text",TextBoxType="ComboBox",Count=1},
  {Name="EncLayout",ControlType="Text",TextBoxType="ComboBox",Count=2},
  {Name="StmLayout",ControlType="Text",TextBoxType="ComboBox",Count=2},
  {Name="RefNames",ControlType="Button",ButtonType="Trigger",Count=1,UserPin=true,PinStyle="Input"}
  }
  return ctrls
end

function GetControlLayout(props,ctrls)
  layout   = {}
  graphics = {}
  -- Local Variables
  local CurrentPage = PageNames[props["page_index"].Value]
  Extron=""
  
  -- Color Lookup Table
  local Black     = {0  ,0  ,0  }
  local White     = {255,255,255}
  local BGGray    = {230,230,230}
  local EBlue     = {0  ,73 ,150}
  local Trans     = {0  ,0  ,0  ,0  }
  
  -- Lookup Tables
  Icons={
    "record",
    "pause",
    "stop"
  }
  VidLabel={
    "Channel A",
    "Channel B"
  }
  AudLabel={
    "Analog A",
    "Analog A",
    "Digital A",
    "Digital A",
    "Analog B",
    "Analog B",
    "Digital B",
    "Digital B",
    "Main Out",
    "Main Out"
  }
  AudPrettyNames={
    "Analog A Left",
    "Analog A Right",
    "Digital A Left",
    "Digital A Right",
    "Analog B Left",
    "Analog B Right",
    "Digital B Left",
    "Digital B Right",
    "Main Out Left",
    "Main Out Right"
  }
  ChanBInput={
    "Channel B Input 3",
    "Channel B Input 4",
    "Channel B Input 5"
  }
  
  
  -- Position Functions
  local function GetIPos(qty, rowlen, base, ofs)
    local row,col = (qty-1)//(rowlen),(qty-1)%rowlen
    return {base.x+col*ofs.x,base.y+row*ofs.y}
  end
  
  local function VerticalRows(qty, collen, base, ofs)
    local row,col = (qty-1)%collen,(qty-1)//(collen)
    return {base.x+col*ofs.x,base.y+row*ofs.y}
  end
  
  
  -- Control layout
  if CurrentPage=="Setup" then   -- Control Page
  
    -- Controls
    layout["IPAddress"]={Style="Text",PrettyName="IP Address",Position={75,113},Size={101,18},Color=White,Padding=0}
    layout["Port"]={Style="Text",PrettyName="Device's Port",Position={190,113},Size={101,18},Color=White,Padding=0}
    layout["Password"]={Style="Text",PrettyName="Device's Password",Position={304,113},Size={101,18},Color=White,Padding=0}
    for i=1,4 do
      layout["DevInfo "..i]={Style="Indicator",IndicatorType="Text",PrettyName="Device Information "..i,Position=GetIPos(i,4,{x=29,y=229},{x=116,y=0}),Size={100,18},Color=White,Padding=0}
    end
    for i=1,12 do
      layout["StoInfo "..i]={Style="Indicator",IndicatorType="Text",PrettyName="Storage Information "..i,Position=VerticalRows(i,3,{x=70,y=310},{x=106,y=32}),Size={100,18},Color=White,Padding=0}
    end
    layout["Status"]={Style="Indicator",IndicatorType="Status",PrettyName="Connection Status ",Position={66,438},Size={373,32},Color=White,FontSize=12,Padding=0}
  
    -- Graphics
      -- Group Boxes
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=White,Position={0,0},Size={504,498}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=BGGray,Position={0,0},Size={504,48}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=BGGray,Position={8,73},Size={488,77}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=BGGray,Position={8,175},Size={488,315}})
      -- Headers
    table.insert(graphics,{Type="Header",Text="Connect to Device",FontSize=16,Position={20,81},Size={464,6}})
    table.insert(graphics,{Type="Header",Text="Device Information",FontSize=16,Position={20,191},Size={464,6}})
    table.insert(graphics,{Type="Header",Text="Storage Information",FontSize=16,Position={20,269},Size={464,6}})
    table.insert(graphics,{Type="Header",Text="Connection Status",FontSize=16,Position={20,416},Size={464,6}})
      -- Text
    table.insert(graphics,{Type="Label",Text="Connection Setup",Position={8,49},Size={150,22},Color=EBlue,FontSize=18,Font="Roboto",FontStyle="Bold",HTextAlign="Left"})
    table.insert(graphics,{Type="Label",Text="Device Information",Position={8,153},Size={160,22},Color=EBlue,FontSize=18,Font="Roboto",FontStyle="Bold",HTextAlign="Left"})
    table.insert(graphics,{Type="Label",Text="IP Address",Position={75,96},Size={101,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Port",Position={190,96},Size={101,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Password",Position={304,96},Size={101,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Device Name",Position={29,211},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Device Model",Position={145,211},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Firmware",Position={260,211},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Serial Number",Position={376,211},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Internal",Position={70,293},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Front USB",Position={176,293},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Rear USB",Position={281,293},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="RCP USB",Position={387,293},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Available:",Position={8,310},Size={58,18},FontSize=12,HTextAlign="Right"})
    table.insert(graphics,{Type="Label",Text="Used:",Position={32,373},Size={34,18},FontSize=12,HTextAlign="Right"})
    table.insert(graphics,{Type="Label",Text="Total:",Position={28,342},Size={38,18},FontSize=12,HTextAlign="Right"})
      -- Version Number
    table.insert(graphics,{Type="Label",Text=string.format("Version %s",PluginInfo.Version),Position={433,477},Size={60,12},FontSize=9,HTextAlign="Right"})
      -- Logos
    table.insert(graphics,{Type="Image",Position={173,7},Size={158,35},Image=Extron})
  
  elseif CurrentPage=="Device Control" then
  
    -- Controls
    for i=1,2 do
      layout["InChanA "..i]={Style="Button",ButtonStyle="Trigger",PrettyName="Channel A Inputs~Channel A Input "..i,FontSize=11,Legend="Input "..i,Position=GetIPos(i,1,{x=36,y=122},{x=0,y=26}),Size={81,26}}
      layout["VideoMute "..i]={Style="Button",ButtonStyle="Toggle",PrettyName="Video Mute~"..VidLabel[i],FontSize=11,Legend=VidLabel[i],Position=GetIPos(i,2,{x=36,y=266},{x=0103,y=0}),Size={81,26}}
    end
    for i=1,3 do
      layout["InChanB "..i]={Style="Button",ButtonStyle="Trigger",PrettyName="Channel B Inputs~"..ChanBInput[i],FontSize=11,Legend="Input "..i+2,Position=GetIPos(i,1,{x=139,y=122},{x=0,y=26}),Size={81,26}}
      layout["RecInfo "..i]={Style="Indicator",IndicatorType="Text",PrettyName="Storage Information",Position=GetIPos(i,2,{x=21,y=620},{x=116,y=46}),Size={100,18},Color=White,Padding=0}
    end
    for i=1,10 do
      layout["AudioMute "..i]={Style="Button",ButtonStyle="Toggle",PrettyName="Audio Mute~"..AudPrettyNames[i],FontSize=11,Legend=AudLabel[i],Position=GetIPos(i,2,{x=36,y=338},{x=103,y=26}),Size={81,26}}
    end
    layout["Record"]={Style="Button",ButtonStyle="Trigger",PrettyName="Recording Controls~Record",Position={38,517},Size={40,40}}
    layout["IsRecording"]={Style="None",PrettyName="Recording Controls~Is Recording"}
    layout["Pause"]={Style="Button",ButtonStyle="Trigger",PrettyName="Recording Controls~Pause",Position={78,517},Size={40,40}}
    layout["IsPaused"]={Style="None",PrettyName="Recording Controls~Is Paused"}
    layout["Stop"]={Style="Button",ButtonStyle="Trigger",PrettyName="Recording Controls~Stop",Position={118,517},Size={40,40}}
    layout["Mark"]={Style="Button",ButtonStyle="Trigger",PrettyName="Recording Controls~Mark",Padding=2,FontSize=11,Legend="Mark",Position={178,517},Size={40,40}}
  
  
    -- Graphics
      -- Group Boxes
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=White,Position={0,0},Size={256,708}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=BGGray,Position={0,0},Size={256,48}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=BGGray,Position={8,70},Size={240,630}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=1,CornerRadius=2,Fill=Trans,Position={33,119},Size={87,58}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=1,CornerRadius=2,Fill=Trans,Position={136,119},Size={87,84}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=1,CornerRadius=2,Fill=Trans,Position={33,263},Size={189,32}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=1,CornerRadius=2,Fill=Trans,Position={33,335},Size={189,136}})
  
  
      -- Headers
    table.insert(graphics,{Type="Header",Text="Inputs",FontSize=16,Position={14,86},Size={228,6}})
    table.insert(graphics,{Type="Header",Text="A/V Mute",FontSize=16,Position={14,222},Size={228,6}})
    table.insert(graphics,{Type="Header",Text="Recording",FontSize=16,Position={14,488},Size={228,6}})
    table.insert(graphics,{Type="Header",Text="Recording Information",FontSize=16,Position={14,582},Size={228,6}})
     -- Text
    table.insert(graphics,{Type="Label",Text="Device Control",Position={8,49},Size={139,22},Color=EBlue,FontSize=18,Font="Roboto",FontStyle="Bold",HTextAlign="Left"})
    table.insert(graphics,{Type="Label",Text="Channel A",Position={33,104},Size={87,13},FontSize=12})
    table.insert(graphics,{Type="Label",Text="Channel B",Position={136,104},Size={87,13},FontSize=12})
    table.insert(graphics,{Type="Label",Text="Video",Position={86,246},Size={84,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Audio",Position={86,308},Size={84,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Left Channel",Position={35,320},Size={84,18},FontSize=12})
    table.insert(graphics,{Type="Label",Text="Right Channel",Position={133,320},Size={94,18},FontSize=12})
    table.insert(graphics,{Type="Label",Text="Elapsed Time",Position={21,602},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Time Remaining",Position={132,602},Size={108,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Destination",Position={21,648},Size={100,18},FontSize=14})
      -- Logos
    table.insert(graphics,{Type="Image",Position={49,7},Size={158,35},Image=Extron})
  
  elseif CurrentPage=="Video Configuration" then
  
    -- Controls
    layout["TestPatImg"]={Style="Button",ButtonStyle="Trigger",PrettyName="Test Pattern Image",Position={31,108},Size={191,107}}
    layout["TestPat"]={Style="ComboBox",PrettyName="Test Pattern",Position={63,243},Size={130,18},Color=White,FontSize=12}
    layout["VidLayout"]={Style="ComboBox",PrettyName="Video Layout Preset",Position={63,314},Size={130,18},Color=White,FontSize=12}
    for i=1,2 do
      layout["EncLayout "..i]={Style="ComboBox",PrettyName="Encoder "..i.." Layout Preset",Position=GetIPos(i,2,{x=14,y=362},{x=116,y=0}),Size={113,18},Color=White,FontSize=12}
      layout["StmLayout "..i]={Style="ComboBox",PrettyName="Streaming "..i.." Layout Preset",Position=GetIPos(i,2,{x=14,y=410},{x=116,y=0}),Size={113,18},Color=White,FontSize=12}
    end
    layout["RefNames"]={Style="Button",ButtonStyle="Trigger",PrettyName="Refresh Preset Names",Position={164,439},Size={36,16}}
  
    -- Graphics
      --Group Boxes
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=White,Position={0,0},Size={256,473}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=BGGray,Position={0,0},Size={256,48}})
    table.insert(graphics,{Type="GroupBox",StrokeWidth=0,CornerRadius=0,Fill=BGGray,Position={8,71},Size={240,394}})
      -- Headers
    table.insert(graphics,{Type="Header",Text="Streaming",FontSize=16,Position={14,87},Size={228,6}})
    table.insert(graphics,{Type="Header",Text="Video Presets",FontSize=16,Position={14,279},Size={228,6}})
      -- Text
    table.insert(graphics,{Type="Label",Text="Video Configuration",Position={8,49},Size={172,22},Color=EBlue,FontSize=18,Font="Roboto",FontStyle="Bold",HTextAlign="Left"})
    table.insert(graphics,{Type="Label",Text="Test Pattern",Position={77,225},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Layout",Position={77,296},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Encoder A",Position={25,344},Size={87,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Encoder B",Position={141,344},Size={87,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Streaming A",Position={21,392},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Streaming B",Position={137,392},Size={100,18},FontSize=14})
    table.insert(graphics,{Type="Label",Text="Refresh Names:",Position={57,437},Size={105,18},FontSize=14})
      -- Logos
    table.insert(graphics,{Type="Image",Position={49,7},Size={158,35},Image=Extron})
  end
  return layout, graphics
end


--Start event based logic
if Controls then
  -- Extron SMP 351
  -- by Eric Urbaniak / QSC Boulder
  -- July 2019
  -- Version Notes: Added transport controls feedback 
  -- Notes:
  
  
  rapidjson=require("rapidjson")
  
  -- Control Aliases
  IPAddress=Controls.IPAddress
  Port=Controls.Port
  Password=Controls.Password
  Record=Controls.Record
  Recording=Controls.IsRecording
  Pause=Controls.Pause
  Paused=Controls.IsPaused
  Stop=Controls.Stop
  TestPat=Controls.TestPat
  VidLayout=Controls.VidLayout
  Status=Controls.Status
  TestPatImg=Controls.TestPatImg
  EncLayout=Controls.EncLayout
  StmLayout=Controls.StmLayout
  RefNames=Controls.RefNames
  Mark=Controls.Mark
  
  
  -- Sockets
  SMP=TcpSocket.New()
  
  
  -- Timers
  Heartbeat=Timer.New()
  RecTimer=Timer.New()
  CmdQTimer=Timer.New()
  
  
  -- Lookup Tables
  status_state={OK=0,COMPROMISED=1,FAULT=2,NOTPRESENT=3,MISSING=4,INITIALIZING=5}
  VidLayOpt={}
  RxData={}
  RecTimes={}
  AudMuteData={}
  VidMuteData={}
  CmdQ={}
  ParseQ={}
  EncLayOpt,StmLayOpt={},{}
  EncLayOpt2=EncLayOpt
  StmLayOpt2=StmLayOpt
  TestPatOpt={
    "None",
    "Color Bars",
    "Aspect Ratio 1.33",
    "Aspect Ratio 1.78",
    "Aspect Ratio 1.85",
    "Crop","Pulse",
    "Timestamp",
    "Universal OSD"
  }
  SelTestPat={
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9Ik5vbmUiPjxyZWN0IGlkPSJCRyIgd2lkdGg9IjE5MSIgaGVpZ2h0PSIxMDciLz48dGV4dCB0cmFuc2Zvcm09InRyYW5zbGF0ZSg3My4zNyA1Ny4xMSkiIHN0eWxlPSJmb250LXNpemU6MTJweDtmaWxsOiNmZmY7Zm9udC1mYW1pbHk6TXlyaWFkUHJvLVJlZ3VsYXIsIE15cmlhZCBQcm8iPiZsdDtOT05FJmd0OzwvdGV4dD48L2c+PC9zdmc+"},
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9IkNvbG9yX0JhcnMiIGRhdGEtbmFtZT0iQ29sb3IgQmFycyI+PHJlY3Qgd2lkdGg9IjI0IiBoZWlnaHQ9IjUzIiBzdHlsZT0iZmlsbDojZmZmIi8+PHJlY3QgeD0iMjQiIHdpZHRoPSIyNCIgaGVpZ2h0PSI1MyIgc3R5bGU9ImZpbGw6I2VmZTkxOSIvPjxyZWN0IHg9IjQ4IiB3aWR0aD0iMjQiIGhlaWdodD0iNTMiIHN0eWxlPSJmaWxsOiM2ZmNjZGIiLz48cmVjdCB4PSI3MiIgd2lkdGg9IjI0IiBoZWlnaHQ9IjUzIiBzdHlsZT0iZmlsbDojNmNiZTQ1Ii8+PHJlY3QgeD0iOTYiIHdpZHRoPSIyNCIgaGVpZ2h0PSI1MyIgc3R5bGU9ImZpbGw6I2I5NTA5ZSIvPjxyZWN0IHg9IjEyMCIgd2lkdGg9IjI0IiBoZWlnaHQ9IjUzIiBzdHlsZT0iZmlsbDojZWIyMzI5Ii8+PHJlY3QgeD0iMTQ0IiB3aWR0aD0iMjQiIGhlaWdodD0iNTMiIHN0eWxlPSJmaWxsOiMzODU0YTQiLz48cmVjdCB4PSIxNjgiIHdpZHRoPSIyMyIgaGVpZ2h0PSI1MyIgc3R5bGU9ImZpbGw6IzA3MDkwOSIvPjxyZWN0IHg9IjE2OCIgeT0iNTMiIHdpZHRoPSIyMyIgaGVpZ2h0PSI1NCIgc3R5bGU9ImZpbGw6I2ZmZiIvPjxyZWN0IHk9IjUzIiB3aWR0aD0iMjQiIGhlaWdodD0iNTQiIHN0eWxlPSJmaWxsOiMwNzA5MDkiLz48cmVjdCB4PSIyNCIgeT0iNTMiIHdpZHRoPSIyNCIgaGVpZ2h0PSI1NCIgc3R5bGU9ImZpbGw6IzM4NTRhNCIvPjxyZWN0IHg9IjQ4IiB5PSI1MyIgd2lkdGg9IjI0IiBoZWlnaHQ9IjU0IiBzdHlsZT0iZmlsbDojZWIyMzI5Ii8+PHJlY3QgeD0iNzIiIHk9IjUzIiB3aWR0aD0iMjQiIGhlaWdodD0iNTQiIHN0eWxlPSJmaWxsOiNiOTUwOWUiLz48cmVjdCB4PSI5NiIgeT0iNTMiIHdpZHRoPSIyNCIgaGVpZ2h0PSI1NCIgc3R5bGU9ImZpbGw6IzZjYmU0NSIvPjxyZWN0IHg9IjEyMCIgeT0iNTMiIHdpZHRoPSIyNCIgaGVpZ2h0PSI1NCIgc3R5bGU9ImZpbGw6IzZmY2NkYiIvPjxyZWN0IHg9IjE0NCIgeT0iNTMiIHdpZHRoPSIyNCIgaGVpZ2h0PSI1NCIgc3R5bGU9ImZpbGw6I2VmZTkxOSIvPjwvZz48L3N2Zz4="},
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9IkFSXzEuMzMiIGRhdGEtbmFtZT0iQVIgMS4zMyI+PHJlY3QgaWQ9IkJHIiB3aWR0aD0iMTkxIiBoZWlnaHQ9IjEwNyIvPjxyZWN0IHg9IjI2LjUiIHk9IjIuNSIgd2lkdGg9IjEzNyIgaGVpZ2h0PSIxMDMiIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiNmZmY7c3Ryb2tlLW1pdGVybGltaXQ6MTAiLz48L2c+PC9zdmc+"},
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9IkFSXzEuNzgiIGRhdGEtbmFtZT0iQVIgMS43OCI+PHJlY3QgaWQ9IkJHIiB3aWR0aD0iMTkxIiBoZWlnaHQ9IjEwNyIvPjxyZWN0IHg9IjQuNSIgeT0iMTAuNTYiIHdpZHRoPSIxODIiIGhlaWdodD0iODUuODgiIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiNmZmY7c3Ryb2tlLW1pdGVybGltaXQ6MTAiLz48L2c+PC9zdmc+"},
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9IkFSXzEuODUiIGRhdGEtbmFtZT0iQVIgMS44NSI+PHJlY3QgaWQ9IkJHIiB3aWR0aD0iMTkxIiBoZWlnaHQ9IjEwNyIvPjxyZWN0IHg9IjUuNSIgeT0iMjAuNDQiIHdpZHRoPSIxODAiIGhlaWdodD0iNjYuMTMiIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiNmZmY7c3Ryb2tlLW1pdGVybGltaXQ6MTAiLz48L2c+PC9zdmc+"},
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9IkNyb3AiPjxyZWN0IGlkPSJCRyIgd2lkdGg9IjE5MSIgaGVpZ2h0PSIxMDciLz48cmVjdCB4PSIyLjUiIHk9IjIuNSIgd2lkdGg9IjE4NiIgaGVpZ2h0PSIxMDIiIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiNmZmY7c3Ryb2tlLW1pdGVybGltaXQ6MTAiLz48L2c+PC9zdmc+"},
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9IlB1bHNlIj48cmVjdCBpZD0iQkciIHdpZHRoPSIxOTEiIGhlaWdodD0iMTA3Ii8+PHRleHQgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoNTYuNTIgNTcuMTEpIiBzdHlsZT0iZm9udC1zaXplOjEycHg7ZmlsbDojZmZmO2ZvbnQtZmFtaWx5Ok15cmlhZFByby1SZWd1bGFyLCBNeXJpYWQgUHJvIj4mbHQ7PHRzcGFuIHg9IjcuMTUiIHk9IjAiIHN0eWxlPSJsZXR0ZXItc3BhY2luZzotMC4wMjc5OTQ3OTE2NjY2NjY2NjhlbSI+QTwvdHNwYW4+PHRzcGFuIHg9IjE0LjE2IiB5PSIwIj5VRElPPC90c3Bhbj48dHNwYW4geD0iNDEuMDUiIHk9IjAiIHN0eWxlPSJsZXR0ZXItc3BhY2luZzotMC4wNDA5NzQ5MzQ4OTU4MzMzMzZlbSI+IDwvdHNwYW4+PHRzcGFuIHg9IjQzLjEiIHk9IjAiIHN0eWxlPSJsZXR0ZXItc3BhY2luZzotMC4wMjcwMTgyMjkxNjY2NjY2NjhlbSI+VDwvdHNwYW4+PHRzcGFuIHg9IjQ4Ljc0IiB5PSIwIj5PTkUmZ3Q7PC90c3Bhbj48L3RleHQ+PC9nPjwvc3ZnPg=="},
    {DrawChrome=false,IconData="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VGVzdCBQYXR0ZXJuczwvdGl0bGU+PGcgaWQ9IlRpbWVzdGFtcCI+PHJlY3QgaWQ9IkJHIiB3aWR0aD0iMTkxIiBoZWlnaHQ9IjEwNyIvPjx0ZXh0IHRyYW5zZm9ybT0idHJhbnNsYXRlKDMuMjcgMTAuOSkiIHN0eWxlPSJmb250LXNpemU6MTBweDtmaWxsOiNmZmY7Zm9udC1mYW1pbHk6Q29uc29sYXMiPkZyaSBBcHIgMTggMTE6MTA6MzI8L3RleHQ+PC9nPjwvc3ZnPg=="},
    {DrawChrome=false,IconData="PHN2ZyBpZD0iVW5pdmVyc2FsX09TRCIgZGF0YS1uYW1lPSJVbml2ZXJzYWwgT1NEIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxOTEgMTA3Ij48dGl0bGU+VFAwOTwvdGl0bGU+PHJlY3QgaWQ9IkJHIiB3aWR0aD0iMTkxIiBoZWlnaHQ9IjEwNyIvPjx0ZXh0IHRyYW5zZm9ybT0idHJhbnNsYXRlKDQgMTAuOSkiIHN0eWxlPSJmb250LXNpemU6MTBweDtmaWxsOiNmZmY7Zm9udC1mYW1pbHk6Q29uc29sYXMiPlNBTVBMRSBURVhUPC90ZXh0Pjx0ZXh0IHRyYW5zZm9ybT0idHJhbnNsYXRlKDIzLjQ1IDYxLjMyKSIgc3R5bGU9ImZvbnQtc2l6ZToxMnB4O2ZpbGw6I2ZmZjtmb250LWZhbWlseTpNeXJpYWRQcm8tUmVndWxhciwgTXlyaWFkIFBybyI+Jmx0Ozx0c3BhbiB4PSI3LjE1IiB5PSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6Q2FsaWJyaSI+Q288L3RzcGFuPjx0c3BhbiB4PSIxOS44OCIgeT0iMCIgc3R5bGU9ImZvbnQtZmFtaWx5OkNhbGlicmk7bGV0dGVyLXNwYWNpbmc6LTAuMDA1ODU5Mzc1ZW0iPm48L3RzcGFuPjx0c3BhbiB4PSIyNi4xMSIgeT0iMCIgc3R5bGU9ImZvbnQtZmFtaWx5OkNhbGlicmkiPmZpZ3U8L3RzcGFuPjx0c3BhbiB4PSI0NC40MiIgeT0iMCIgc3R5bGU9ImZvbnQtZmFtaWx5OkNhbGlicmk7bGV0dGVyLXNwYWNpbmc6LTAuMDEzMTgzNTkzNzVlbSI+cjwvdHNwYW4+PHRzcGFuIHg9IjQ4LjQ0IiB5PSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6Q2FsaWJyaSI+ZSB1c2luZyA8L3RzcGFuPjx0c3BhbiB4PSI4NS41NCIgeT0iMCIgc3R5bGU9ImZvbnQtZmFtaWx5OkNhbGlicmk7bGV0dGVyLXNwYWNpbmc6LTAuMDA4Nzg5MDYyNWVtIj53PC90c3Bhbj48dHNwYW4geD0iOTQuMDIiIHk9IjAiIHN0eWxlPSJmb250LWZhbWlseTpDYWxpYnJpIj5lYiB1dGlsaXR5PC90c3Bhbj48dHNwYW4geD0iMTM2Ljk1IiB5PSIwIj4mZ3Q7PC90c3Bhbj48L3RleHQ+PC9zdmc+"},
  }
  MuteCmd={
    "40000",
    "40001",
    "40002",
    "40003",
    "40004",
    "40005",
    "40006",
    "40007",
    "60000",
    "60001"
  }
  TransCtrls={
    Record,
    Pause,
    Stop
  }
  TransColor={
    "Red",
    "LightGray",
    "LightGray"
  }
  QueryCmds={
    DevInfo={
      "WCN|",  --Device Name
      "1I",  --Device Model
      "Q", --Firmware Version
      "99I"  --Serial Number
    },
    StoInfo={
      "55I", --Internal Storage
      "56I",  --Front USB
      "57I",  --Rear USB
      "58I"  --RCP USB
    },
    RecInfo={
      "37I",  --Destination
      "36I",  --Time Remaining
      "35I"   --Elapsed Time
    }
  }
  
  
  -- Global Variables
  TestPat.Choices=TestPatOpt
  VidLayout.Choices=VidLayOpt
  HBTime=5
  RecTime=1
  QTime=.1
  LoginCnt=0
  SMP.ReadTimeout=5
  SMP.ReconnectTimeout=5
  SMP.WriteTimeout=5
  TNCon=false
  recTimer=false
  VidLayout.String="Select Preset"
  for i=1,2 do
    EncLayout[i].String="Select Preset"
    StmLayout[i].String="Select Preset"
  end
  
  
  -- Functions
  function Init()
    DevIP=IPAddress.String
    DevPort=Port.Value
    DevPass=Password.String
    if DevIP=="" then ReportStatus("MISSING", "No IP Address") end
    CmdQTimer:Start(QTime)
    Connect()
  end
  
  function TablePretty(tbl,sort)
    return rapidjson.encode(tbl,{pretty=true,sort_keys=sort})
  end
  
  function ReportStatus(state,msg)
    Status.Value=status_state[state]
    Status.String=msg
  end
  
  function Connect()
    if DevIP~="" and DevPort~="" then
      SMP:Connect(DevIP,math.floor(DevPort))
    end 
  end
  
  function IsConnected()
    return SMP.IsConnected
  end
  
  function Disconnected()
    if not IsConnected() then
      Heartbeat:Stop()
      RecTimer:Stop()
      recTimer=false
      VidLayOpt,RxData,RecTimes,AudMuteData,VidMuteData,CmdQ,ParseQ,EncLayOpt,StmLayOpt,IntStoData={},{},{},{},{},{},{},{},{},{}
      EncLayOpt2=EncLayOpt
      StmLayOpt2=StmLayOpt
      for i=1,2 do Controls.VideoMute[i].Color="Gray" Controls.InChanA[i].Color="Gray" end
      for i=1,3 do Controls.RecInfo[i].String="" Controls.InChanB[i].Color="Gray" TransCtrls[i].Color="Gray" end
      for i=1,4 do Controls.DevInfo[i].String="" end
      for i=1,10 do Controls.AudioMute[i].Color="Gray" end 
      for i=1,12 do Controls.StoInfo[i].String="" end
    end
  end
  
  function Send(cmd)
    if cmd~=nil then
      SMP:Write(cmd)
    else
      SMP:Write(CmdQ[1][1].."\r")
      table.insert(ParseQ,CmdQ[1])
      table.remove(CmdQ,1)
    end 
  end
  
  function SendQ(cmd,cmdtype)
    if IsConnected() then
      if cmdtype~="PollTime" then
        table.insert(CmdQ,{cmd,cmdtype})
      else
        table.insert(CmdQ,1,{cmd,cmdtype})
      end
    end
  end
  
    -- Polling functions
  function GetLayName()
    for i=1,16 do
      SendQ("W7*"..i.."PNAM|","LayName")
    end
    GetEncName()
  end
  
  function GetEncName()
    for i=1,32 do
      SendQ("W4*"..i.."PNAM|","EncName")
    end
    GetStmName()
  end
  
  function GetStmName()
    for i=1,32 do
      SendQ("W3*"..i.."PNAM|","StmName")
    end
    PollDevice()
    Heartbeat:Start(HBTime)
  end
  
  function PollDevice()
    GetDevInfo() 
  end
  
  function GetDevInfo()
    for i=1,4 do
      if not SentCmd then
        SendQ(QueryCmds.DevInfo[i],"PollDev")
      end
    end
    Timer.CallAfter(GetStoInfo,.5)
  end
  
  function GetStoInfo()
    for i=1,4 do
      if not SentCmd then
        SendQ(QueryCmds.StoInfo[i],"PollDev")
      end
    end
    Timer.CallAfter(GetTestPat,.5)
  end
  
  function GetRecInfo()
    for i=1,3 do
      if not SentCmd then
        SendQ(QueryCmds.RecInfo[i],"PollTime")
      end
    end
  end
  
  function GetTestPat()
    SendQ("WTEST|","PollDev")
    Timer.CallAfter(GetTransCtrl,.5)  
  end
  
  function GetTransCtrl()
    SendQ("WYRCDR|","PollDev")
    Timer.CallAfter(GetInputs,.5)
  end
  
  function GetInputs()
    for i=1,2 do
      SendQ(i.."!","PollInputs")
    end
    Timer.CallAfter(GetAudMute,.5)
  end
  
  function GetAudMute()
    for i=1,10 do
      SendQ("WM"..MuteCmd[i].."AU|","PollAudMute")
    end
    Timer.CallAfter(GetVidMute,.5)
  end
  
  function GetVidMute()
    for i=1,2 do 
      SendQ("0"..i.."B","PollVidMute")  
    end
  end
  
    -- Set returned data 
  function SetDevData()
    
    -- Set Device Information section
    for i=1,4 do
      Controls.DevInfo[i].String=RxData[i]
    end
    
    -- Process data for Internal Storage Information section
    IntStoData={}
    if RxData[5]~="N/A" then
      local fdata=string.gsub(RxData[5],"^%w(.-)%*","")
      for i=1,3 do
        local astkpos=string.find(fdata,"%*")
        if astkpos~=nil then
          val=string.sub(fdata,"1",astkpos-1)
          fdata=string.gsub(fdata,"^.(.-)%*","")
          table.insert(IntStoData,val)
        end     
      end 
    else
      for i=1,3 do
        local val="N/A"
        table.insert(IntStoData,val)
      end 
    end
    
    -- Process data for Front USB Storage Information section
    if RxData[6]~="N/A" then
      local fdata=string.gsub(RxData[6],"^%w(.-)%*","")
      for i=1,3 do
        local astkpos=string.find(fdata,"%*")
        if astkpos~=nil then
          val=string.sub(fdata,"1",astkpos-1)
          fdata=string.gsub(fdata,"^.(.-)%*","")
          table.insert(IntStoData,val)
        end     
      end 
    else
      for i=1,3 do
        local val="N/A"
        table.insert(IntStoData,val)
      end 
    end
    
    -- Process data for Rear USB Storage Information section
    if RxData[7]~="N/A" then
      local fdata=string.gsub(RxData[7],"^%w(.-)%*","")
      for i=1,3 do
        local astkpos=string.find(fdata,"%*")
        if astkpos~=nil then
          val=string.sub(fdata,"1",astkpos-1)
          fdata=string.gsub(fdata,"^.(.-)%*","")
          table.insert(IntStoData,val)
        end     
      end 
    else
      for i=1,3 do
        local val="N/A"
        table.insert(IntStoData,val)
      end 
    end
    
    -- Process data for RCP USB Storage Information section
    if RxData[8]~="N/A" then
      local fdata=string.gsub(RxData[8],"^%w(.-)%*","")
      for i=1,3 do
        local astkpos=string.find(fdata,"%*")
        if astkpos~=nil then
          val=string.sub(fdata,"1",astkpos-1)
          fdata=string.gsub(fdata,"^.(.-)%*","")
          table.insert(IntStoData,val)
        end      
      end 
    else
      for i=1,3 do
        local val="N/A"
        table.insert(IntStoData,val)
      end 
    end
    
    -- Set Storage Information section
    for i=1,12 do
      if IntStoData[i]==nil then IntStoData[i]="" end 
      Controls.StoInfo[i].String=IntStoData[i]
    end
    
    --[[
    -- Set Recording Information section
    for i=1,3 do
      local d=i+8
      if d>11 then d=9 end
      if i==2 then 
        local fdata=string.gsub(RxData[10],"internal ","")
        local fdata=string.gsub(fdata,"%*(.-)%d$","")
        table.remove(RxData,10)
        table.insert(RxData,10,fdata)
      elseif i==3 then
        local fdata=string.gsub(RxData[11],"%*(.-)%g$","")
        table.remove(RxData,11)
        table.insert(RxData,11,fdata)
      end
      Controls.RecInfo[i].String=RxData[d]
    end]]
    
    -- Set Test Pattern
    if type(tonumber(RxData[9]))=="number" then
      TestPat.String=TestPatOpt[math.floor(RxData[9])+1]
      DisplayTestPat(math.floor(RxData[9])+1)
    end
    
    -- Set Transport Control feedback
    if type(tonumber(RxData[10]))=="number" then
      tcdata=math.floor(RxData[10])
      if tcdata==0 then tcdata=3 end
      for i=1,3 do
        if i==tcdata then
          TransCtrls[i].Color=TransColor[i]
          if recTimer==false then
            RecTimer:Start(RecTime)
          end
        else
          TransCtrls[i].Color="Gray"
        end
      end
    end
    Recording.Boolean=Record.Color=="Red" and true or false
    Paused.Boolean=Pause.Color=="LightGray" and true or false
  end
  
  function SetRecInfo(RecTimes)
    for i=1,3 do
      if i==2 then 
        local fdata=string.gsub(RecTimes[2],"internal ","")
        local fdata=string.gsub(fdata,"%*(.-)%d$","")
        table.remove(RecTimes,2)
        table.insert(RecTimes,2,fdata)
      elseif i==3 then
        local fdata=string.gsub(RecTimes[3],"%*(.-)%g$","")
        table.remove(RecTimes,3)
        table.insert(RecTimes,3,fdata)
      end
      Controls.RecInfo[i].String=RecTimes[i]
    end
  end
  
  function SetAudMute()
    for i=1,10 do
      Controls.AudioMute[i].Color=AudMuteData[i]
    end
  end
  
  function SetVidMute()
    for i=1,2 do
      Controls.VideoMute[i].Color=VidMuteData[i]
    end
  end
  
  function DisplayTestPat(sel)
    TestPatImg.Legend=rapidjson.encode(SelTestPat[sel])
  end
  
    -- Telent connection functions
  function TelnetAuth()
    LoginCnt=LoginCnt+1
    Send(DevPass.."\r")
    if LoginCnt>3 then 
      ReportStatus("FAULT","Check Password")
    end  
  end
  
  function TelnetCon()
    ReportStatus("OK","")
    LoginCnt=0
    TNCon=true
    GetRecInfo()
    GetLayName()
  end
  
    -- Parser
  function ParseResponse(Rxdata)
    if #ParseQ ~= nil then
      if ParseQ[1][2]=="LayName" then
        if Rxdata=="E13" then Rxdata="[unassigned]" end
        table.insert(VidLayOpt,Rxdata)
        VidLayout.Choices=VidLayOpt
      elseif ParseQ[1][2]=="EncName" then
        if Rxdata=="E13" then Rxdata="[unassigned]" end
        table.insert(EncLayOpt,Rxdata)
        EncLayout[1].Choices=EncLayOpt
        EncLayout[2].Choices=EncLayOpt
      elseif ParseQ[1][2]=="StmName" then
        if Rxdata=="null" then Rxdata="[unassigned]" end
        table.insert(StmLayOpt,Rxdata)
        StmLayout[1].Choices=StmLayOpt
        StmLayout[2].Choices=StmLayOpt
      elseif ParseQ[1][2]=="PollDev" then
        table.insert(RxData,Rxdata)
        if #RxData==10 then
          SetDevData(RxData)
          RxData={}
        end
      elseif ParseQ[1][2]=="PollTime" then
        table.insert(RecTimes,Rxdata)
        if #RecTimes==3 then
          SetRecInfo(RecTimes)
          RecTimes={}
        end
      elseif ParseQ[1][2]=="SentCmd" then
        if Rxdata=="E10" then
          --print("E10: Unrecognized command")
        elseif Rxdata=="E13" then
          --print("E13: Invalid Parameter")
        elseif Rxdata=="E14" then
          --print("E14: Not valid for this configuration")
        elseif Rxdata=="E17" then
          --print("E17: Invalid command for signal type")
        elseif Rxdata=="E18" then
          --print("E18: System timed out")
        elseif Rxdata=="E22" then
          --print("E22: Busy")
        elseif Rxdata=="E24" then
          --print("E24: Privilege violation")
        elseif Rxdata=="E26" then
          --print("E26: Maximum connections exceeded")
        elseif Rxdata=="E28" then
          --print("E28: Bad file name or file not found")
        end
      elseif ParseQ[1][2]=="PollInputs" and type(tonumber(Rxdata))=="number" then
        In=math.floor(Rxdata)
        if In<3 then 
          for i=1,2 do
            if i==In then
              Controls.InChanA[i].Color="White"
            else
              Controls.InChanA[i].Color="Gray"
            end
          end
        else
          for i=3,5 do
            if i==In then
              Controls.InChanB[i-2].Color="White"
            else
              Controls.InChanB[i-2].Color="Gray"
            end
          end
        end
      elseif ParseQ[1][2]=="PollAudMute" and type(tonumber(Rxdata))=="number" then
        if tonumber(Rxdata)==1 then 
          astate="White"
        else
          astate="Gray"
        end
        table.insert(AudMuteData,astate)
        if #AudMuteData>9 then
          SetAudMute(AudMuteData)
          AudMuteData={}  
        end
      elseif ParseQ[1][2]=="PollVidMute" and type(tonumber(Rxdata))=="number" then
        if tonumber(Rxdata)==1 then 
          vstate="White"
        else
          vstate="Gray"
        end
        table.insert(VidMuteData,vstate)
        if #VidMuteData>1 then
          SetVidMute(VidMuteData)
          VidMuteData={}
        end 
      else
      end
      table.remove(ParseQ,1)
      if #ParseQ > 1 then
      elseif #ParseQ==0 then
      end
    end
  end
  
  
  --Event Handlers
    -- Setup Page
  IPAddress.EventHandler=function()
    DevIP=IPAddress.String
    Connect()
  end
  
  Port.EventHandler=function()
    DevPort=Port.Value
    Connect()
  end
  
  Password.EventHandler=function()
    DevPass=Password.String
    LoginCnt=0
    Connect()
  end
  
    -- Device Control Page
  for i=1,2 do 
    Controls.InChanA[i].EventHandler=function()
      SendQ(i.."*1!","SentCmd")
    end
  end
  
  for i=1,3 do 
    Controls.InChanB[i].EventHandler=function()
      local cmd=i+2
      SendQ(cmd.."*2!","SentCmd")
    end
  end
  
  for i=1,2 do
    Controls.VideoMute[i].EventHandler=function()
      if Controls.VideoMute[i].Color=="Gray" then
        SendQ(i.."*1B","SentCmd")
      else
        SendQ(i.."*0B","SentCmd")
      end
    end
  end
  
  for i=1,10 do 
    Controls.AudioMute[i].EventHandler=function()
      if Controls.AudioMute[i].Color=="Gray" then
        if i<9 then 
          local cmd=i-1
          SendQ("WM4000"..cmd.."*1AU|","SentCmd")
        else
          local cmd=i-9
          SendQ("WM6000"..cmd.."*1AU|","SentCmd")
        end
      else
        if i<9 then 
          local cmd=i-1
          SendQ("WM4000"..cmd.."*0AU|","SentCmd")
        else
          local cmd=i-9
          SendQ("WM6000"..cmd.."*0AU|","SentCmd")
        end
      end
    end
  end
  
  Mark.EventHandler=function()
    SendQ("WBRCDR|","SentCmd")
  end
  
  Record.EventHandler=function()
    SendQ("WY1RCDR|","SentCmd")
    RecTimer:Start(RecTime)
    recTimer=true
  end
  
  Pause.EventHandler=function()
    SendQ("WY2RCDR|","SentCmd")
    RecTimer:Stop()
    recTimer=false
  end
  
  Stop.EventHandler=function()
    SendQ("WY0RCDR|","SentCmd")
    RecTimer:Stop()
    recTimer=false
  end
  
    -- Video Configuration
  TestPat.EventHandler=function()
    for i=1,9 do
      SelPat=string.find(TestPatOpt[i],TestPat.String)
      if SelPat then
        local cmd=i-1
        SendQ("W0"..cmd.."TEST|","SentCmd")
        --DisplayTestPat(i)
      end
    end
  end
  
  VidLayout.EventHandler=function()
    for i,v in ipairs(VidLayOpt) do
      if string.match(v,VidLayout.String) then
        VidLaySel=i
      end 
    end
    SendQ("7*"..VidLaySel..".","SentCmd")
  end
  
  for i=1,2 do
    Controls.EncLayout[i].EventHandler=function()
      for ii,v in ipairs(EncLayOpt) do
        if string.match(v,Controls.EncLayout[i].String) then
          EncLaySel=ii
        end 
      end
      SendQ("4*"..i.."*"..EncLaySel..".","SentCmd") 
    end
  end
  
  for i=1,2 do
    Controls.StmLayout[i].EventHandler=function()
      for ii,v in ipairs(StmLayOpt) do
        if string.match(v,Controls.StmLayout[i].String) then
          StmLaySel=ii
        end
      end
      SendQ("3*"..i.."*"..StmLaySel..".","SentCmd") 
    end
  end
  
  RefNames.EventHandler=function()
    Heartbeat:Stop()
    VidLayOpt={}
    EncLayOpt={}
    StmLayOpt={}
    GetLayName()
  end
  
    -- Sockets
  SMP.EventHandler=function(sock,evt)
    if evt==TcpSocket.Events.Connected then
      TNCon=false
    elseif evt==TcpSocket.Events.Closed then
      ReportStatus("FAULT","Socket Closed")
      Disconnected()
      TNCon=false
    elseif evt==TcpSocket.Events.Error then
      ReportStatus("FAULT","Socket Error")
      Disconnected()
      TNCon=false
    elseif evt==TcpSocket.Events.Timeout then
      ReportStatus("FAULT","Socket Timeout")
      Disconnected()
      TNCon=false
    elseif evt==TcpSocket.Events.Reconnect then
      ReportStatus("FAULT","Socket Reconnecting")
      Disconnected()
      TNCon=false
    elseif evt==TcpSocket.Events.Data then
      if not TNCon then
        Rxdata=sock:Read(sock.BufferLength)
        if string.find(Rxdata,"Password:") then
          TelnetAuth() 
        end
        if string.find(Rxdata,"Login") then
          TelnetCon()  
        end
      else
        Rxdata=sock:ReadLine(TcpSocket.EOL.CrLf)
        ParseResponse(Rxdata)
      end
    end
  end
  
    -- Timers
  Heartbeat.EventHandler=function()
    PollDevice()
  end
  
  RecTimer.EventHandler=function()
    GetRecInfo()
  end
  
  CmdQTimer.EventHandler=function()
    if #CmdQ ~= 0 then
      Send()
    end  
  end
  
  
  -- Called on start
  Init()
end