--[[ BEGIN DIGITAL SIGNATURE
Yp5pUvuyeHk50qqrZGRCo939jC0u9/HqFOFqYkPjN3sGTNZ74gtvaO5FIQpuEVDdHuAcaaSFUUpvqwvajvdIalPph7D/NrEuWP2owN+QQ3esDT5ksenhnr8nyxzedvk+DlFk2SwsrUsuO/132oV2s5HJH7D0IIjMTM3oCD67lNZ3Ac5nSCprbaUph2uOemmVkwxAKjW7x/d3A43uaXozkn7ROiitGLDadcNGOcEI9yq43r5PpHfBI88mGUgr4qz/d2VNiwVdZGmEClTpQyA2nQ5SnYtYKWebp0RkOjxj3FDXByqp0yT5AGy9Js1SO+TQ2VnwQ7yEaf/j8CaCEA7KtQ==
END DIGITAL SIGNATURE ]]
-- Base Plugin
-- by QSC
-- Month 20YY

PluginInfo = {
    Name = "Enterprise Manager~VISCA~VISCA Control Server v1.1",
    Version = "1.1",
    BuildVersion = "1.1.0.0",
    Id = "caf1fd83-a3cd-4e25-b5d4-bc75399e75bc",
    Author = "QSC",
    Description = "A VISCA control server for integrating camera control endpoints, such as joysticks, with Q-SYS cameras.",
    Manufacturer = "Sony",
    Model = "VISCA",
    IsManaged = true,
    Type = Reflect and Reflect.Types.ControlIO or 0
}

function GetColor(props)
  return { 59, 146, 182 }
end

function GetPrettyName(props)
  return string.format("VISCA Control Server %s", PluginInfo.Version)
end

pagenames = {"Setup", "Controls", "Advanced"}

function GetPages(props)
  local pages = {}
  for ix,name in ipairs(pagenames) do
    table.insert(pages,{name = pagenames[ix]})
  end
  return pages
end

--[=[]]
function GetModel(props) --optional function to define model if plugin supports more than one model
  local model = {}
  --[[ Model File Contents ]]
  return model
end
--]=]

function GetProperties()
  local props = {}
  table.insert(props,{
    Name    = "Debug Print",
    Type    = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value   = "None"})
  
    table.insert(props,{
      Name    = "Control Mode",
      Type    = "enum",
      Choices = {"TCP", "UDP", "Serial"},
      Value   = "TCP"})
  return props
end

function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

function GetPins(props)  --optional function to define pins on the plugin
  pins={}
  if props["Control Mode"].Value == "Serial" then
    table.insert(pins,{
      Name = "Serial 1",
      Direction = "input",
      Domain = "serial"
    })
  end
  return pins
end

function GetControls(props)
  local controls = {}
  table.insert(controls,{
    Name          = "Status",
    ControlType   = "Indicator",
    IndicatorType = Reflect and "StatusGP" or "Status",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "Port",
    ControlType   = "Knob",
    ControlUnit   = "Integer",
    Min           = 0,
    Max           = 65535,
    UserPin       = true,
    PinStyle      = "Input",
    Count         = 1
  })
  table.insert(controls,{
    Name          = "NIC",
    ControlType   = "Text",
    Count         = 1,
    UserPin       = false,
    PinStyle      = "None"
  })
  table.insert(controls,{
    Name          = "Baud",
    ControlType   = "Text",
    Count         = 1,
    UserPin       = true,
    PinStyle      = "Input"
  })
  table.insert(controls,{
    Name          = "DataBits",
    ControlType   = "Text",
    Count         = 1,
    UserPin       = true,
    PinStyle      = "Input"
  })
  table.insert(controls,{
    Name          = "Parity",
    ControlType   = "Text",
    Count         = 1,
    UserPin       = true,
    PinStyle      = "Input"
  })
  table.insert(controls, {
    Name = "CameraComponent",
    ControlType = "Text",
    Count = 6,
    PinStyle = "None",
    UserPin = true,
  })
  table.insert(controls,{
    Name          = "CameraSelect",
    ControlType   = "Button",
    ButtonType    = "Toggle",
    Count         = 6,
    UserPin       = true,
    PinStyle      = "Input"
  })
  table.insert(controls,{
    Name          = "PanSpeed",
    ControlType   = "Knob",
    ControlUnit   = "Float",
    Min           = .001,
    Max           = 1.00,
    UserPin       = true,
    PinStyle      = "Output",
    Count         = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "TiltSpeed",
    ControlType   = "Knob",
    ControlUnit   = "Float",
    Min           = .001,
    Max           = 1.00,
    UserPin       = true,
    PinStyle      = "Output",
    Count         = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "ZoomSpeed",
    ControlType   = "Knob",
    ControlUnit   = "Float",
    Min           = .001,
    Max           = 1.00,
    UserPin       = true,
    PinStyle      = "Output",
    Count         = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "PtzCenter",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "TiltUp",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "TiltDown",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "PanLeft",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "PanRight",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "PanLeftTiltUp",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "PanRightTiltUp",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "PanLeftTiltDown",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "PanRightTiltDown",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "ZoomIn",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "ZoomOut",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "FocusIn",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "FocusOut",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "FocusAuto",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name = "WhiteBalanceMode",
    ControlType = "Text",
    PinStyle = "Output",
    UserPin = true,
    Count = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "Brightness",
    ControlType   = "Knob",
    ControlUnit   = "Integer",
    Min           = 1,
    Max           = 20,
    UserPin       = true,
    PinStyle      = "Output",
    Count         = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "WhiteBalanceRed",
    ControlType   = "Knob",
    ControlUnit   = "Integer",
    Min           = 1,
    Max           = 5000,
    UserPin       = true,
    PinStyle      = "Output",
    Count         = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "WhiteBalanceBlue",
    ControlType   = "Knob",
    ControlUnit   = "Integer",
    Min           = 1,
    Max           = 5000,
    UserPin       = true,
    PinStyle      = "Output",
    Count         = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "WhiteBalanceAuto",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name = "ExposureMode",
    ControlType = "Text",
    PinStyle = "Output",
    UserPin = true,
    Count = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name = "ExposureShutter",
    ControlType = "Text",
    PinStyle = "Output",
    UserPin = true,
    Count = 1, 
    IsReadOnly = true 
  })
  table.insert(controls,{
    Name = "ExposureAperture",
    ControlType = "Text",
    PinStyle = "Output",
    UserPin = true,
    Count = 1, 
    IsReadOnly = true
  })
  table.insert(controls,{
    Name          = "ExposureBacklightComp",
    ControlType   = "Indicator",
    IndicatorType = "Led",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  table.insert(controls,{
    Name          = "ExposureGain",
    ControlType   = "Knob",
    ControlUnit   = "Integer",
    Min           = 1,
    Max           = 8,
    UserPin       = true,
    PinStyle      = "Output",
    Count         = 1, 
    IsReadOnly = true
  })
  
  return controls
end

function GetControlLayout(props)
  local layout   = {}
  local graphics = {}
  local currentPage = pagenames[props["page_index"].Value]
  
  if currentPage == "Setup" then
    table.insert(graphics,{
      Type = "Label",
      Text = "Setup",
      Position = {11,0},
      Size = {245,22},
      Font = "Roboto",
      FontSize = 18,
      FontStyle = "Bold",
      HTextAlign = "Left",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "",
      Fill = {222,222,222},
      StrokeWidth = 0,
      Position = {11,21},
      Size = {290,330}
    })
    table.insert(graphics,{
      Type = "Header",
      Text = "Connect to Device",
      Position = {32,30},
      Size = {250,6},
      FontSize = 14,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    if props["Control Mode"].Value == "TCP" then
      table.insert(graphics,{
        Type = "Label",
        Text = "Server Port:",
        Position = {83,62},
        Size = {66,16},
        Font = "Roboto",
        FontSize = 11,
        FontStyle = "Regular",
        HTextAlign = "Right",
        VTextAlign = "Center",
        Color = {0,0,0}
      })
      layout["Port"] = {
        PrettyName = "Setup~Port",
        Position = {150,62},
        Size = {70,16},
        FontColor = {0,0,0},
      }
    elseif props["Control Mode"].Value == "UDP" then
      table.insert(graphics,{
        Type = "Label",
        Text = "Listen NIC:",
        Position = {83,62},
        Size = {66,16},
        Font = "Roboto",
        FontSize = 11,
        FontStyle = "Regular",
        HTextAlign = "Right",
        VTextAlign = "Center",
        Color = {0,0,0}
      })
      layout["NIC"] = {
        PrettyName = "Setup~NIC",
        Style = "ComboBox",
        Position = {150,62},
        Size = {70,16},
        Color = {255,255,255},
        StrokeWidth = 1,
        StrokeColor = {105,105,105},
        CornerRadius = 0,
        Font = "Roboto",
        FontStyle = "Regular",
        FontSize = 9,
        FontColor = {0,0,0},
      }
    elseif props["Control Mode"].Value == "Serial" then
      table.insert(graphics,{
        Type = "Label",
        Text = "Baud:",
        Position = {35,62},
        Size = {35,16},
        Font = "Roboto",
        FontSize = 11,
        FontStyle = "Regular",
        HTextAlign = "Left",
        VTextAlign = "Center",
        Color = {0,0,0}
      })
      layout["Baud"] = {
        PrettyName = "Setup~Baud Rate",
        Style = "ComboBox",
        Position = {70,62},
        Size = {80,16},
        Color = {255,255,255},
        StrokeWidth = 1,
        StrokeColor = {105,105,105},
        CornerRadius = 0,
        Font = "Roboto",
        FontStyle = "Regular",
        FontSize = 9,
        FontColor = {0,0,0},
      }
      table.insert(graphics,{
        Type = "Label",
        Text = "Data Bits:",
        Position = {170,50},
        Size = {55,16},
        Font = "Roboto",
        FontSize = 11,
        FontStyle = "Regular",
        HTextAlign = "Left",
        VTextAlign = "Center",
        Color = {0,0,0}
      })
      layout["DataBits"] = {
        PrettyName = "Setup~Data Bits",
        Style = "ComboBox",
        Position = {225,50},
        Size = {50,16},
        Color = {255,255,255},
        StrokeWidth = 1,
        StrokeColor = {105,105,105},
        CornerRadius = 0,
        Font = "Roboto",
        FontStyle = "Regular",
        FontSize = 9,
        FontColor = {0,0,0},
      }
      table.insert(graphics,{
        Type = "Label",
        Text = "Parity:",
        Position = {170,75},
        Size = {55,16},
        Font = "Roboto",
        FontSize = 11,
        FontStyle = "Regular",
        HTextAlign = "Left",
        VTextAlign = "Center",
        Color = {0,0,0}
      })
      layout["Parity"] = {
        PrettyName = "Setup~Parity",
        Style = "ComboBox",
        Position = {225,75},
        Size = {50,16},
        Color = {255,255,255},
        StrokeWidth = 1,
        StrokeColor = {105,105,105},
        CornerRadius = 0,
        Font = "Roboto",
        FontStyle = "Regular",
        FontSize = 9,
        FontColor = {0,0,0},
      }
    end
    table.insert(graphics,{
      Type = "Header",
      Text = "Select Cameras",
      Position = {32,105},
      Size = {250,6},
      FontSize = 14,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 1:",
      Position = {31,125},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 2:",
      Position = {116,125},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 3:",
      Position = {201,125},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 4:",
      Position = {31,170},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 5:",
      Position = {116,170},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 6:",
      Position = {201,170},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["CameraComponent 1"] = {
      PrettyName = "Camera Component 1 Name",
      Style = "ComboBox",
      Position = {31,141},
      Size = {80,20},
      Color = {255,255,255},
      FontSize = 11
    }
    layout["CameraComponent 2"] = {
      PrettyName = "Camera Component 2 Name",
      Style = "ComboBox",
      Position = {116,141},
      Size = {80,20},
      Color = {255,255,255},
      FontSize = 11
    }
    layout["CameraComponent 3"] = {
      PrettyName = "Camera Component 3 Name",
      Style = "ComboBox",
      Position = {201,141},
      Size = {80,20},
      Color = {255,255,255},
      FontSize = 11
    }
    layout["CameraComponent 4"] = {
      PrettyName = "Camera Component 4 Name",
      Style = "ComboBox",
      Position = {31,186},
      Size = {80,20},
      Color = {255,255,255},
      FontSize = 11
    }
    layout["CameraComponent 5"] = {
      PrettyName = "Camera Component 5 Name",
      Style = "ComboBox",
      Position = {116,186},
      Size = {80,20},
      Color = {255,255,255},
      FontSize = 11
    }
    layout["CameraComponent 6"] = {
      PrettyName = "Camera Component 6 Name",
      Style = "ComboBox",
      Position = {201,186},
      Size = {80,20},
      Color = {255,255,255},
      FontSize = 11
    }
    table.insert(graphics,{
      Type = "Header",
      Text = "Status",
      Position = {32,240},
      Size = {250,6},
      FontSize = 14,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["Status"] = {
      PrettyName       = "Status",
      Style            = "Text",
      TextBoxStyle     = "Normal",
      IsReadOnly       = true,
      FontSize         = 14,
      Position         = {42,270},
      Size             = {230,50}
    }
    table.insert(graphics,{
      Type             = "Label",
      Text             = "Version "..PluginInfo.BuildVersion,
      HTextAlign       = "Right",
      Fill             = Clear,
      FontSize         = 9,
      FontColor        = {0,0,0},
      Position         = {187,339},
      Size             = {113,12}
    })
  elseif currentPage == "Controls" then
    table.insert(graphics,{
      Type = "Label",
      Text = "Controls",
      Position = {11,0},
      Size = {245,22},
      Font = "Roboto",
      FontSize = 18,
      FontStyle = "Bold",
      HTextAlign = "Left",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "",
      Fill = {222,222,222},
      StrokeWidth = 0,
      Position = {11,21},
      Size = {290,390}
    })
    table.insert(graphics,{
      Type = "Header",
      Text = "Choose Camera to Control",
      Position = {32,30},
      Size = {250,6},
      FontSize = 14,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 1:",
      Position = {31,50},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 2:",
      Position = {116,50},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 3:",
      Position = {201,50},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 4:",
      Position = {31,85},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 5:",
      Position = {116,85},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Camera 6:",
      Position = {201,85},
      Size = {80,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Center",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["CameraSelect 1"] = {
      PrettyName = "Camera Select 1",
      Position = {51,66},
      Size = {40,16},
      Color = {255,255,255},
    }
    layout["CameraSelect 2"] = {
      PrettyName = "Camera Select 2",
      Position = {136,66},
      Size = {40,16},
      Color = {255,255,255},
    }
    layout["CameraSelect 3"] = {
      PrettyName = "Camera Select 3",
      Position = {221,66},
      Size = {40,16},
      Color = {255,255,255},
    }
  
    layout["CameraSelect 4"] = {
      PrettyName = "Camera Select 4",
      Position = {51,101},
      Size = {40,16},
      Color = {255,255,255},
    }
    layout["CameraSelect 5"] = {
      PrettyName = "Camera Select 5",
      Position = {136,101},
      Size = {40,16},
      Color = {255,255,255},
    }
    layout["CameraSelect 6"] = {
      PrettyName = "Camera Select 6",
      Position = {221,101},
      Size = {40,16},
      Color = {255,255,255},
    }
    table.insert(graphics,{
      Type = "Header",
      Text = "Directional",
      Position = {60,130},
      Size = {190,6},
      FontSize = 11,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["PanSpeed"] = {
      PrettyName = "PTZ~Pan Speed",
      Style = "None"
    }
    layout["TiltSpeed"] = {
      PrettyName = "PTZ~Tilt Speed",
      Style = "None"
    }
    layout["ZoomSpeed"] = {
      PrettyName = "PTZ~Zoom Speed",
      Style = "None"
    }
    layout["TiltUp"] = {
      PrettyName = "PTZ~Up",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {140,150},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {140,150},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Up",
      Position = {140,142},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["TiltDown"] = {
      PrettyName = "PTZ~Down",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {140,210},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {140,210},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Down",
      Position = {140,240},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["PanLeft"] = {
      PrettyName = "PTZ~Left",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {110,180},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {110,180},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Left",
      Position = {110,172},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["PanRight"] = {
      PrettyName = "PTZ~Right",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {170,180},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {170,180},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Right",
      Position = {170,172},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["PtzCenter"] = {
      PrettyName = "PTZ~Center",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {140,180},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {140,180},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    layout["PanLeftTiltUp"] = {
      PrettyName = "PTZ~Pan Left/Tilt Up",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {80,150},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {80,150},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Up Left",
      Position = {80,142},
      Size = {30,8},
      FontSize = 6,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["PanRightTiltUp"] = {
      PrettyName = "PTZ~Pan Right/Tilt Up",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {200,150},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {200,150},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Up Right",
      Position = {200,142},
      Size = {30,8},
      FontSize = 6,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["PanLeftTiltDown"] = {
      PrettyName = "PTZ~Pan Left/Tilt Down",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {80,210},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {80,210},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Down Left",
      Position = {68,202},
      Size = {42,8},
      FontSize = 6,
      Font = "Roboto",
      FontStyle = "Regular",
      HTextAlign = "Right"
    })
    layout["PanRightTiltDown"] = {
      PrettyName = "PTZ~Pan Right/Tilt Down",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {200,210},
    }
      table.insert(graphics,{
      Type = "GroupBox",
      Position = {200,210},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Down Right",
      Position = {200,202},
      Size = {42,8},
      FontSize = 6,
      Font = "Roboto",
      FontStyle = "Regular",
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Header",
      Text = "Zoom",
      Position = {60,258},
      Size = {190,6},
      FontSize = 11,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["ZoomIn"] = {
      PrettyName = "PTZ~Zoom In",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {110,279},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {110,279},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "In",
      Position = {110,271},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["ZoomOut"] = {
      PrettyName = "PTZ~Zoom Out",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {170,279},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {170,279},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Out",
      Position = {170,271},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    table.insert(graphics,{
      Type = "Header",
      Text = "Focus",
      Position = {60,326},
      Size = {190,6},
      FontSize = 11,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["FocusIn"] = {
      PrettyName = "Focus~In",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {88,346},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {88,346},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "In",
      Position = {88,338},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["FocusAuto"] = {
      PrettyName = "Focus~Auto",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {140,346},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {140,346},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Auto",
      Position = {140,338},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    layout["FocusOut"] = {
      PrettyName = "Focus~Out",
      Style = "Led",
      IsReadOnly = true,
      Size = {30,30},
      Position = {191,346},
    }
    table.insert(graphics,{
      Type = "GroupBox",
      Position = {191,346},
      Size = {30,30},
      StrokeWidth = 1,
      Color = {0,0,0},
      CornerRadius = 5
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Out",
      Position = {191,338},
      Size = {30,8},
      FontSize = 8,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    table.insert(graphics,{
      Type             = "Label",
      Text             = "Version "..PluginInfo.BuildVersion,
      HTextAlign       = "Right",
      Fill             = Clear,
      FontSize         = 9,
      FontColor        = {0,0,0},
      Position         = {188,399},
      Size             = {113,12}
    })
  elseif currentPage == "Advanced" then
    table.insert(graphics,{
      Type = "Label",
      Text = "Advanced Controls",
      Position = {11,0},
      Size = {245,22},
      Font = "Roboto",
      FontSize = 18,
      FontStyle = "Bold",
      HTextAlign = "Left",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "",
      Fill = {222,222,222},
      StrokeWidth = 0,
      Position = {11,21},
      Size = {290,330}
    })
  
    table.insert(graphics,{
      Type = "Header",
      Text = "Brightness",
      Position = {60,50},
      Size = {190,6},
      FontSize = 11,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Brightness:",
      Position = {60,72},
      Size = {86,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["Brightness"] = {
      PrettyName = "Advanced~Brightness",
      Size = {104,16},
      Position = {146,72}, 
      IsReadOnly = true
    }
    table.insert(graphics,{
      Type = "Header",
      Text = "White Balance",
      Position = {59,115},
      Size = {190,6},
      FontSize = 11,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Mode:",
      Position = {25,143},
      Size = {42,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["WhiteBalanceMode"] = {
      PrettyName = "Advanced~White Balance Mode",
      Style = "Text",
      IsReadOnly = true,
      Size = {86,16},
      Position = {67,143}, 
      IsReadOnly = true,
      Style = "ComboBox"
  
    }
    table.insert(graphics,{
      Type = "Label",
      Text = "Auto:",
      Position = {157,143},
      Size = {42,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["WhiteBalanceAuto"] = {
      PrettyName = "Advanced~White Balance Auto FB",
      Style = "Led",
      IsReadOnly = true,
      Size = {16,16},
      Position = {199,143},
      Margin = 0
    }
    table.insert(graphics,{
      Type = "Label",
      Text = "Red:",
      Position = {25,173},
      Size = {42,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["WhiteBalanceRed"] = {
      PrettyName = "Advanced~White Balance Red",
      Size = {86,16},
      Position = {67,173}, 
      IsReadOnly = true
    }
    table.insert(graphics,{
      Type = "Label",
      Text = "Blue:",
      Position = {157,173},
      Size = {42,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["WhiteBalanceBlue"] = {
      PrettyName = "Advanced~White Balance Blue",
      Size = {86,16},
      Position = {199,173}, 
      IsReadOnly = true
    }
    table.insert(graphics,{
      Type = "Header",
      Text = "Exposure",
      Position = {59,216},
      Size = {190,6},
      FontSize = 11,
      Font = "Roboto",
      FontStyle = "Regular"
    })
    table.insert(graphics,{
      Type = "Label",
      Text = "Mode:",
      Position = {17,237},
      Size = {50,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["ExposureMode"] = {
      PrettyName = "Advanced~Exposure Mode",
      Style = "Text",
      IsReadOnly = true,
      Size = {86,16},
      Position = {67,237}, 
      IsReadOnly = true,
      Style = "ComboBox"
    }
    table.insert(graphics,{
      Type = "Label",
      Text = "Shutter:",
      Position = {17,267},
      Size = {50,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["ExposureShutter"] = {
      PrettyName = "Advanced~Exposure Shutter",
      Style = "Text",
      IsReadOnly = true,
      Size = {86,16},
      Position = {67,267}, 
      IsReadOnly = true,
      Style = "ComboBox"
    }
    table.insert(graphics,{
      Type = "Label",
      Text = "Backlight Comp:",
      Position = {162,237},
      Size = {87,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["ExposureBacklightComp"] = {
      PrettyName = "Advanced~Exposure Backlight Comp FB",
      Style = "Led",
      IsReadOnly = true,
      Size = {16,16},
      Position = {249,237},
      Margin = 0
    }
    table.insert(graphics,{
      Type = "Label",
      Text = "Aperture:",
      Position = {162,267},
      Size = {50,16},
      Font = "Roboto",
      FontSize = 11,
      FontStyle = "Regular",
      HTextAlign = "Right",
      VTextAlign = "Center",
      Color = {0,0,0}
    })
    layout["ExposureAperture"] = {
      PrettyName = "Advanced~Exposure Aperture",
      Style = "Text",
      IsReadOnly = true,
      Size = {50,16},
      Position = {215,267}, 
      IsReadOnly = true,
      Style = "ComboBox"
    }
    table.insert(graphics,{
      Type             = "Label",
      Text             = "Version "..PluginInfo.BuildVersion,
      HTextAlign       = "Right",
      Fill             = Clear,
      FontSize         = 9,
      FontColor        = {0,0,0},
      Position         = {187,339},
      Size             = {113,12}
    })
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  -- Control aliases
  Status = Controls.Status
  PanRight = Controls.PanRight
  PanLeft = Controls.PanLeft
  Center = Controls.PtzCenter
  TiltSpeed = Controls.TiltSpeed
  PanSpeed = Controls.PanSpeed
  ZoomSpeed = Controls.ZoomSpeed
  TiltUp = Controls.TiltUp
  TiltDown = Controls.TiltDown
  ZoomIn = Controls.ZoomIn
  ZoomOut = Controls.ZoomOut
  PanLeftTiltUp = Controls.PanLeftTiltUp
  PanRightTiltUp = Controls.PanRightTiltUp
  PanLeftTiltDown = Controls.PanLeftTiltDown
  PanRightTiltDown = Controls.PanRightTiltDown
  FocusIn = Controls.FocusIn
  FocusOut = Controls.FocusOut
  FocusAuto = Controls.FocusAuto
  JoystickLeft = Controls.JoystickLeft
  RotateRight = Controls.JoystickRotateRight
  RotateLeft = Controls.JoystickRotateLeft
  WhiteBalanceMode = Controls.WhiteBalanceMode
  WhiteBalanceAuto = Controls.WhiteBalanceAuto
  WhiteBalanceRed = Controls.WhiteBalanceRed
  WhiteBalanceBlue = Controls.WhiteBalanceBlue
  ExposureMode = Controls.ExposureMode
  ExposureShutter = Controls.ExposureShutter
  ExposureAperture = Controls.ExposureAperture
  ExposureBacklightComp = Controls.ExposureBacklightComp
  Brightness = Controls.Brightness
  Port = Controls.Port
  NIC = Controls.NIC
  Baud = Controls.Baud
  DataBits = Controls.DataBits
  Parity = Controls.Parity
  CameraComponent = Controls.CameraComponent
  CameraSelect = Controls.CameraSelect
  
  -- Variables and flags
  DebugTx = false
  DebugRx = false
  DebugFunction = false
  DebugPrint = Properties["Debug Print"].Value
  PanTiltStopBit = 3
  CurrentPanTiltDirection = {3, 3}
  PanTiltControlMatrix = {{PanLeftTiltUp,PanRightTiltUp,TiltUp},
                          {PanLeftTiltDown,PanRightTiltDown,TiltDown},
                          {PanLeft,PanRight,Center}}
  
  CameraComponentPanTiltControlMatrix = {{"pan.left.tilt.up","pan.right.tilt.up","tilt.up"},
                                         {"pan.left.tilt.down","pan.right.tilt.down","tilt.down"},
                                         {"pan.left","pan.right","center"}}  
                          
  SelectedCamera = 0
  CameraControlArray = {}
  WhiteBalanceGainStep = 100
  NoCameraSelected = true
  SelectedCamera = 1
  
  -- Sockets and services
  if Properties["Control Mode"].Value == "TCP" then
    Server = TcpSocketServer.New()
  elseif Properties["Control Mode"].Value == "UDP" then
    Server = UdpSocket.New()
    local ni = Network.Interfaces()
    local choices = {}
    table.insert(choices,{Text = "None", IP = ""})
    for index, item in ipairs(ni) do
      table.insert(choices,{Text = item.Interface, IP = item.Address})
    end
    NIC.Choices = choices
  elseif Properties["Control Mode"].Value == "Serial" then
    Server = SerialPorts[1]
  end
  
  -- Timers, tables, and constants
  StatusState = { 
    OK = 0, 
    COMPROMISED = 1, 
    FAULT = 2, 
    NOTPRESENT = 3, 
    MISSING = 4, 
    INITIALIZING = 5
  }
  Sockets  = {}
  SocketGarbageCollector = Timer.New()
  EOL = "\n"
  
  
  -- Update the Status control
  function ReportStatus(state,msg)
    if DebugFunction then print("ReportStatus() Called") end
    local msg=msg or ""
    Status.Value=StatusState[state]
    Status.String=msg
  end
  
  -- Camera component parsing, taken for ACPR plugin
  
  CameraComponentNames = {}
  CameraComponents = {}
  
  function GetNamedComponents() 
    Components = Component.GetComponents()
    if #Components>0 then --checking if there are named components present
      for i,v in pairs(Components) do
        if string.find(v.Type,"camera") then table.insert(CameraComponentNames, v.Name) end --Checks if the component is a camera 
      end
      table.sort(CameraComponentNames) --Sorts Cameras alphabetical
      table.insert(CameraComponentNames,#CameraComponentNames+1,"none")
      for i=1, #CameraComponent do
        Controls["CameraComponent"][i].Choices = CameraComponentNames
      end
    end
  end
  
  function CameraControlSelect(num)
    SelectedCamera = num
    local count = 0
    for i=1, #CameraSelect do
      if i == num then
        CameraSelect[i].Boolean = true
      else
        CameraSelect[i].Boolean = false
      end
      if CameraComponent[i].String ~= "" and CameraComponent[i].String ~= "none" then count = count + 1 end
    end
    if count == 0 then 
      NoCameraSelected = true
    else
      NoCameraSelected = false
    end
  end
  
  for i=1, #CameraSelect do
    CameraSelect[i].EventHandler = function()
      CameraControlSelect(i)
    end
  end
  
  for i=1, #CameraComponent do
    CameraComponent[i].EventHandler = function(self)
      CameraComponents[i] = Component.New(self.String)
      CameraControlSelect(SelectedCamera)
    end
    if CameraComponent[i].String == "" then CameraComponent[i].String = "none" end
    if CameraComponent[i].String ~= "" and CameraComponent[i].String ~= "none" then 
      CameraComponents[i] = Component.New(CameraComponent[i].String)
      NoCameraSelected = false 
    end
  end
  
  -- Helper functions
  -- A function to determine common print statement scenarios for troubleshooting
  function SetupDebugPrint()
    if DebugPrint=="Tx/Rx" then
      DebugTx,DebugRx=true,true
    elseif DebugPrint=="Tx" then
      DebugTx=true
    elseif DebugPrint=="Rx" then
      DebugRx=true
    elseif DebugPrint=="Function Calls" then
      DebugFunction=true
    elseif DebugPrint=="All" then
      DebugTx,DebugRx,DebugFunction=true,true,true
    end
  end
  
  function DebugFormat(string) -- Format strings containing non-printable characters so we can see what they are
    local visual = ""
    for i=1,#string do
      local byte = string:sub(i,i)
      visual = visual..string.format("[%02xh]",string.byte(byte))
    end
    return visual
  end
  
  function HexArray(string) -- Create an array of hex bytes
    local array = {}
    for i=1,#string do
      local byte = string:sub(i,i)
      table.insert(array, string.byte(byte))
    end
    return array
  end
  
  function asciiHexArray(string) -- Convert hex bytes to ascii representations and assemble in an array (\x0D will be 0D)
    local array = {}
    for i=1,#string do
      local byte = string:sub(i,i)
      array[i] = string.format("%02x",string.byte(byte))
    end
    return array
  end
  
  -- Send data to device
  function Send(Controller,cmd)
    if DebugFunction then print("Send() Called") end
    if DebugTx then print("Tx: "..cmd) end
    Controller:Write(cmd.."\n")
  end
  
  -- A function to clear controls/flags/variables and clears tables
  function ClearVariables()
    if DebugFunction then print("ClearVariables() Called") end
  end
  
  -- A function to trigger other functions or set flags if disconnected
  function Disconnected()
    if DebugFunction then print("Disconnect() Called") end
    if Properties["Control Mode"].Value == "TCP" then
      SocketGarbageCollector:Stop()
    elseif Properties["Control Mode"].Value == "UDP" then
      SocketGarbageCollector:Stop()
    end
    ClearVariables()
  end
  
    -- A function to handle connection
    function ListenForClients()
      if DebugFunction then print("ListenForClients() Called") end
      SocketGarbageCollector:Start(5)
      ReportStatus("INITIALIZING", "Waiting for client input")
      Server:Close()
      if Properties["Control Mode"].Value == "TCP" then
        for k,v in pairs(Sockets) do
          -- close the individual client connections
          v:Disconnect()
          -- set the instances to nil so we can remove them from the Sockets table
          v = nil
          table.remove(Sockets,v)
        end
        if Port.Value == 0 then
          ReportStatus("FAULT", "No port number configured")
        else
          ok, err = pcall(function()Server:Listen(math.floor(Port.Value))end)
          if not ok then
            ReportStatus("FAULT", "Port already in use")
            Port.Value = 0
          end
        end
      elseif Properties["Control Mode"].Value == "UDP" then
        ok, err = pcall(function()Server:Open(NIC.Choice.IP, 52381)end)
        if not ok then
          ReportStatus("FAULT", "Could not open UDP socket at port 52381 on the selected NIC")
        end
      elseif Properties["Control Mode"].Value == "Serial" then
        if DataBits.String == "" or Parity.String == "" or Baud.String == "" then
          ReportStatus("FAULT", "Serial port not fully configured")
        else
          ok, err = pcall(function()Server:Open(tonumber(Baud.String), tonumber(DataBits.String), Parity.String)end)
          if not ok then
            ReportStatus("FAULT", "Port already in use")
            Port.Value = 0
          end
        end
      end
    end
  
  -- A function to trigger other functions once connected
  function Connected()
    if DebugFunction then print("Connected() Called") end
    ReportStatus("OK")
  end
  
  -- Poll function for updates and state changes
  function CleanSockets()
    if DebugFunction then print("CleanSockets() Called") end
    for k,v in pairs(Sockets) do
      if not v.IsConnected then 
        v = nil                 -- set closed socket to nil
        table.remove(Sockets,v) -- remove from our Sockets table
      end
    end
    if #Sockets == 0 then ListenForClients() end
  end
  
    -- Serial Control Setup
    Baud.Choices = {"", "50", "110", "134", "150", "200", "300", "600", "1200", "1800", "2400", "4800", "9600","19200","38400","57600","115200", "230400"}
    Parity.Choices = {"","N","E","O"}
    DataBits.Choices = {"","7","8"}
  
    -- EventHandlers
    SocketGarbageCollector.EventHandler = CleanSockets
    
    Controls.Port.EventHandler = function()
      Disconnected()
      ListenForClients()
    end
  
   NIC.EventHandler = function(self)
      Server:Close()
      Disconnected()
      if self.Choice.IP ~= "" then
        ListenForClients()
      else
        ReportStatus("FAULT", "No NIC selected for UDP server")
      end
    end
  
    if NIC.String == "" then
      NIC.String = "None"
    end
  
    Baud.EventHandler = function()
      Disconnected()
      ListenForClients()
    end
  
    DataBits.EventHandler = function()
      Disconnected()
      ListenForClients()
    end
  
    Parity.EventHandler = function()
      Disconnected()
      ListenForClients()
    end
  
  -- Triggers when we get a new Client connection
  if Properties["Control Mode"].Value == "TCP" then
    Server.EventHandler = function(SocketInstance)
      if DebugFunction then print("TCP Server EventHandler Called") end
      if DebugRX then print( "Got connect", SocketInstance ) end
      table.insert(Sockets,SocketInstance)
      -- set timeout and instantiate socket with SocketHandler()
      --SocketInstance.ReadTimeout = 10
      SocketInstance.EventHandler = SocketHandler
    end
  elseif Properties["Control Mode"].Value == "UDP" then
    Server.EventHandler = function(SocketInstance, Packet)
      Server:Send(Packet.Address, 52381, "\x02\x01\x00\x01\x00\x00\x00\x00\x01")
      if DebugFunction then print("UDP Server EventHandler Called") end
      if DebugRX then print( "Got connect", SocketInstance ) end
      table.insert(Sockets,SocketInstance)
      UdpResponseBuffer(Packet.Data, Packet.Address )
    end
  elseif Properties["Control Mode"].Value == "Serial" then
    Server.EventHandler = function(port, event)
      if DebugFunction then print("Serial server EventHandler Called") end
      if DebugRX then print( "Event: "..event, "Port: "..port ) end
      if event == SerialPorts.Events.Data then
        ResponseBuffer(port)
      end
    end
  end
  
  -- Buffer Management
  function ParseResponse(array)
    if Properties["Control Mode"].Value == "UDP" then
      for i=1, 8 do
        table.remove(array,1)
      end
    end
    if NoCameraSelected == true then
      return false
    end
    if DebugFunction then print("ParseResponse() Called") end
    if array[4] == 7 then
      if array[5] >= 49  and array[5] <= 55 then
        -- zoom out event
        Controls.ZoomOut.Boolean = true
        Controls.ZoomIn.Boolean = false
        CameraComponents[SelectedCamera]["zoom.out"].Boolean = true
        CameraComponents[SelectedCamera]["zoom.in"].Boolean = false
        local value = ((tonumber(array[5]) - 48) / 7)
        ZoomSpeed.Value = value
        CameraComponents[SelectedCamera]["setup.zoom.speed"].Value = value
      elseif array[5] >= 33  and array[5] <= 39 then
        --zoom in event
        Controls.ZoomIn.Boolean = true
        Controls.ZoomOut.Boolean = false
        CameraComponents[SelectedCamera]["zoom.in"].Boolean = true
        CameraComponents[SelectedCamera]["zoom.out"].Boolean = false
        local value = ((tonumber(array[5]) - 32) / 7)
        ZoomSpeed.Value = value
        CameraComponents[SelectedCamera]["setup.zoom.speed"].Value = value
      elseif array[5] == 0 then
        -- zoom stop event
        Controls.ZoomOut.Boolean = false
        Controls.ZoomIn.Boolean = false
        CameraComponents[SelectedCamera]["zoom.out"].Boolean = false
        CameraComponents[SelectedCamera]["zoom.in"].Boolean = false
        ZoomSpeed.Value = .001
        CameraComponents[SelectedCamera]["setup.zoom.speed"].Value = .001
      end
    elseif array[2] == 1 and array[3] == 6 and array[4] == 1 then
      -- pan/tilt event
      ParsePanTilt(array[5], array[6], array[7], array[8])
    elseif array[4] == 56 then
      if array[5] == 2 then
        FocusAuto.Boolean = true
        CameraComponents[SelectedCamera]["focus.auto"]:Trigger()
      elseif array[5] == 3 then
        FocusAuto.Boolean = false
      elseif array[4] == 16 then
        if FocusAuto.Boolean == false then
          CameraComponents[SelectedCamera]["focus.auto"]:Trigger()
        end
        FocusAuto.Boolean = not FocusAuto.Boolean
      end
    elseif array[4] == 8 then
      if FocusAuto.Boolean == false then
        local standardSpeed = 0.50
        if array[5] >= 49  and array[5] <= 55 then
          -- focus variable far event
          local speed = (array[5] - 32)/7
          CameraComponents[SelectedCamera]["setup.focus.speed"].Value = speed
          FocusOut.Boolean = false
          FocusIn.Boolean = true
          CameraComponents[SelectedCamera]["focus.near"].Boolean = false
          CameraComponents[SelectedCamera]["focus.far"].Boolean = true
        elseif array[5] >= 33  and array[5] <= 39 then
          -- focus variable near event
          local speed = (array[5] - 32)/7
          CameraComponents[SelectedCamera]["setup.focus.speed"].Value = speed
          FocusOut.Boolean = true
          FocusIn.Boolean = false
          CameraComponents[SelectedCamera]["focus.near"].Boolean = true
          CameraComponents[SelectedCamera]["focus.far"].Boolean = false
        elseif array[5] == 2 then
          -- focus standard far event
          CameraComponents[SelectedCamera]["setup.focus.speed"].Value = standardSpeed
          FocusOut.Boolean = false
          FocusIn.Boolean = true
          CameraComponents[SelectedCamera]["focus.near"].Boolean = false
          CameraComponents[SelectedCamera]["focus.far"].Boolean = true
        elseif array[5] == 3 then
          -- focus standard near event
          CameraComponents[SelectedCamera]["setup.focus.speed"].Value = standardSpeed
          FocusOut.Boolean = true
          FocusIn.Boolean = false
          CameraComponents[SelectedCamera]["focus.near"].Boolean = true
          CameraComponents[SelectedCamera]["focus.far"].Boolean = false
        
        elseif array[5] == 0 then
          FocusOut.Boolean = false
          FocusIn.Boolean = false
          CameraComponents[SelectedCamera]["focus.near"].Boolean = false
          CameraComponents[SelectedCamera]["focus.far"].Boolean = false
        end
      end
    elseif array[4] == 13 then
      -- brightness event
      if array[5] == 2 then
        local tempBrightness = CameraComponents[SelectedCamera]["img.brightness"].Value + 1
        Brightness.Value = tempBrightness
        CameraComponents[SelectedCamera]["img.brightness"].Value = tempBrightness
      elseif array[5] == 3 then
        local tempBrightness = CameraComponents[SelectedCamera]["img.brightness"].Value - 1
        Brightness.Value = tempBrightness
        CameraComponents[SelectedCamera]["img.brightness"].Value = tempBrightness
      end
    elseif array[4] == 51 then
      -- backlight compensation event
      if array[5] == 2 then 
        ExposureBacklightComp.Boolean = true
        CameraComponents[SelectedCamera]["exp.backlight.comp"].Boolean = true
      elseif array[5] == 3 then 
        ExposureBacklightComp.Boolean = false
        CameraComponents[SelectedCamera]["exp.backlight.comp"].Boolean = false
      end
    elseif array[4] == 53 then
      -- white balance mode event
      if array[5] == 0 then 
        WhiteBalanceMode.String = "Auto"
        WhiteBalanceAuto.Boolean = true
        CameraComponents[SelectedCamera]["wb.awb.mode"].String = "Auto"
      elseif array[5] == 5 then 
        WhiteBalanceMode.String = "Manual"
        WhiteBalanceAuto.Boolean = false
        CameraComponents[SelectedCamera]["wb.awb.mode"].String = "Manual"
      elseif array[5] == 3 then 
        WhiteBalanceMode.String = "One Push"
        WhiteBalanceAuto.Boolean = false
        CameraComponents[SelectedCamera]["wb.awb.mode"].String = "One Push"
        CameraComponents[SelectedCamera]["wb.one.push.trigger"]:Trigger()
      end
    elseif array[3] == 4 and array[4] == 3 then
      -- white balance red gain event
      local currentGain = CameraComponents[SelectedCamera]["wb.red.gain"].Value
      if array[5] == 2 then
        currentGain = currentGain + WhiteBalanceGainStep
        CameraComponents[SelectedCamera]["wb.red.gain"].Value = currentGain
        WhiteBalanceRed.Value = currentGain
      elseif array[5] == 3 then
        currentGain = currentGain - WhiteBalanceGainStep
        CameraComponents[SelectedCamera]["wb.red.gain"].Value = currentGain
        WhiteBalanceRed.Value = currentGain
      end
    elseif array[3] == 4 and array[4] == 4 then
      -- white balance blue gain event
      local currentGain = CameraComponents[SelectedCamera]["wb.blue.gain"].Value
      if array[5] == 2 then
        currentGain = currentGain + WhiteBalanceGainStep
        CameraComponents[SelectedCamera]["wb.blue.gain"].Value = currentGain
        WhiteBalanceBlue.Value = currentGain
      elseif array[5] == 3 then
        currentGain = currentGain - WhiteBalanceGainStep
        CameraComponents[SelectedCamera]["wb.blue.gain"].Value = currentGain
        WhiteBalanceBlue.Value = currentGain
      end
    elseif array[4] == 16 then
      WhiteBalanceMode.String = "One Push"
      WhiteBalanceAuto.Boolean = false
      CameraComponents[SelectedCamera]["wb.awb.mode"].String = "One Push"
      CameraComponents[SelectedCamera]["wb.one.push.trigger"]:Trigger()
    elseif array[4] == 57 then
      -- exposure mode event
      if array[5] == 0 then 
        ExposureMode.String = "Auto"
        CameraComponents[SelectedCamera]["exp.mode"].String = "Auto"
      elseif array[5] == 3 then
        ExposureMode.String = "Manual"
        CameraComponents[SelectedCamera]["exp.mode"].String = "Manual"
      end
      
    elseif array[4] == 74 then
      --exposure shutter speed event
      local shutterValue = ParseShutter(array[7], array[8])
      ExposureShutter.String = shutterValue
      CameraComponents[SelectedCamera]["exp.shutter"].String = shutterValue
    elseif array[4] == 75 then
      --exposure aperture event
      local apertureValue = ParseAperture(array[8])
      ExposureAperture.String = apertureValue
      CameraComponents[SelectedCamera]["exp.iris"].String = apertureValue
    end
  end
  
  function CompareArrays(arrayOne, arrayTwo)
    --arrays must be the same size or this will return false
    if #arrayOne ~= #arrayTwo then return false end
    for i=1,#arrayOne do
      if arrayOne[i] ~= arrayTwo[i] then return false end
    end
    return true
  end
  
  function ParsePanTilt(panSpeed, tiltSpeed, panDirection, tiltDirection)
    local tempPanSpeed = panSpeed
    local tempTiltSpeed = tiltSpeed
    if panSpeed >= 24 then tempPanSpeed = 24 end
    if tiltSpeed >= 24 then tempTiltSpeed = 24 end
    PanSpeed.Value = (tempPanSpeed / 24)
    CameraComponents[SelectedCamera]["setup.pan.speed"].Value = (tempPanSpeed / 24)
    TiltSpeed.Value = (tempTiltSpeed / 24)
    CameraComponents[SelectedCamera]["setup.tilt.speed"].Value = (tempTiltSpeed / 24)
    local panTiltDirection = {panDirection, tiltDirection}
    local panTiltControls = {PanLeft, PanRight, TiltUp, TiltDown, PanLeftTiltUp, PanLeftTiltDown, PanRightTiltUp, PanRightTiltDown, Center}
    local cameraComponentPanTiltControls = {"pan.left", "pan.right", "tilt.up", "tilt.down", "pan.left.tilt.down", "pan.right.tilt.down", "pan.left.tilt.up", "pan.right.tilt.up"}
    local camComponentPanTiltControls
    local function resetPanTilt()
      for index,ctrl in ipairs(panTiltControls) do
        ctrl.Boolean = false
      end
      for index,ctrlName in ipairs(cameraComponentPanTiltControls) do
        if CameraComponents[SelectedCamera][ctrlName] ~= nil then
          CameraComponents[SelectedCamera][ctrlName].Boolean = false
        end
      end
    end
    if CompareArrays(panTiltDirection, CurrentPanTiltDirection) == false then
      resetPanTilt()
      PanTiltControlMatrix[tiltDirection][panDirection].Boolean = true
      if CameraComponentPanTiltControlMatrix[tiltDirection][panDirection] ~= "center" then
        if CameraComponents[SelectedCamera][CameraComponentPanTiltControlMatrix[tiltDirection][panDirection]] ~= nil then
          CameraComponents[SelectedCamera][CameraComponentPanTiltControlMatrix[tiltDirection][panDirection]].Boolean = true
        end
      end
    end
    CurrentPanTiltDirection = {panDirection, tiltDirection}
  end
  
  function ParseShutter(tens, ones)
    if DebugFunction then print("ParseShutter() Called") end
    local shutterChoices = {"1/30", "1/60", "1/90", "1/100", "1/125", "1/180", "1/250", "1/350", "1/500", 
                            "1/725", "1/1000", "1/1500", "1/2000", "1/3000", "1/4000", "1/6000", "1/10000"}
    if tens == 0 then
      return shutterChoices[ones]
    elseif tens == 1 then
      local choice = 16 + ones
      return shutterChoices[choice]
    end
  end
  
  function ParseAperture(num)
    local apertureChoices = {"Close", "f/11.00", "f/9.6", "f/8.0", "f/6.8", "f/5.6", "f/4.8", "f/4.0", "f/3.4", "f/2.8", "f/2.4", "f/2.0", "f/1.8"}
    return apertureChoices[num+1]
  end
  
  
  -- Handle data
  function ResponseBuffer(Controller)
    if DebugFunction then print("ResponseBuffer() Called") end
    local response = Controller:Read(Controller.BufferLength)
    Connected()
    if DebugRx then print(DebugFormat(response)) end
    if CameraComponents[SelectedCamera] ~= nil and CameraComponent[SelectedCamera].String ~= "none" then
      ParseResponse(HexArray(response))
    end
  end
  
  -- Handle data
  function UdpResponseBuffer(data, address)
    if DebugFunction then print("UdpResponseBuffer() Called") end
    local response = data
    Connected()
    if DebugRx then print(DebugFormat(response)) end
    if CameraComponents[SelectedCamera] ~= nil and CameraComponent[SelectedCamera].String ~= "none" then
      ParseResponse(HexArray(response))
    end
  end
  
  -- Socket Management
  function SocketHandler(Controller, event)
    if DebugFunction then print("SocketHandler() Called") end
    -- add new socket to Sockets table to keep track of client connections
    if event == TcpSocket.Events.Data then
      ResponseBuffer(Controller)  -- send data to buffer
    elseif event == TcpSocket.Events.Closed then
      Disconnected()
      for k,v in pairs(Sockets) do
        if not v.IsConnected then 
          v = nil                 -- set closed socket to nil
          table.remove(Sockets,v) -- remove from our Sockets table
        end
      end
    elseif event == TcpSocket.Events.Timeout then
      Disconnected()
      for k,v in pairs(Sockets) do
        if not v.IsConnected then 
          v = nil                 -- set closed socket to nil
          table.remove(Sockets,v) -- remove from our Sockets table
        end
      end
    end
  end
  -- Initialization Function
  function Initialization()
    if DebugFunction then print("Initialization() Called") end
    GetNamedComponents()
    local newInstance = true
    for i,v in ipairs(CameraSelect) do
      if v.Boolean then
        newInstance = false
        CameraControlSelect(i)
      end
    end
    if newInstance then CameraControlSelect(1) end
    SetupDebugPrint()
    if Properties["Control Mode"].Value == "UDP" then
      if NIC.String ~= "None" then
        ListenForClients()
      end
    else
      ListenForClients()
    end
  end
  
  Initialization()
end