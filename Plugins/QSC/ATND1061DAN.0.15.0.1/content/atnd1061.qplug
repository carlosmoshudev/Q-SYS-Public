-- Constants (change each release)
VERSION = '0.15.0';
CHANGES = 'Changed channel names';

-- Metering parameters
MeterThresholds = { 1, 33, 45, 61 };
MeterPoints = { 0, 0, 0, 0, 0, 0 };

-- Discovery parameters
DiscoModels = {'ATND-1061', 'ATND-1061DAN', 'ATND1061DAN'};
DiscoString = 'M-SEARCH * HTTP/1.1\r\nHost: 239.255.255.250:1900\r\nST: urn:schemas-upnp-org:device:ATCUDevice:1\r\nMan: "ssdp:discover"\r\nMX: 3\r\n\r\n';
DiscoTimeout = 9;
DiscoInterval = 3;

-- Plugin metadata
PluginInfo = {
  Name = 'Audio Technica~ATND1061 v' .. VERSION,
  Version = VERSION,
  Id = '325069a0-2497-43b3-b3ab-47e335eb98d6',
  Description = CHANGES
}

-- Audio-Technica Color Scheme
Colors = {
  Basic = {
    Primary = { 0x68, 0x99, 0xC6 }, -- Blue
    Secondary = { 0x7C, 0xAE, 0x90 }, -- BlueGreen
    Green = { 0x2E, 0xCC, 0x71 },
    Yellow = { 0xF1, 0xC4, 0x0F },
    Red = { 0xE7, 0x4C, 0x3C },
    White = { 0xFF, 0xFF, 0xFF },
    Black = { 0x00, 0x00, 0x00 },
  },
  Signal = {
    None = { 0xB2, 0xB2, 0xB2 },
    Green = { 0x4D, 0xB5, 0x6D },
    Yellow = { 0xE7, 0xBE, 0x22 },
    Red = { 0xE7, 0x4C, 0x3C }
  },
  BG1 = { 0x30, 0x3E, 0x4C },
  BG2 = { 0x21, 0x2A, 0x34 },
  BG3 = { 0x68, 0x75, 0x7D },
  Gray = { 0x56, 0x5D, 0x63 }
  -- = { 0x4B, 0x55, 0x63 }
};

-- Fixed channel names
Channels = {
  'CH 1',
  'CH 2',
  'CH 3',
  'CH 4',
  'CH 5',
  'CH 6'
};

-- Verbose debug option to see all packets
function GetProperties() return {
  {
    Name = 'Verbose Debug',
    Type = 'boolean',
    Value = false
  }
}; end;

-- Plugin block appearance in schematic
function GetColor() return Colors.BG2; end;
function GetPrettyName() return 'Audio Technica ATND1061 v' .. VERSION; end;

-- Plugin controls
function GetControls()

  -- Device-global controls
  local controls = {

    { -- Name display / edit
      Name = 'Device~Name',
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      PinStyle = 'Both',
      UserPin = true,
    },

    { -- Identify button
      Name = 'Device~Identify',
      ControlType = 'Button',
      ButtonType = 'Trigger',
      PinStyle = 'Both',
      UserPin = true
    },

    { -- Connection mode (auto vs. manual)
      Name = 'Device~Connection Mode',
      ControlType = 'Text'
    },

    { -- Device selection (auto connect)
      Name = 'Device~Select',
      ControlType = 'Text'
    },

    { -- Device IP (manual connection)
      Name = 'Device~IP Address',
      ControlType = 'Text'
    },

    { -- Device ID
      Name = 'Device~Device ID',
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      PinStyle = 'Output',
      UserPin = true
    },

    { -- Power save (standby) toggle
      Name = 'Device~Power Save',
      ControlType = 'Button',
      ButtonType = 'Toggle',
      PinStyle = 'Both',
      UserPin = true
    },

    { -- All mute toggle button
      Name = 'Device~Mute All',
      ControlType = 'Button',
      ButtonType = 'Toggle',
      PinStyle = 'Both',
      UserPin = true
    },

    { -- Preset selection
      Name = 'Device~Preset',
      ControlType = 'Text',
      PinStyle = 'Both',
      UserPin = true
    },

    { -- Device Status
      Name = 'Device~Status',
      ControlType = 'Indicator',
      IndicatorType = 'Status',
      PinStyle = 'Output',
      UserPin = true
    },

    { -- Audio Ch Position
      Name = 'Audio Ch Position',
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      PinStyle = 'Output',
      UserPin = true
    },

    { -- Camera Ch Position
      Name = 'Camera Ch Position',
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      PinStyle = 'Output',
      UserPin = true
    }

  };

  -- Per-channel controls
  for i,n in ipairs(Channels) do
    table.insert(controls, {
      Name = ('Channels~%s~%s'):format(n, 'Name'),
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      PinStyle = 'Output',
      UserPin = true
    });
    table.insert(controls, {
      Name = ('Channels~%s~%s'):format(n, 'Mute'),
      ControlType = 'Button',
      ButtonType = 'Toggle',
      PinStyle = 'Both',
      UserPin = true
    });
    table.insert(controls, {
      Name = ('Channels~%s~%s'):format(n, 'Signal LED'),
      ControlType = 'Indicator',
      IndicatorType = 'LED',
      Count = 4
    });
  end;

  return controls;

end;

function GetControlLayout()

  local graphics, layout = {
    { -- Background
      Type = 'GroupBox',
      Fill = Colors.BG3,
      Position = { 0, 0 },
      Size = { 675, 171 }
    },

    --[[ Header ]]--
    {
      Type ='GroupBox',
      Fill = Colors.BG2,
      Position = { 0, 0 },
      Size = { 675, 24 }
    },
    {
      Type = 'Svg',
      Image = '',
      Position = { 10, 5 },
      Size = { 78, 14 }
    },
    {
      Type = 'Label',
      Text = 'ATND1061DAN',
      Position = { 96, 3 },
      Size = { 88, 16 },
      IsBold = true,
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.Basic.White
    },
    

    --[[ Device panel ]]--
    {
      Type ='GroupBox',
      Fill = Colors.BG1,
      Position = { 0, 25 },
      Size = { 248, 145 }
    },
    {
      Type = 'Svg',
      Image = 'PHN2ZyB3aWR0aD0iMjQiIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTE5IDNIMTVWNUgxOVY5SDIxVjVDMjEgMy44OSAyMC4xIDMgMTkgM1pNMTkgMTlIMTVWMjFIMTlDMTkuNTMwNCAyMSAyMC4wMzkxIDIwLjc4OTMgMjAuNDE0MiAyMC40MTQyQzIwLjc4OTMgMjAuMDM5MSAyMSAxOS41MzA0IDIxIDE5VjE1SDE5VjE5Wk01IDE1SDNWMTlDMyAxOS41MzA0IDMuMjEwNzEgMjAuMDM5MSAzLjU4NTc5IDIwLjQxNDJDMy45NjA4NiAyMC43ODkzIDQuNDY5NTcgMjEgNSAyMUg5VjE5SDVWMTVaTTMgNVY5SDVWNUg5VjNINUM0LjQ2OTU3IDMgMy45NjA4NiAzLjIxMDcxIDMuNTg1NzkgMy41ODU3OUMzLjIxMDcxIDMuOTYwODYgMyA0LjQ2OTU3IDMgNVoiIGZpbGw9IndoaXRlIi8+CjxjaXJjbGUgY3g9IjEyIiBjeT0iMTIiIHI9IjQiIGZpbGw9IndoaXRlIi8+Cjwvc3ZnPgo=',
      Position = { 216, 36 },
      Size = { 18, 18 },
      ZOrder = 999
    },
    {
      Type = 'Label',
      Text = 'IP Mode',
      Position = { 16, 25+36+(32*0) + 4 },
      Size = { 100, 24 },
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.Basic.White
    },
    {
      Type = 'Label',
      Text = 'IP Address',
      Position = { 16, 25+36+(32*1) + 4 },
      Size = { 100, 24 },
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.Basic.White
    },
    {
      Type = 'Label',
      Text = 'Device ID',
      Position = { 16, 25+36+(32*2) + 4 },
      Size = { 100, 24 },
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.Basic.White
    },

    { -- Global controls panel
      Type ='GroupBox',
      Fill = Colors.BG1,
      Position = { 249, 25 },
      Size = { 426, 40 }
    },
    {
      Type = 'Svg',
      Image = 'PHN2ZyB3aWR0aD0iMjAiIGhlaWdodD0iMjAiIHZpZXdCb3g9IjAgMCAyMCAyMCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTEyLjM4NzUgNC4yMDgxMVYzLjk1MDc5QzEyLjM4NzUgMy4zMDA4IDEyLjExNjUgMi42Nzc0MyAxMS42MzQxIDIuMjE3ODJDMTEuMTUxNyAxLjc1ODIxIDEwLjQ5NzQgMS41IDkuODE1MTUgMS41QzkuMTMyOTIgMS41IDguNDc4NjMgMS43NTgyMSA3Ljk5NjIyIDIuMjE3ODJDNy41MTM4MSAyLjY3NzQzIDcuMjQyOCAzLjMwMDggNy4yNDI4IDMuOTUwNzlWOS4xNDY0NUwxMi4zODc1IDQuMjA4MTFaIiBmaWxsPSJ3aGl0ZSIvPgo8cGF0aCBkPSJNMTQuMDk4MSA5LjYyNDM0QzE0LjEwMSAxMC40MjYxIDEzLjg1NiAxMS4yMTA4IDEzLjM5MzYgMTEuODgwN0MxMi45MzEyIDEyLjU1MDUgMTIuMjcxOSAxMy4wNzU4IDExLjQ5ODEgMTMuMzkwOEMxMC43MjQyIDEzLjcwNTggOS44NzAxNyAxMy43OTY3IDkuMDQyNDcgMTMuNjUyQzguMjE0NzggMTMuNTA3NCA3LjQ1MDE3IDEzLjEzMzcgNi44NDQwNiAxMi41Nzc1TDguMTMwMjQgMTEuMzUyMUM4LjU5Mzk5IDExLjc0NzggOS4xOTI2MyAxMS45Njk5IDkuODE1MTMgMTEuOTc3MUMxMC40OTc0IDExLjk3NzEgMTEuMTUxNiAxMS43MTg5IDExLjYzNDEgMTEuMjU5M0MxMi4xMTY1IDEwLjc5OTYgMTIuMzg3NSAxMC4xNzYzIDEyLjM4NzUgOS41MjYyOFY3LjMwODMyTDE1LjUgNC4zNDI4NUwxNC43NDEyIDMuNjE5ODdMMy41IDE0LjM0MjFMNC4yNTg4NCAxNS4wNTI4TDYuMDA4MDIgMTMuMzg2M0M2Ljg3OTM4IDE0LjE4NSA4LjAwNzM5IDE0LjY4MTQgOS4yMTA2MiAxNC43OTU1VjE2LjY4MjZINy4wMzY5OFYxNy44MUgxMi41Njc1VjE2LjY4MjZIMTAuMzkzOVYxNC43OTU1QzExLjczMjMgMTQuNjU5NyAxMi45NzEgMTQuMDU4MyAxMy44NzI5IDEzLjEwNjNDMTQuNzc0NyAxMi4xNTQ0IDE1LjI3NjMgMTAuOTE4OSAxNS4yODE0IDkuNjM2NTZWOC4xNzgzNEgxNC4wOTgxVjkuNjI0MzRaIiBmaWxsPSJ3aGl0ZSIvPgo8cGF0aCBkPSJNNS42NzM2NCAxMC42NTM3QzUuNTU5NjYgMTAuMzIxMSA1LjQ5ODk0IDkuOTc0MTQgNS40OTM1NiA5LjYyNDM2VjguMTY2MTRINC4yOTc0MlY5LjYyNDM2QzQuMzExNjcgMTAuMjgxMyA0LjQ1NTY0IDEwLjkyOTggNC43MjE4NCAxMS41MzZMNS42NzM2NCAxMC42NTM3WiIgZmlsbD0id2hpdGUiLz4KPC9zdmc+Cg==',
      Position = { 269, 37 },
      Size = { 16, 16 },
      ZOrder = 1000
    },
    {
      Type = 'Label',
      Text = 'Power Save',
      Position = { 358, 35 },
      Size = { 68, 20 },
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.Basic.White
    },
    {
      Type = 'Label',
      Text = 'Preset',
      Position = { 504, 35 },
      Size = { 40, 20 },
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.Basic.White
    }

  }, {
    ['Device~Name'] = {
      Position = { 8, 33 },
      Size = { 147, 24 },
      StrokeWidth = 0,
      Color = Colors.Gray,
      FontSize = 14,
      HTextAlign = 'Left',
      Padding = 4
    },
    ['Device~Identify'] = {
      Position = { 166, 33 },
      Size = { 72, 24 },
      StrokeWidth = 1,
      StrokeColor = Colors.Basic.White,
      CornerRadius = 2,
      Padding = 6,
      ButtonVisualStyle = 'Flat',
      Legend = 'Identify',
      HTextAlign = 'Left',
      FontSize = 12,
      Margin = 0,
      UnlinkOffColor = true,
      OffColor = Colors.BG1,
      IconType = 'SVG',
      Icon = 'PHN2ZyB3aWR0aD0iMjQiIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTE5IDNIMTVWNUgxOVY5SDIxVjVDMjEgMy44OSAyMC4xIDMgMTkgM1pNMTkgMTlIMTVWMjFIMTlDMTkuNTMwNCAyMSAyMC4wMzkxIDIwLjc4OTMgMjAuNDE0MiAyMC40MTQyQzIwLjc4OTMgMjAuMDM5MSAyMSAxOS41MzA0IDIxIDE5VjE1SDE5VjE5Wk01IDE1SDNWMTlDMyAxOS41MzA0IDMuMjEwNzEgMjAuMDM5MSAzLjU4NTc5IDIwLjQxNDJDMy45NjA4NiAyMC43ODkzIDQuNDY5NTcgMjEgNSAyMUg5VjE5SDVWMTVaTTMgNVY5SDVWNUg5VjNINUM0LjQ2OTU3IDMgMy45NjA4NiAzLjIxMDcxIDMuNTg1NzkgMy41ODU3OUMzLjIxMDcxIDMuOTYwODYgMyA0LjQ2OTU3IDMgNVoiIGZpbGw9IndoaXRlIi8+CjxjaXJjbGUgY3g9IjEyIiBjeT0iMTIiIHI9IjQiIGZpbGw9IndoaXRlIi8+Cjwvc3ZnPgo=',
      HTextAlign = 'Left'
    },
    ['Device~Connection Mode'] = {
      Position = { 124, 25+36+(32*0) + 4 },
      Size = { 102, 24 },
      StrokeWidth = 0,
      Color = Colors.BG2,
      FontSize = 12,
      Style = 'ComboBox',
      TextColor = Colors.Basic.White
    },
    ['Device~Select'] = {
      Position = { 124, 25+36+(32*1) + 4 },
      Size = { 102, 24 },
      StrokeWidth = 0,
      Color = Colors.BG2,
      FontSize = 12,
      Style = 'ComboBox',
      TextColor = Colors.Basic.White
    },
    ['Device~IP Address'] = {
      Position = { 124, 25+36+(32*1) + 4 },
      Size = { 102, 24 },
      StrokeWidth = 0,
      Color = Colors.BG2,
      FontSize = 12
    },
    ['Device~Device ID'] = {
      Position = { 124, 25+36+(32*2) + 4 },
      Size = { 102, 24 },
      StrokeWidth = 0,
      Color = Colors.Gray,
      TextBoxStyle = 'Normal',
      FontSize = 12
    },
    ['Device~Mute All'] = {
      Position = { 265, 33 },
      Size = { 78, 24 },
      StrokeWidth = 1,
      StrokeColor = Colors.Basic.White,
      ButtonVisualStyle = 'Flat',
      Margin = 0,
      FontSize = 12,
      Legend = '       All Mute',
      Color = Colors.Basic.Red,
      UnlinkOffColor = true,
      OffColor = Colors.BG1,
      IconType = 'Svg',
      Icon = 'PHN2ZyB3aWR0aD0iMjAiIGhlaWdodD0iMjAiIHZpZXdCb3g9IjAgMCAyMCAyMCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTEyLjM4NzUgNC4yMDgxMVYzLjk1MDc5QzEyLjM4NzUgMy4zMDA4IDEyLjExNjUgMi42Nzc0MyAxMS42MzQxIDIuMjE3ODJDMTEuMTUxNyAxLjc1ODIxIDEwLjQ5NzQgMS41IDkuODE1MTUgMS41QzkuMTMyOTIgMS41IDguNDc4NjMgMS43NTgyMSA3Ljk5NjIyIDIuMjE3ODJDNy41MTM4MSAyLjY3NzQzIDcuMjQyOCAzLjMwMDggNy4yNDI4IDMuOTUwNzlWOS4xNDY0NUwxMi4zODc1IDQuMjA4MTFaIiBmaWxsPSJ3aGl0ZSIvPgo8cGF0aCBkPSJNMTQuMDk4MSA5LjYyNDM0QzE0LjEwMSAxMC40MjYxIDEzLjg1NiAxMS4yMTA4IDEzLjM5MzYgMTEuODgwN0MxMi45MzEyIDEyLjU1MDUgMTIuMjcxOSAxMy4wNzU4IDExLjQ5ODEgMTMuMzkwOEMxMC43MjQyIDEzLjcwNTggOS44NzAxNyAxMy43OTY3IDkuMDQyNDcgMTMuNjUyQzguMjE0NzggMTMuNTA3NCA3LjQ1MDE3IDEzLjEzMzcgNi44NDQwNiAxMi41Nzc1TDguMTMwMjQgMTEuMzUyMUM4LjU5Mzk5IDExLjc0NzggOS4xOTI2MyAxMS45Njk5IDkuODE1MTMgMTEuOTc3MUMxMC40OTc0IDExLjk3NzEgMTEuMTUxNiAxMS43MTg5IDExLjYzNDEgMTEuMjU5M0MxMi4xMTY1IDEwLjc5OTYgMTIuMzg3NSAxMC4xNzYzIDEyLjM4NzUgOS41MjYyOFY3LjMwODMyTDE1LjUgNC4zNDI4NUwxNC43NDEyIDMuNjE5ODdMMy41IDE0LjM0MjFMNC4yNTg4NCAxNS4wNTI4TDYuMDA4MDIgMTMuMzg2M0M2Ljg3OTM4IDE0LjE4NSA4LjAwNzM5IDE0LjY4MTQgOS4yMTA2MiAxNC43OTU1VjE2LjY4MjZINy4wMzY5OFYxNy44MUgxMi41Njc1VjE2LjY4MjZIMTAuMzkzOVYxNC43OTU1QzExLjczMjMgMTQuNjU5NyAxMi45NzEgMTQuMDU4MyAxMy44NzI5IDEzLjEwNjNDMTQuNzc0NyAxMi4xNTQ0IDE1LjI3NjMgMTAuOTE4OSAxNS4yODE0IDkuNjM2NTZWOC4xNzgzNEgxNC4wOTgxVjkuNjI0MzRaIiBmaWxsPSJ3aGl0ZSIvPgo8cGF0aCBkPSJNNS42NzM2NCAxMC42NTM3QzUuNTU5NjYgMTAuMzIxMSA1LjQ5ODk0IDkuOTc0MTQgNS40OTM1NiA5LjYyNDM2VjguMTY2MTRINC4yOTc0MlY5LjYyNDM2QzQuMzExNjcgMTAuMjgxMyA0LjQ1NTY0IDEwLjkyOTggNC43MjE4NCAxMS41MzZMNS42NzM2NCAxMC42NTM3WiIgZmlsbD0id2hpdGUiLz4KPC9zdmc+Cg==',
      HTextAlign = 'Left'
    },
    ['Device~Power Save'] = {
      Position = { 436, 35 },
      Size = { 34, 20 },
      StrokeWidth = 1,
      StrokeColor = Colors.Basic.White,
      ButtonVisualStyle = 'Flat',
      Color = Colors.Gray,
      UnlinkOffColor = true,
      OffColor = Colors.BG2,
      Legend = 'ON',
      Margin = 0
    },
    ['Device~Preset'] = {
      Style = 'ComboBox',
      Position = { 559, 33 },
      Size = { 102, 24 },
      StrokeWidth = 0,
      Color = Colors.Basic.Primary,
      CornerRadius = 12,
      FontSize = 12,
      TextColor = { 255, 255, 255 }
    },
    ['Device~Status'] = {
      Position = { 489, 4 },
      Size = { 182, 16 },
      FontSize = 12
    },
    ['Audio Ch Position'] = {
      Style = 'None'
    },
    ['Camera Ch Position'] = {
      Style = 'None'
    }
  };

  -- Channel panels
  for i,n in ipairs(Channels) do
    table.insert(graphics, {
      Type = 'GroupBox',
      Fill = Colors.BG1,
      Position = { 249 + 71 * (i-1), 66 },
      Size = { 70, 104 }
    });
    table.insert(graphics, {
      Type = 'GroupBox',
      Fill = Colors.BG2,
      Position = { 249 + 71 * (i-1), 66 },
      Size = { 70, 18 }
    });
    table.insert(graphics, {
      Type = 'Label',
      Text = n,
      Color = Colors.Basic.White,
      Position = { 249 + 71 * (i-1), 66 },
      Size = { 70, 18 },
      IsBold = true
    });
    table.insert(graphics, {
      Type = 'GroupBox',
      Fill = Colors.BG2,
      Position = { 249 + 71 * (i-1) + 2, 66 + 45 },
      Size = { 66, 55 },
      CornerRadius = 2
    });
    layout[('Channels~%s~%s'):format(n, 'Name')] = {
      Position = { 249 + 71 * (i-1) + 5, 66 + 22 },
      Size = { 60, 18 },
      Color = Colors.Gray,
      StrokeWidth = 0,
      FontSize = 10
    };
    layout[('Channels~%s~%s'):format(n, 'Mute')] = {
      Position = { 249 + 71 * (i-1) + 8, 66 + 54 },
      Size = { 54, 18 },
      Color = Colors.Basic.Red,
      Legend = 'Mute',
      FontSize = 10,
      IsBold = true,
      CornerRadius = 4,
      StrokeWidth = 1,
      StrokeColor = Colors.Basic.White,
      ButtonVisualStyle = 'Flat',
      UnlinkOffColor = true,
      OffColor = Colors.BG2
    };
    for j=1,4 do
      layout[('Channels~%s~%s %d'):format(n, 'Signal LED', j)] = {
        Position = { 249 + 71 * (i-1) + 11 + 13 * (j-1), 66 + 81 },
        Size = { 9, 9 },
        Margin = 0,
        CornerRadius = 5,
        StrokeWidth = 0,
        UnlinkOffColor = true,
        OffColor = Colors.Signal.None,
        Color = (j == 4 and Colors.Signal.Red
             or (j == 3 and Colors.Signal.Yellow
             or Colors.Signal.Green))
      }
    end;
  end;

  return layout, graphics;

end;

--[[ Runtime ]]--
if(not Controls) then return; end;
json = require('rapidjson');

-- Utility functions
function contains(t, v)
  for _,c in pairs(t) do
    if(c == v) then return true; end;
  end;
  return false;
end;

-- Control helper
Ctls = {};
for n,c in pairs(Controls) do
  local t = Ctls;
  for parent in n:gmatch('([^~]+)~') do
    if(not t[parent]) then t[parent] = {}; end;
    t = t[parent];
  end;
  t[n:match('([^~]+)$')] = c;
end;

-- [[ GUI Helpers ]] --

-- Connection mode select
local connectionModes = { 'Discovery', 'Manual' };
Ctls.Device['Connection Mode'].Choices = connectionModes;
if(not contains(connectionModes, Ctls.Device['Connection Mode'].String)) then
  Ctls.Device['Connection Mode'].String = connectionModes[1];
end;

function connModeSwitch()
  local manual = Ctls.Device['Connection Mode'].String == 'Manual';
  Ctls.Device['IP Address'].IsInvisible = not manual;
  Ctls.Device['Select'].IsInvisible = manual;
end; connModeSwitch();
Ctls.Device['Connection Mode'].EventHandler = connModeSwitch;

-- Power save graphic
function powerSwitch()
  local onSVG = 'PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzNiAyMCI+PHBhdGggZD0iTTcsM0gyN2E3LDcsMCwwLDEsNyw3aDBhNyw3LDAsMCwxLTcsN0g3YTcsNywwLDAsMS03LTdIMEE3LDcsMCwwLDEsNywzWiIgc3R5bGU9ImZpbGw6I2QyZTBlZCIvPjxwYXRoIGQ9Ik0yNiwyMEExMCwxMCwwLDEsMCwxNiwxMCwxMCwxMCwwLDAsMCwyNiwyMFoiIHN0eWxlPSJmaWxsOiM2ODk5YzY7ZmlsbC1ydWxlOmV2ZW5vZGQiLz48L3N2Zz4=';
  local offSVG = 'PHN2ZyB3aWR0aD0iMzYiIGhlaWdodD0iMjAiIHZpZXdCb3g9IjAgMCAzNiAyMCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHJlY3QgeD0iMzYiIHk9IjE3IiB3aWR0aD0iMzQiIGhlaWdodD0iMTQiIHJ4PSI3IiB0cmFuc2Zvcm09InJvdGF0ZSgtMTgwIDM2IDE3KSIgZmlsbD0iI0U3RTdFNyIvPgo8cGF0aCBmaWxsLXJ1bGU9ImV2ZW5vZGQiIGNsaXAtcnVsZT0iZXZlbm9kZCIgZD0iTTEwIC04LjU5MDg2ZS0wN0M0LjQ3NzE1IC0xLjMzMzU1ZS0wNiAxLjM4MDk3ZS0wNiA0LjQ3NzE1IDguODk2MzZlLTA3IDEwQzMuOTgzMDRlLTA3IDE1LjUyMjggNC40NzcxNSAyMCAxMCAyMEMxNS41MjI4IDIwIDIwIDE1LjUyMjggMjAgMTBDMjAgNC40NzcxNSAxNS41MjI4IC0zLjg0NjI2ZS0wNyAxMCAtOC41OTA4NmUtMDdaIiBmaWxsPSIjQjJCMkIyIi8+Cjwvc3ZnPgo=';
  Ctls.Device['Power Save'].Style = json.encode({
    DrawChrome = false,
    Legend = '',
    IconData = Ctls.Device['Power Save'].Boolean and onSVG or offSVG
  });
end; powerSwitch();

-- Button styling
function muteDisplay()
  for i,n in ipairs(Channels) do
    Ctls.Channels[n].Mute.Style = json.encode({
      DrawChrome = true,
      Legend = 'Mute',
      StrokeColor = Ctls.Channels[n].Mute.Boolean and '#E74C3C' or '#FFFFFF'
    });
  end;
end; muteDisplay();

function muteAllDisplay()
  Ctls.Device['Mute All'].Style = json.encode({
    DrawChrome = true,
    Legend = '       All Mute',
    StrokeColor = Ctls.Device['Mute All'].Boolean and '#E74C3C' or '#FFFFFF'
  });
end; muteAllDisplay();


-- [[ Discovery ]] --

Discovered = {};
DiscoHandler = function(_, packet)
  if(not packet.Data:match('ATCUDevice')) then return; end;
  local devHash = Crypto.MD5Compute(packet.Data);
  if(Discovered[devHash]) then Discovered[devHash].timeout = DiscoTimeout; return; end;
  local devInfoURL = packet.Data:match('LOCATION: ([^\r\n]+)');
  HttpClient.Download({
    Url = devInfoURL,
    EventHandler = function(t,c,d,e)
      if(c ~= 200) then return; end;
      local model = d:match('modelName>([^<]+)');
      if(contains(DiscoModels, model)) then
        Discovered[devHash] = {
          name = d:match('friendlyName>([^<]+)'),
          timeout = DiscoTimeout, -- 9
          host = packet.Address
        };
        refreshDiscoChoices();
      end;
    end;
  })
end;

DiscoSockets = {};
for i,n in pairs(Network.Interfaces()) do
  print('Discovered networking interface ' .. i .. ': '.. n.Address);
  DiscoSockets[n.Address] = UdpSocket.New();
  DiscoSockets[n.Address].EventHandler = DiscoHandler;
end;

-- Discovery choices
function refreshDiscoChoices()
  local discovered = {};
  for _,d in pairs(Discovered) do
    local duplicate = false;
    for __,dd in pairs(Discovered) do
      if(dd.host == d.host and d ~= dd) then duplicate = true; end;
    end;
    table.insert(discovered, json.encode({
      Text = ('%s - %s'):format(d.host, d.name),
      Color = duplicate and 'red' or nil,
      Host = d.host,
      Name = d.name
    }));
  end; table.sort(discovered);
  Ctls.Device['Select'].Choices = discovered;
end;

DiscoTimer = Timer.New();
function DiscoStep()

  -- expire old devices
  local stillValid = {};
  for h,d in pairs(Discovered) do
    d.timeout = d.timeout - DiscoInterval;
    if(d.timeout > 0) then stillValid[h] = d; end;
  end; Discovered = stillValid;
  refreshDiscoChoices();
  
  -- SSDP discover new devices
  for ip,sock in pairs(DiscoSockets) do
    local ok, err = pcall(sock.Send, sock, '239.255.255.250', 1900, DiscoString);
    if(not ok and err:match('closed')) then
      print('Opening socket on ' .. ip);
      local ok, err = pcall(sock.Open, sock, ip);
      if(ok) then -- pcall bypasses emulation bug
        pcall(sock.JoinMulticast, sock, '239.255.255.250', ip);
      else
        print('Failed to open socket on ' .. ip, err);
      end;
    end;
  end;
  
end; DiscoStep();
DiscoTimer.EventHandler = DiscoStep;
DiscoTimer:Start(DiscoInterval);

-- Auto / manual connection
function reconnect();
  if(Sock.IsConnected) then Sock:Disconnect(); end;
  if(Ctls.Device['IP Address'].String == '') then
    SockStatus = 'IP missing';
  else
    Sock:Connect(Ctls.Device['IP Address'].String, 17300);
    SockStatus = TcpSocket.Events.Reconnect;
  end;
end;
Ctls.Device['IP Address'].EventHandler = reconnect;

Ctls.Device['Select'].EventHandler = function(c)
  local s = json.decode(c.String);
  print(('# Switching to %s at %s'):format(s.Name, s.Host));
  Ctls.Device['IP Address'].String = s.Host;
  reconnect();
  c.String = s.Host;
end;


-- [[ Control ]] --

-- Power save
Ctls.Device['Power Save'].EventHandler = function(c)
  powerSwitch(); -- GUI element
  send('s_powersave', '%d', c.Value);
end;

-- Identify
Ctls.Device['Identify'].EventHandler = function()
  if(not Sock.IsConnected) then return; end;
  send('identify');
end;

-- Preset select
Ctls.Device['Preset'].EventHandler = function(c)
  for id,name in ipairs(PRESETS) do
    if(name == c.String) then
      send('call_preset', '%d', id);
    end;
  end;
end;

-- Individual mutes
MuteDirty = {};
for i,n in ipairs(Channels) do
  Ctls.Channels[n].Mute.EventHandler = function(c)
    muteDisplay();
    MuteDirty[i] = true;
    send('g_input_gain_level', '%d', i-1);
  end;
end;

-- Mute all
Ctls.Device['Mute All'].EventHandler = function(c)
  muteAllDisplay();
  send('s_mute', '%d', c.Value);
end;

-- [[ TCP Socket ]] -- 

Sock = TcpSocket.New();
Sock.ReconnectTimeout = 1;
Sock.ReadTimeout = 7;

Sock.EventHandler = function(_, evt)
  print('# Socket ' .. evt:lower());
  SockStatus = evt;
end;

Sock.Connected = function()
  SockStatus = TcpSocket.Events.Connected;
  print('# Connected to ATND-1061');
  DEVICEID = false;
  DEVICENAME = false;
  PRESETS = false;
  CURRENT_PRESET = false;
  MUTE_ALL = false;
  CHANNEL_NAMES = {};
end;

function send(c, p, ...)
  local pkt = c .. ' S 0000 00 NC';
  if(p) then pkt = pkt .. ' ' .. p:format(...); end;
  if(Properties['Verbose Debug'].Value) then print('<< ' .. pkt); end;
  Sock:Write(pkt .. ' \r');
end;

-- [[ Polling ]] --
CHANNEL_NAMES = {};
RapidChannel = 0;
RapidTimer = Timer.New();
RapidTimer.EventHandler = function()
  if(not Sock.IsConnected) then return; end;
  RapidChannel = RapidChannel % 6 + 1;
  --if(not CHANNEL_NAMES[RapidChannel-1]) then
    send('g_input_channel_settings', '%d', RapidChannel-1);
  --end;
end;
RapidTimer:Start(1/6);

PollTimer = Timer.New();
PollTimer.EventHandler = function()
  if(not Sock.IsConnected) then return; end;
  send('g_deviceid');
  send('g_permission');
  if(not PRESETS) then send('g_name_bank'); end;
  if(not MUTE_ALL) then send('g_mute'); end;
  if(PRESETS and not CURRENT_PRESET) then send('g_preset_number'); end;
  send('g_network');
end;
PollTimer:Start(3);

-- [[ Feedback ]] --
Sock.Data = function()

  local function read() return Sock:ReadLine(TcpSocket.EOL.Any); end;

  for line in read do

    if(Properties['Verbose Debug'].Value) then print('>> ' .. line); end;

    if(line:match('^g_input_gain_level ')) then
      local current = line:match('g_input_gain_level (.*)');
      local chan = current:match(' (%d),') + 1;
      local devState = current:match(',,,(%d),,,') == '1';
      local ctlState = Ctls.Channels[Channels[chan]].Mute.Boolean;
      if(devState ~= ctlState) then
        if(MuteDirty[chan]) then
          local new = ('s_input_gain_level S ' .. current .. '\r'):gsub(',,,%d,,,', ',,,%%d,,,'):format(ctlState and 1 or 0);
          Sock:Write(new);
          MuteDirty[chan] = nil;
        end;
      end;

    elseif(line:match('^g_input_channel_settings ')) then
      local chan = line:match(' (%d),');
      local name = line:match(',"([^"]+)",');
      CHANNEL_NAMES[tonumber(chan)] = name;
      print(('> Got channel %s name: %s'):format(chan, name));
      Ctls.Channels[Channels[chan+1]].Name.String = name;

    elseif(line:match('^g_permission ')) then
      DEVICENAME = line:match(' "([^"]+)",');
      print('> Got device name: ' .. DEVICENAME);
      Ctls.Device['Name'].String = DEVICENAME;

    elseif(line:match('^g_deviceid ')) then
      DEVICEID = tonumber(line:match('([0-9a-fA-F]+) $'), 16);
      print('> Got device ID: ' .. DEVICEID);
      Ctls.Device['Device ID'].String = ('%d'):format(DEVICEID);

    elseif(line:match('^g_network ')) then
      local nIp, nPort = line:match('NC [^,]*,[^,]*,[^,]*,[^,]*,[^,]*,[^,]*,[^,]*,[^,]*,[^,]*,([^,]+),([^,]+)');
      if(nPort ~= NotificationPort) then
        NotificationSocket:Close();
        NotificationSocket:Open('0.0.0.0', tonumber(nPort));
        NotificationPort = nPort;
        print('# Listening for notifications on port ' .. NotificationPort);
      end;
      if(nIp ~= NotificationAddress) then
        for _,n in pairs(Network.Interfaces()) do
          pcall(NotificationSocket.JoinMulticast, NotificationSocket, nIp, n.Address);
        end;
        NotificationAddress = nIp;
        print('# Listening for notifications at ' .. NotificationAddress);
      end;
    
    elseif(line:match('^g_name_bank')) then
      if(not PRESETS) then PRESETS = {}; end;
      local num,name = line:match('(%d+),"(.+)" ?$');
      print(num,name, bitstring.hexstream(line));
      PRESETS[tonumber(num)] = name;
      local choices = {};
      for _,name in ipairs(PRESETS) do table.insert(choices, name); end;
      Ctls.Device['Preset'].Choices = choices;

    elseif(line:match('^g_preset_number')) then
      CURRENT_PRESET = tonumber(line:match('(%d+) ?$'));
      if(PRESETS[CURRENT_PRESET]) then
        Ctls.Device['Preset'].String = PRESETS[CURRENT_PRESET];
      else
        Ctls.Device['Preset'].String = string.format('Preset %d', CURRENT_PRESET);
      end;

    elseif(line:match('^g_mute')) then
      local muteEnabled = tonumber(line:match('(%d) ?$'));
      MUTE_ALL = muteEnabled == '1';
      Ctls.Device['Mute All'].Boolean = MUTE_ALL;
      muteAllDisplay();


    else
      print('> ' .. line);
    end;

  end;
end;

-- [[ Notifications ]] --
NotificationSocket = UdpSocket.New();
NotificationSocket.EventHandler = function(_, packet)

  if(Properties['Verbose Debug'].Value) then print('M> ' .. packet.Data); end;

  if(packet.Address == Ctls.Device['IP Address'].String) then

    if(packet.Data:match('^MD')) then MulticastStatus = os.time(); end;

    if(packet.Data:match('^MD level_meter_notice')) then
      local meters = { packet.Data:match('MD level_meter_notice %d+ %d+ NC ' .. string.rep('([-0-9]+),', 6)) };
      for channel, v in ipairs(meters) do
        for i, control in ipairs(Ctls.Channels[Channels[channel]]['Signal LED']) do
          control.Boolean = (tonumber(v) >= MeterThresholds[i]);
        end;
      end;

    elseif(packet.Data:match('^MD recall_preset_notice')) then
      local presetNo = packet.Data:match('MD recall_preset_notice %d+ %d+ NC (%d+)');
      Ctls.Device['Preset'].String = PRESETS[tonumber(presetNo)];
      print('> Preset ' .. presetNo .. ' was recalled.');

    elseif(packet.Data:match('^MD input_gain_level_notice')) then
      local channel, muted = packet.Data:match('NC (%d+),%d+,%d+,%d+,([01])');
      Ctls.Channels[Channels[channel+1]]['Mute'].Boolean = (muted == '1');
      muteDisplay();

    elseif(packet.Data:match('^MD camera_control_notice')) then
      local audio, camera = packet.Data:match('NC 1,(%d+),%d+,%d+,(%d+)');
      if(audio) then Controls['Audio Ch Position'].String = audio; end;
      if(camera) then Controls['Camera Ch Position'].String = camera; end;

    elseif(packet.Data:match('^MD powersave_notice')) then
      local powerSaving = packet.Data:match('NC ([01])');
      Ctls.Device['Power Save'].Boolean = powerSaving == '1';
      powerSwitch();

    elseif(packet.Data:match('^MD mute_notice')) then
      local muteEnabled = packet.Data:match('NC ([01])');
      MUTE_ALL = muteEnabled == '1';
      Ctls.Device['Mute All'].Boolean = MUTE_ALL;
      muteAllDisplay();

    else
      print('M>> ' .. packet.Data);

    end;

  end;
end;

-- [[ Power Save Disable ]] --
PSDisplay = Timer.New();
PSDisplay.EventHandler = function()

  for _,c in ipairs({
    Ctls.Device['Preset'],
    Ctls.Device['Mute All'],
    Ctls.Device['Identify'],
    Ctls.Device['Connection Mode'],
    Ctls.Device['Select'],
    Ctls.Device['IP Address']
  }) do c.IsDisabled = Ctls.Device['Power Save'].Boolean; end;

  for _,c in pairs(Ctls.Channels) do
    for _,ctl in pairs(c) do
      ctl.IsDisabled = Ctls.Device['Power Save'].Boolean;
    end;
  end;

end;
PSDisplay:Start(0.1);

-- Start connection
reconnect();

StatusTimer = Timer.New();
StatusTimer.EventHandler = function()
  if(SockStatus == TcpSocket.Events.Reconnect) then
    Ctls.Device['Status'].Value = 5;
    Ctls.Device['Status'].String = 'connecting';
  elseif(SockStatus ~= TcpSocket.Events.Connected) then
    Ctls.Device['Status'].Value = 2;
    Ctls.Device['Status'].String = (
      SockStatus == 'IP missing' and SockStatus or SockStatus:lower()
    );
  else
    if(os.time() - (MulticastStatus or 0) > 3) then
      Ctls.Device['Status'].Value = 1;
      Ctls.Device['Status'].String = 'no multicast';
    else
      Ctls.Device['Status'].Value = 0;
      Ctls.Device['Status'].String = 'connected';
    end;
  end;
end;
StatusTimer:Start(0.5);

