-- Audio Technica Dante Mics
-- by Audio Technica
-- September 2022

-- March 2024
-- resolved bug that would create boot loops on design start
-- Eugene Dunn

VERSION = '1.1.1.0';

PluginInfo = {

  Name = 'Audio Technica~Dante Mics v' .. VERSION,
  Author = 'Audio Technica',

  -- Reflect Compatibility
  IsManaged = true,
  Manufacturer = 'Audio Technica',
  Model = 'Dante Microphone',
  Type = Reflect and Reflect.Types.Microphone or 0,

  Id = '5c078849-571e-46b0-a197-2e3a6e6f2dca',
  Version = VERSION:match('^(%d+%.%d+%.%d+)'),
  BuildVersion = VERSION,

  Description = 'A plugin for controlling Audio Technica Dante microphones with Q-SYS.',

};

Colors = {
  Dark = { 0x21, 0x2A, 0x34 },
  Mid = { 0x30, 0x3E, 0x4C },
  Light = { 0x68, 0x75, 0x7D },
  White = { 0xFF, 0xFF, 0xFF },
  Red = { 0xE7, 0x4C, 0x3C },
  Purple = { 0xC6, 0x68, 0x86 },
  Primary = { 0x68, 0x99, 0xC6 }
};

Logo = '';

function GetProperties()
  return {
    {
      Name = 'Mic Count',
      Type = 'integer',
      Min = 1,
      Max = 16,
      Value = 2
    },{
      Name = 'Debug Print',
      Type = 'enum',
      Choices = {'None', 'Connection', 'GPIO', 'All'},
      Value = 'None'
    }
  }
end;

function RectifyProperties(props)
  if props['plugin_show_debug'].Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

function GetColor()
  return Colors.Dark;
end;

function GetPrettyName(props)
  return ('Audio-Technica Dante Mic%s v%s'):format(
    props['Mic Count'].Value > 1 and 's' or '',
    PluginInfo.Version
  )
end;

function GetControls(props)
  return {
    { Name = 'Gain', ControlType = 'Text', DefaultValue = '+40dB' },
    { Name = 'Mute', ControlType = 'Button', ButtonType = 'Toggle', UserPin = true, PinStyle = 'Both' },
    { Name = 'Phantom Power', ControlType = 'Button', ButtonType = 'Toggle', UserPin = true, PinStyle = 'Both' },
    { Name = 'Low Cut Filter', ControlType = 'Button', ButtonType = 'Toggle', UserPin = true, PinStyle = 'Both' },
    { Name = 'Mute Logic', ControlType = 'Text', DefaultValue = 'Toggle mute on button press' },
    { Name = 'Device Name', ControlType = 'Text', Count = props['Mic Count'].Value },
    {
      Name = 'Device Press', ControlType = 'Indicator', IndicatorType = 'Led',
      Count = props['Mic Count'].Value, UserPin = true, PinStyle = 'Output'
    },
    {
      Name = 'Status', ControlType = 'Indicator',
      IndicatorType = Reflect and 'StatusGP' or 'Status',
      UserPin = true, PinStyle = 'Output'
    }
  }
end;

function GetControlLayout(props)

  local extraHeight = 35 * props['Mic Count'].Value;
  local sizes = { full = { 274, 24 }, quarter = { 64, 24 }, three_quarter = { 204, 24 }, label = { 100, 24 } };

  local layout = {
    Status = { Position = { 213, 4 }, Size = { 210, 16 } },

    Gain = {
      FontSize = 12, Font = 'Roboto', FontStyle = 'Light',
      Position = { 130, 49 }, Size = sizes.quarter, Margin = 0,
      StrokeWidth = 0, Style = 'ComboBox', Color = Colors.Dark, TextColor = Colors.White
    },
    Mute = {
      Legend = 'Mute', FontSize = 12, Font = 'Roboto', FontStyle = 'Light',
      Position = { 200, 49 }, Size = sizes.quarter, Margin = 0, CornerRadius = 0, StrokeWidth = 0,
      UnlinkOffColor = true, OffColor = Colors.Dark, Color = Colors.Red, ButtonVisualStyle = 'Flat'
    },
    ['Phantom Power'] = {
      Legend = 'Phantom', FontSize = 12, Font = 'Roboto', FontStyle = 'Light',
      Position = { 270, 49 }, Size = sizes.quarter, Margin = 0, CornerRadius = 0, StrokeWidth = 0,
      UnlinkOffColor = true, OffColor = Colors.Dark, Color = Colors.Purple, ButtonVisualStyle = 'Flat'
    },
    ['Low Cut Filter'] = {
      Legend = 'Low Cut', FontSize = 12, Font = 'Roboto', FontStyle = 'Light',
      Position = { 340, 49 }, Size = sizes.quarter, Margin = 0, CornerRadius = 0, StrokeWidth = 0,
      UnlinkOffColor = true, OffColor = Colors.Dark, Color = Colors.Primary, ButtonVisualStyle = 'Flat'
    },

    ['Mute Logic'] = {
      FontSize = 12, Font = 'Roboto', FontStyle = 'Light',
      Position = { 130, 84 }, Size = sizes.full, Margin = 0,
      StrokeWidth = 0, Style = 'ComboBox', Color = Colors.Dark, TextColor = Colors.White
    }

  };

  for i=1,props['Mic Count'].Value do
    local suffix = props['Mic Count'].Value == 1 and '' or (' %d'):format(i)
    layout['Device Name' .. suffix] = {
      FontSize = 12, Font = 'Roboto', FontStyle = 'Light',
      Position = { 130, 124 + i * 35 }, Size = sizes.three_quarter,
      Style = 'ComboBox', Color = Colors.Dark, StrokeWidth = 0, TextColor = Colors.White
    };
    layout['Device Press' .. suffix] = {
      Legend = 'Press', FontSize = 12, Font = 'Roboto', FontStyle = 'Light',
      Style = 'Button', StrokeWidth = 0, Margin = 0, CornerRadius = 0, ButtonVisualStyle = 'Flat',
      Position = { 340, 124 + i * 35 }, Size = sizes.quarter,
      UnlinkOffColor = true, OffColor = Colors.Dark, Color = Colors.Primary, TextColor = Colors.White,
      PrettyName = ('Device %d Button Pressed'):format(i)
    };
  end

  local function label(text, position)
    return {
      Type = 'Label',
      Text = text,
      Position = position,
      Size = sizes.label,
      IsBold = true,
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.White
    }
  end;

  local graphics = {
    { -- Background
      Type = 'GroupBox',
      Fill = Colors.Light,
      Position = { 0, 0 },
      Size = { 427, 174 + extraHeight }
    },{ -- Header
      Type ='GroupBox',
      Fill = Colors.Dark,
      Position = { 0, 0 },
      Size = { 427, 24 }
    },{ -- Top Panel
      Type = 'GroupBox',
      Fill = Colors.Mid,
      Position = { 0, 24 },
      Size = { 427, 109 }
    },{ -- Bottom Panel
      Type = 'GroupBox',
      Fill = Colors.Mid,
      Position = { 0, 134 },
      Size = { 427, 40 + extraHeight }
    },{
      Type = 'Svg',
      Image = Logo,
      Position = { 10, 5 },
      Size = { 78, 14 }
    },{
      Type = 'Label',
      Text = 'Dante Mics',
      Position = { 96, 3 },
      Size = { 88, 16 },
      IsBold = true,
      FontSize = 12,
      HTextAlign = 'Left',
      Color = Colors.White
    },
    label('Preamp', { 22, 49 }),
    label('Mute Logic', { 22, 84 })
  };

  if(props['Mic Count'].Value == 1) then
    table.insert(graphics, label('Device Name', { 22, 159 }));
  else
    for i=1,props['Mic Count'].Value do
      table.insert(graphics, label(('Device %d'):format(i), { 22, 124 + i * 35 }));
    end
  end;

  return layout, graphics;

end;

if Controls then 

  -- helper for unary variable controls
  Ctls = {};
  for n,c in pairs(Controls) do
    Ctls[n] = type(c) == 'table' and c or {c};
  end

  -- debug print function
  function Debug(source, message, ...)
    local msg = string.format(message, ...);
    if(Properties['Debug Print'].Value == 'All') then
      print(msg);
    elseif(Properties['Debug Print'].Value == source) then
      print(msg);
    end
  end;

  function status(i, s)
    Controls.Status.Value = i;
    Controls.Status.String = s;
  end;

  -- show "Initializing" or Fault state early.
  if(System.IsEmulating) then status(2, 'Emulation is not supported'); end;

  -- Helper function to disable all controls except Status.
  function disableAll(disabled)
    for n,c in pairs(Controls) do
      if(n ~= 'Status') then
        for _,ctl in ipairs(type(c) == 'table' and c or {c}) do
          ctl.IsDisabled = disabled;
        end;
      end;
    end;
  end;

  -- Helper function to apply choices to ComboBox,
  -- and select first option if field is blank.
  function choices(ctl, tbl)
    ctl.Choices = tbl;
    if(ctl.String == '') then
      ctl.String = tbl[1];
    end;
  end;

  choices(Controls.Gain, { '+30dB', '+40dB', '+50dB' });

  choices(Controls['Mute Logic'], {
    'Toggle mute on button press',
    'Momentary press to mute',
    'Momentary press to talk',
    'Auto (momentary w/ tap to toggle)',
    'External (via Control Pins)'
  });

  -- disallow operation in emulation mode
  if(System.IsEmulating) then disableAll(true); return; end;

  -- show error if Dante browser fails to start (e.g. Soft Dante RX missing)
  local ok, err_or_browser = pcall(DanteBrowser.New);
  if(not ok) then status(2, err_or_browser); disableAll(true); return; end;

  disableAll(false); -- enable all controls

  -- [[ Device discovery ]] --
  DanteDevices = {''};
  DeviceObjects = {};
  Browser = err_or_browser;
  Browser.Browse = function(name, change)
    Debug('Connection', 'Device %s %s in DanteBrowser.', name, change:lower());
    if(change == 'ADDED') then
      table.insert(DanteDevices, name);
      for i,c in ipairs(Ctls['Device Name']) do
        if(c.String == name) then
          DeviceObjects[i] = newDeviceIgnoreError(name);
        end;
      end;
    else
      local new_devices = {};
      for _,n in pairs(DanteDevices) do
        if(name ~= n) then
          table.insert(new_devices, n);
        end;
      end;
      DanteDevices = new_devices;
    end;
    table.sort(DanteDevices);
    for i,c in ipairs(Ctls['Device Name']) do
      c.Choices = DanteDevices;
    end;

    -- Start polling timer if not already running
    if(not PollTimerRunning) then
      PollTimer:Start(3);
      PollTimerRunning = true;
    end;
  end;

  -- [[ Send device settings ]] --
  function pushSettings(device)

    local gainCode;
    if(Controls['Gain'].String == '+30dB') then gainCode = 1;
    elseif(Controls['Gain'].String == '+40dB') then gainCode = 2;
    elseif(Controls['Gain'].String == '+50dB') then gainCode = 3;
    else error('Invalid gain setting'); end;

    local bitfield = 0
    | 1 -- remote mode
    | 1 << (Controls.Mute.Boolean and 3 or 2) -- red or green
    | gainCode << 4
    | Controls['Low Cut Filter'].Value << 6
    | Controls['Phantom Power'].Value << 7;

    device:SetGpio(bitfield, 0xFD);

  end;

  -- send to all
  function pushAll()
    for _,d in pairs(DeviceObjects) do
      pushSettings(d);
    end;
  end;

  -- update all on setting change
  Controls['Mute'].EventHandler = pushAll;
  Controls['Phantom Power'].EventHandler = pushAll;
  Controls['Low Cut Filter'].EventHandler = pushAll;

  -- [[ Device registration ]] --
  LastSeen = {}; -- used to expire device entries
  DeviceButtons = {}; -- stores previous button state to detect changes
  function newDevice(name)
    Debug("Connection",'Registering device '..name)
    local device = DanteDevice.New(name);
    LastSeen[name] = Timer.Now();
    device:SetGpio(1, 1) -- remote mode
    device.Gpio = function(t)
      LastSeen[name] = Timer.Now();
      Debug('GPIO', 'GPIO Input state of %s is now: 0x%x', name, t.InputValue);
      local buttonState = (t.InputValue & 2) >> 1;
      if(buttonState == 0 and DeviceButtons[name] == 1) then
        ButtonHandler(name, false);
      elseif(buttonState == 1 and DeviceButtons[name] == 0) then
        ButtonHandler(name, true);
      end;
      DeviceButtons[name] = buttonState;
    end;
    pushSettings(device);
    return device;
  end;

  function newDeviceIgnoreError(name)
    local ok, device_or_err = pcall(newDevice, name);
    if(not ok) then
      if(device_or_err:match('not ready')) then
        Debug('Connection', 'Dante API not ready.');
      else
        error(device_or_err);
      end;
    else
      return device_or_err;
    end
  end;

  -- register / de-register devices on name change
  for i,c in ipairs(Ctls['Device Name']) do
    c.EventHandler = function()
      if(c.String == '') then
        DeviceObjects[i] = nil;
      else
        DeviceObjects[i] = newDeviceIgnoreError(c.String);
      end;
    end;
  end;

  -- [[ Poll device GPIO state ]] --
  PollTimerRunning = false;
  PollTimer = Timer.New();
  PollTimer.EventHandler = function()
    for i,c in ipairs(Ctls['Device Name']) do
      if(DeviceObjects[i] == nil and c.String ~= '') then
        Debug("Connection",'Device '..c.String..' not registered, retrying')
        DeviceObjects[i] = newDeviceIgnoreError(c.String);
      end;
    end;
    for _,d in pairs(DeviceObjects) do
      if d ~= nil then
        d:GetGpio();
      end
    end;
  end;

  -- [[ Button state change handling logic ]] --
  PRESS_TIME = 0;
  function ButtonHandler(name, state)

    -- Show state on LED
    for i,c in ipairs(Ctls['Device Name']) do
      if(c.String == name) then
        Ctls['Device Press'][i].Boolean = state;
      end;
    end

    local logic = Controls['Mute Logic'].String;

    if(logic == 'Toggle mute on button press') then
      if(state) then
        Controls['Mute'].Boolean = not Controls['Mute'].Boolean;
      end;
    elseif(logic == 'Momentary press to mute') then
      Controls['Mute'].Boolean = state;
    elseif(logic == 'Momentary press to talk') then
      Controls['Mute'].Boolean = not state;
    elseif(logic == 'Auto (momentary w/ tap to toggle)') then
      if(state) then -- always toggle state on press
        Controls['Mute'].Boolean = not Controls['Mute'].Boolean;
        PRESS_TIME = Timer.Now();
      else -- if press was long, toggle back on release
        if(Timer.Now() - PRESS_TIME > 0.5) then
          Controls['Mute'].Boolean = not Controls['Mute'].Boolean;
        end;
      end
    elseif(logic == 'External (via control pins)') then
      -- do nothing
    else
      status(2, 'invalid mute logic');
    end;

    pushAll();

  end;

  -- [[ Device Status Reporting ]] --
  StartTime = Timer.Now();
  StatusTimer = Timer.New();
  StatusTimer.EventHandler = function()
    if(Timer.Now() - StartTime < 15) then return; end;
    local missing = {};
    for i,c in ipairs(Ctls['Device Name']) do
      local device_seen = LastSeen[c.String];
      local recent_reply = device_seen and ((Timer.Now() - LastSeen[c.String]) < 5);
      local present = (c.String == '' or recent_reply);
      -- for _,n in ipairs(DanteDevices) do
      --   if(n == c.String) then present = true; end;
      -- end; -- NOTE: this expires way too slowly.
      if(not present) then table.insert(missing, c.String); end;
    end;
    local allPresent = (#missing == 0);
    status(
      allPresent and 0 or 4,
      allPresent and '' or (table.concat(missing, ', ') .. ' missing')
    );
  end;
  StatusTimer:Start(1);
end