--[[

  MAC Address Monitor Plugin for Q-SYS
  Author: Michael Goodyear
  Email: michael@locimation.com
  Version: 1.3.0
  
  (C) Copyright 2020 Locimation Pty Ltd

  Permission is hereby granted, free of charge,
  to any person obtaining a copy of this software
  and associated documentation files (the "Software"),
  to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the
  following conditions:

  The above copyright notice and this permission
  notice shall be included in all copies or substantial
  portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY
  OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
  EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

]]

PluginInfo = {
  Name = "Locimation~MAC Address Monitor",
  Description = "Initial release",
  Version = "1.0.0",
  Id = "91d390b8-4958-4f81-867e-d2f31b23bf8a"
}

MIT_FOOTER = '';

function GetPrettyName()
  return "MAC Address Monitor v" .. PluginInfo.Version;
end;

function GetColor()
  return {0x6F,0x55,0x9D};
end;

function GetProperties()
  return {
    {
      Name = 'Device Count',
      Type = 'integer',
      Min = 1,
      Max = 24,
      Value = 1
    },
    {
      Name = 'Poll Interval',
      Type = 'double',
      Min = 0.5,
      Max = 30,
      Value = 1
    },
    {
      Name = 'Community',
      Type = 'string',
      Value = 'public'
    }
  }
end;

function GetControls(props)

  return {
    { Name = 'IP', ControlType = 'Text' },
    { Name = 'Device MAC Address', ControlType = 'Text', Count = props['Device Count'].Value },
    {
      Name = 'Device Port',
      ControlType = 'Indicator',
      IndicatorType = 'Text',
      Count = props['Device Count'].Value,
      UserPin = true,
      PinStyle = 'Output'
    },
    {
      Name = 'Status',
      ControlType = 'Indicator',
      IndicatorType = 'Status',
      UserPin = true,
      PinStyle = 'Output',
      PrettyName = 'System~Status'
    }
  }

end;

function GetControlLayout(props)
  local height = props['Device Count'].Value * 16;
  local controls = {
    ['Status'] = {
      Position = { 227, 95 },
      Size = { 144, 16 },
      Margin = 1
    },
    ['IP'] = {
      Position = { 79, 95 },
      Size = { 144, 16 },
      Margin = 1
    };
  }
  for i=1,props['Device Count'].Value do
    local suffix = (props['Device Count'].Value == 1) and '' or (' %d'):format(i);
      
    controls['Device MAC Address' .. suffix] = {
      Position = { 79, 143 + (i-1) * 16 },
      Size = { 144, 16 },
      Margin = 1
    };
    controls['Device Port' .. suffix] = {
      Position = { 227, 143 + (i-1) * 16 },
      Size = { 144, 16 },
      Margin = 1
    };
  end;

  local graphicsHeight = props['Device Count'].Value * 16;

  local graphics = {
    { Type = 'GroupBox', Position = { 0, 0 }, Size = { 450, 202 + graphicsHeight }, Fill = { 0xFF, 0xFF, 0xFF } },
    { Type = 'Label', Text = 'IP Address',  Position = { 79, 79 },   Size = { 144, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Status',      Position = { 227, 79 }, Size = { 144, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'MAC Address', Position = { 79, 127 },  Size = { 144, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Port',        Position = { 227, 127 }, Size = { 144, 16 }, HTextAlign = 'Left' },
    {
      Type = 'Image',
      Position = { 0, 175 + graphicsHeight },
      Size = { 450, 20 },
      Image = MIT_FOOTER
    },
    {
      Type = 'GroupBox',
      Position = { 0,  0 },
      Size = { 450, 56 },
      Fill = { 0xEE, 0xEE, 0xEE }
    },
    {
      Type = 'Label',
      Text = 'MAC Address Monitor v' .. PluginInfo.Version,
      FontSize = 24,
      Position = { 0,  0 },
      Size = { 450, 56 },
      HTextAlign = 'Center',
      FontStyle = 'Light'
    },
  }

  return controls, graphics;

end;

if(not Controls) then return; end;

MAC_PREFIX = 'SNMPv2-SMI::mib-2.17.4.3.1.2.';
POLL_INTERVAL = Properties['Poll Interval'].Value;
DEBUG = true;

Ctls = {};
for n,c in pairs(Controls) do
  Ctls[n] = type(c) == 'table' and c or {c};
end;

-- [[ Session management & events ]] --
LAST_REPLY = {};
function ipChange()
  Device = SNMPSession.New(SNMP.SessionType.V2c);
  Device:setCommunity(Properties.Community.Value);
  Device:setHostName(Controls.IP.String);
  Device:startSession();
  Device.ErrorHandler = function(r) print('ERROR'); end;
  Device.EventHandler = function(r)
    
    if(DEBUG) then print('> ' .. r.OID .. ' = ' .. r.Value); end;
    
    LAST_REPLY['system'] = os.time();
    
    local macOid = r.OID:match('^SNMPv2%-SMI::mib%-2%.17%.4%.3%.1%.2%.(.+)$');
    if(not macOid) then return; end;
    
    local mac = macOid:gsub('(%d+)', function(n) return string.format('%02x', n); end):gsub('%.', ':');
    
    LAST_REPLY[mac] = os.time();
    
    for i,c in ipairs(Ctls['Device MAC Address']) do
      if(c.String:lower() == mac:lower()) then
        Ctls['Device Port'][i].String = r.Value;
      end;
    end;
    
  end; Poll();
end;
Controls.IP.EventHandler = ipChange;

-- [[ Polling ]] --
PollIndex = 1;
PollQueries = #Ctls['Device MAC Address'] + 1;
LAST_QUERY = {};
function Poll(i)

  if(not Device) then return; end;

  -- Increment poll index
  if(not i) then
    PollIndex = (PollIndex + 1) % PollQueries;
    i = PollIndex;
  end;
  
  -- Check system is reachable once per poll cycle
  if(i == 0) then
    Device:getRequest('iso.3.6.1.2.1.1.1.0');
    if(DEBUG) then print('< iso.3.6.1.2.1.1.1.0'); end;
    return;
  end;
  
  -- Validate MAC Address
  local c = Ctls['Device MAC Address'][i];
  local validMac = c.String:match('%x%x:%x%x:%x%x:%x%x:%x%x:%x%x');
  c.Color = validMac and '' or (c.String ~= '' and 'red' or '');
  if(not validMac) then
    Ctls['Device Port'][i].String = '';
    return;
  end;
  
  -- Poll OID
  local macOid = c.String:gsub('(%x%x)', function(h) return tonumber(h, 16) end):gsub(':','.');
  LAST_QUERY[c.String:lower()] = os.time();
  Device:getRequest(MAC_PREFIX .. macOid);
  if(DEBUG) then print('< ' .. MAC_PREFIX .. macOid); end;
  
end;
PollTimer = Timer.New();
PollTimer.EventHandler = function() Poll() end; -- avoid passing timber obj to fn
PollTimer:Start(POLL_INTERVAL / PollQueries);

-- Poll on MAC change
for i,c in ipairs(Ctls['Device MAC Address']) do
  c.EventHandler = function()
    Ctls['Device Port'][i].String = '';
    Poll(i);
  end;
end;

-- [[ Display ]] --
DisplayTimer = Timer.New();
DisplayTimer.EventHandler = function();

  -- Device status expiry
  local deviceOnline = (os.time() - (LAST_REPLY['system'] or 0) <= POLL_INTERVAL * 2);
  Controls.Status.Value = deviceOnline and 0 or 2;
  Controls.Status.String = deviceOnline and '' or 'no response';

  -- MAC Address expiry
  for i,c in ipairs(Ctls['Device MAC Address']) do
    Ctls['Device Port'][i].IsDisabled = (c.String == '') or (not deviceOnline);
    if(not deviceOnline) then Ctls['Device Port'][i].String = ''; return; end;
    local last_seen = LAST_REPLY[c.String:lower()] or 0;
    local last_query = LAST_QUERY[c.String:lower()] or 0;
    if((last_query - last_seen) > (POLL_INTERVAL * 3)) then
      Ctls['Device Port'][i].String = 'Not Found';
    end;
  end;
  
end;
DisplayTimer:Start(1);

-- start
ipChange();