--[[

  Network Link Monitor Plugin for Q-SYS
  Author: Michael Goodyear
  Email: michael@locimation.com
  Version: 1.4.0
  
  (C) Copyright 2020 Locimation Pty Ltd
  Permission is hereby granted, free of charge,
  to any person obtaining a copy of this software
  and associated documentation files (the "Software"),
  to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the
  following conditions:

  The above copyright notice and this permission
  notice shall be included in all copies or substantial
  portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY
  OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
  EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

]]

PluginInfo = {
  Name = "Locimation~Network Link Monitor",
  Description = "Added Uptime polling",
  Version = "1.5.0",
  Id = "ed832ccd-663e-4b41-8be9-9c182550b6a0"
}

MIT_FOOTER = '';

function GetPrettyName()
  return "Net Link Monitor v" .. PluginInfo.Version;
end;

function GetColor()
  return {0x6F,0x55,0x9D};
end;

function GetProperties()
  return {
    {
      Name = 'Link Count',
      Type = 'integer',
      Min = 4,
      Max = 24,
      Value = 8
    },
    {
      Name = 'Poll Interval',
      Type = 'double',
      Min = 0.3,
      Max = 120,
      Value = 0.3
    },
    {
      Name = 'Packet Interval',
      Type = 'double',
      Min = 0.01,
      Max = 0.5,
      Value = 0.01
    },
    {
      Name = 'Community',
      Type = 'string',
      Value = 'public'
    }
  }
end;

function GetControls(props)

  return {
    { Name = 'IP',      ControlType = 'Text' },
    { Name = 'Name',    ControlType = 'Indicator', IndicatorType = 'Text', UserPin = true, PinStyle = 'Output', PrettyName = 'System~Name' },
    { Name = 'Model',   ControlType = 'Indicator', IndicatorType = 'Text', UserPin = true, PinStyle = 'Output', PrettyName = 'System~Model' },
    { Name = 'Contact', ControlType = 'Indicator', IndicatorType = 'Text', UserPin = true, PinStyle = 'Output', PrettyName = 'System~Contact' },
    { Name = 'Uptime',  ControlType = 'Indicator', IndicatorType = 'Text', UserPin = true, PinStyle = 'Output', PrettyName = 'System~Uptime'},
    { Name = 'Link Index', ControlType = 'Text', Count = props['Link Count'].Value },
    {
      Name = 'Link Up',
      ControlType = 'Indicator',
      IndicatorType = 'Led',
      Count = props['Link Count'].Value,
      UserPin = true,
      PinStyle = 'Output'
    },
    {
      Name = 'Suppress',
      ControlType = 'Button',
      ButtonType = 'Toggle',
      Count = props['Link Count'].Value,
      UserPin = true,
      PinStyle = 'Output'
    },
    {
      Name = 'Status',
      ControlType = 'Indicator',
      IndicatorType = 'Status',
      UserPin = true,
      PinStyle = 'Output',
      PrettyName = 'System~Status'
    },
    {
      Name = 'Reachable',
      ControlType = 'Indicator',
      IndicatorType = 'Led',
      UserPin = true,
      PinStyle = 'Output',
      PrettyName = 'System~Reachable'
    }
  }

end;

function GetControlLayout(props)
  local width = props['Link Count'].Value * 36;
  local controls = {
    ['Name'] = {
      Position = { 100, 80 },
      Size = { width, 16 },
      Margin = 1
    },
    ['Reachable'] = {
      Position = { 100, 96 },
      Size = { 16, 16 },
      Color = { 0, 255, 0 },
      UnlinkOffColor = true,
      OffColor = { 124, 0, 0 },
      Margin = 3
    },
    ['Status'] = {
      Position = { 116, 96 },
      Size = { width - 16, 16 },
      Margin = 1
    },
    ['Model'] = {
      Position = { 100, 112 },
      Size = { width, 16 },
      Margin = 1
    },
    ['Contact'] = {
      Position = { 100, 128 },
      Size = { width, 16 },
      Margin = 1
    },
    ['Uptime'] = {
      Position = { 100, 144 },
      Size = { width, 16 },
      Margin = 1
    },
    ['IP'] = {
      Position = { 100, 160 },
      Size = { width, 16 },
      Margin = 1
    };
  }
  for i=1,props['Link Count'].Value do
    controls[('Link Index %d'):format(i)] = {
      Position = { 100 + (i-1) * 36, 176 },
      Size = { 36, 16 },
      Margin = 1
    };
    controls[('Link Up %d'):format(i)] = {
      Position = { 100 + (i-1) * 36, 192 },
      Size = { 36, 16 },
      Color = { 0, 255, 0 },
      UnlinkOffColor = true,
      OffColor = { 124, 0, 0 },
      Style = 'Button',
      Margin = 1,
      UserPin = true,
      PinStyle = 'Output',
      PrettyName = ('Link Up~%d'):format(i),
      ButtonVisualStyle = 'Flat'
    };
    controls[('Suppress %d'):format(i)] = {
      Position = { 100 + (i-1) * 36, 208 },
      Size = { 36, 16 },
      Color = { 0xEF, 0x9C, 0x00 },
      CornerRadius = 3,
      Style = 'Button',
      Margin = 1,
      UserPin = true,
      PinStyle = 'Output',
      PrettyName = ('Suppress~Link %d'):format(i),
    };
  end;

  local graphicsWidth = math.max(450, width + 85 + 32);

  local graphics = {
    { Type = 'GroupBox', Position = { 0, 0 }, Size = { graphicsWidth, 256 }, Fill = { 0xFF, 0xFF, 0xFF } },
    { Type = 'Label', Text = 'Name',    Position = { 15,  80 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Status',  Position = { 15,  96 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Model',   Position = { 15, 112 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Contact', Position = { 15, 128 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Uptime',  Position = {15, 144},   Size = {80, 16},    HTextAlign = 'Left'},
    { Type = 'Label', Text = 'IP',      Position = { 15, 160 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Link Index',  Position = { 15, 176 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Link Up',     Position = { 15, 192 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    { Type = 'Label', Text = 'Suppress',    Position = { 15, 208 }, Size = { 80, 16 }, HTextAlign = 'Left' },
    {
      Type = 'Image',
      Position = { math.max(0, (graphicsWidth - 450) / 2), 230 },
      Size = { 450, 20 },
      Image = MIT_FOOTER
    },
    {
      Type = 'GroupBox',
      Position = { 0,  0 },
      Size = { graphicsWidth, 56 },
      Fill = { 0xEE, 0xEE, 0xEE }
    },
    {
      Type = 'Label',
      Text = 'Network Link Monitor v' .. PluginInfo.Version,
      FontSize = 24,
      Position = { 14,  0 },
      Size = { graphicsWidth - 28, 56 },
      HTextAlign = 'Left',
      FontStyle = 'Light'
    },
  }

  return controls, graphics;

end;

if(not Controls) then return; end;

-- [[ Control mapping ]] --
MAPS = {
  ['iso.3.6.1.2.1.1.5.0'] = 'Name',
  ['iso.3.6.1.2.1.1.4.0'] = 'Contact',
  ['iso.3.6.1.2.1.1.1.0'] = 'Model',
  ['iso.3.6.1.2.1.1.3.0'] = 'Uptime'
}

-- [[ SNMP client ]] --
function ipChange()
  Device = SNMPSession.New(SNMP.SessionType.V2c);
  Device:setCommunity(Properties.Community.Value);
  Device:setHostName(Controls.IP.String);
  Device:startSession();
  Device.ErrorHandler = function(r) print('ERROR', require('json').encode(r)); end;
  Device.EventHandler = function(r)

    LAST_REPLY = os.time();
  
    -- Mapped controls
    if(MAPS[r.OID]) then
      local ctl = MAPS[r.OID];
      local val = r.Value:match('^"(.*)"$') or r.Value;
      Controls[ctl].String = val;
      return;
    end;
    
    -- Interface operational status
    if(r.OID:match('^iso%.3%.6%.1%.2%.1%.2%.2%.1%.8%.')) then
      local id = r.OID:match('(%d+)$');
      for i,c in ipairs(Controls['Link Index']) do
        if(c.String == id) then
          Controls['Link Up'][i].Value = (r.Value == '1');
        end;
      end;
    end;
    
  end; sysPoll()
end;
Controls.IP.EventHandler = ipChange;

Q = {};
QTimer = Timer.New();
QTimer.EventHandler = function()
  local item = table.remove(Q, 1);
  if(item) then Device:getRequest(item); end;
end;
QTimer:Start(Properties['Packet Interval'].Value);
function q(oid) table.insert(Q, oid); end;

-- [[ System Info Polling ]] --
function sysPoll()
  for oid, ctl in pairs(MAPS) do
    Device:getRequest(oid);
  end;
end;
SysPollTimer = Timer.New();
SysPollTimer.EventHandler = sysPoll;
SysPollTimer:Start(60);

-- [[ Link State Polling ]] --
LinkPollTimer = Timer.New();
LinkPollTimer.EventHandler = function()
  if(not Controls.Reachable.Boolean) then sysPoll(); end;
  for _,c in pairs(Controls['Link Index']) do
    if(c.String ~= '' and tonumber(c.String)) then
      q('iso.3.6.1.2.1.2.2.1.8.' .. c.String);
    end;
  end;
end;
LinkPollTimer:Start(Properties['Poll Interval'].Value);

-- [[ Reachability check ]] --
StatusTimer = Timer.New();
StatusTimer.EventHandler = function()
  if(Controls.IP.String == '') then
    Controls.Status.Value = 6;
    Controls.Status.String = 'IP not set';
    Controls.Reachable.Boolean = false;
    for _,c in ipairs(Controls['Link Up']) do c.Boolean = false; end;
    return;
  end;
  if(#Q > 100) then
    Controls.Status.Value = 1;
    Controls.Status.String = 'Overrun - reduce polling rate';
    return;
  end;
  local time_since_last_reply = os.time() - (LAST_REPLY or 1);
  local currently_replying = (time_since_last_reply < (Properties['Poll Interval'].Value * 2));
  Controls.Reachable.Boolean = currently_replying;
  if(not currently_replying) then
    Controls.Status.Value = 4;
  else
    local downedLinks = {};
    for i,c in ipairs(Controls['Link Index']) do
      if(c.String ~= '' and not Controls['Link Up'][i].Boolean) then
        if(not Controls['Suppress'][i].Boolean) then
          table.insert(downedLinks, Controls['Link Index'][i].String);
        end;
      end;
    end;
    if(#downedLinks == 0) then
      Controls.Status.Value = 0;
    else
      Controls.Status.Value = 2;
      Controls.Status.String = string.format(
        'Link%s %s %s down',
        (#downedLinks > 1 and 's' or ''),
        table.concat(downedLinks, ', '),
        (#downedLinks > 1 and 'are' or 'is')
      );
    end;
  end;
  print('Queue length: ' .. #Q);
end;
StatusTimer:Start(1);

-- [[ Disable unused link states ]] --
DisableTimer = Timer.New();
DisableTimer.EventHandler = function()
  for i,c in ipairs(Controls['Link Index']) do
    local blank = (c.String == '');
    local number = (tonumber(c.String) ~= nil);
    local invalid = ((not blank) and (not number));
    c.Color = invalid and 'red' or 'white';
    Controls['Link Up'][i].IsDisabled = blank or invalid;
  end;
end;
DisableTimer:Start(0.1);

-- start
ipChange();
